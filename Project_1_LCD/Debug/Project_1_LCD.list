
Project_1_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f8c  08002f8c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f94  08002f94  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000080  0800301c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800301c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e83  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016a2  00000000  00000000  00028f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  0002adf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d6a  00000000  00000000  0002b568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007423  00000000  00000000  0004e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d14df  00000000  00000000  000556f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002314  00000000  00000000  00126c50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ed4 	.word	0x08002ed4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002ed4 	.word	0x08002ed4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800059a:	4a38      	ldr	r2, [pc, #224]	; (800067c <HD44780_Init+0xec>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005a0:	4b37      	ldr	r3, [pc, #220]	; (8000680 <HD44780_Init+0xf0>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <HD44780_Init+0xf4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <HD44780_Init+0xec>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d907      	bls.n	80005c4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <HD44780_Init+0xf4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b31      	ldr	r3, [pc, #196]	; (8000684 <HD44780_Init+0xf4>)
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	e006      	b.n	80005d2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005c4:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <HD44780_Init+0xf4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <HD44780_Init+0xf4>)
 80005d0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005d2:	f000 f98f 	bl	80008f4 <DelayInit>
  HAL_Delay(50);
 80005d6:	2032      	movs	r0, #50	; 0x32
 80005d8:	f000 fcb0 	bl	8000f3c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <HD44780_Init+0xf0>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f94d 	bl	8000880 <ExpanderWrite>
  HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f000 fca7 	bl	8000f3c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005ee:	2030      	movs	r0, #48	; 0x30
 80005f0:	f000 f935 	bl	800085e <Write4Bits>
  DelayUS(4500);
 80005f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80005f8:	f000 f9a6 	bl	8000948 <DelayUS>

  Write4Bits(0x03 << 4);
 80005fc:	2030      	movs	r0, #48	; 0x30
 80005fe:	f000 f92e 	bl	800085e <Write4Bits>
  DelayUS(4500);
 8000602:	f241 1094 	movw	r0, #4500	; 0x1194
 8000606:	f000 f99f 	bl	8000948 <DelayUS>

  Write4Bits(0x03 << 4);
 800060a:	2030      	movs	r0, #48	; 0x30
 800060c:	f000 f927 	bl	800085e <Write4Bits>
  DelayUS(4500);
 8000610:	f241 1094 	movw	r0, #4500	; 0x1194
 8000614:	f000 f998 	bl	8000948 <DelayUS>

  Write4Bits(0x02 << 4);
 8000618:	2020      	movs	r0, #32
 800061a:	f000 f920 	bl	800085e <Write4Bits>
  DelayUS(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f000 f992 	bl	8000948 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HD44780_Init+0xf4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f8d8 	bl	80007e4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HD44780_Init+0xf8>)
 8000636:	2204      	movs	r2, #4
 8000638:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800063a:	f000 f875 	bl	8000728 <HD44780_Display>
  HD44780_Clear();
 800063e:	f000 f82b 	bl	8000698 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HD44780_Init+0xfc>)
 8000644:	2202      	movs	r2, #2
 8000646:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <HD44780_Init+0xfc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f8c6 	bl	80007e4 <SendCommand>
  DelayUS(4500);
 8000658:	f241 1094 	movw	r0, #4500	; 0x1194
 800065c:	f000 f974 	bl	8000948 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000660:	490b      	ldr	r1, [pc, #44]	; (8000690 <HD44780_Init+0x100>)
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f876 	bl	8000754 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000668:	490a      	ldr	r1, [pc, #40]	; (8000694 <HD44780_Init+0x104>)
 800066a:	2001      	movs	r0, #1
 800066c:	f000 f872 	bl	8000754 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000670:	f000 f81d 	bl	80006ae <HD44780_Home>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000ba 	.word	0x200000ba
 8000680:	200000bc 	.word	0x200000bc
 8000684:	200000b8 	.word	0x200000b8
 8000688:	200000bb 	.word	0x200000bb
 800068c:	200000b9 	.word	0x200000b9
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008

08000698 <HD44780_Clear>:

void HD44780_Clear()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f8a1 	bl	80007e4 <SendCommand>
  DelayUS(2000);
 80006a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a6:	f000 f94f 	bl	8000948 <DelayUS>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HD44780_Home>:

void HD44780_Home()
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f000 f896 	bl	80007e4 <SendCommand>
  DelayUS(2000);
 80006b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006bc:	f000 f944 	bl	8000948 <DelayUS>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HD44780_SetCursor+0x5c>)
 80006d6:	f107 0408 	add.w	r4, r7, #8
 80006da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HD44780_SetCursor+0x60>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d303      	bcc.n	80006f2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HD44780_SetCursor+0x60>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	f107 0218 	add.w	r2, r7, #24
 80006fa:	4413      	add	r3, r2
 80006fc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4413      	add	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f866 	bl	80007e4 <SendCommand>
}
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	08002eec 	.word	0x08002eec
 8000724:	200000ba 	.word	0x200000ba

08000728 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HD44780_Display+0x28>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HD44780_Display+0x28>)
 8000738:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HD44780_Display+0x28>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f84d 	bl	80007e4 <SendCommand>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000bb 	.word	0x200000bb

08000754 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000772:	b25b      	sxtb	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f834 	bl	80007e4 <SendCommand>
  for (int i=0; i<8; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e009      	b.n	8000796 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f838 	bl	8000800 <SendChar>
  for (int i=0; i<8; i++)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b07      	cmp	r3, #7
 800079a:	ddf2      	ble.n	8000782 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007ac:	e006      	b.n	80007bc <HD44780_PrintStr+0x18>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f822 	bl	8000800 <SendChar>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f4      	bne.n	80007ae <HD44780_PrintStr+0xa>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HD44780_Backlight+0x14>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f852 	bl	8000880 <ExpanderWrite>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000bc 	.word	0x200000bc

080007e4 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f812 	bl	800081c <Send>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f804 	bl	800081c <Send>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f023 030f 	bic.w	r3, r3, #15
 8000832:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	4313      	orrs	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f80b 	bl	800085e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000848:	7bba      	ldrb	r2, [r7, #14]
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4313      	orrs	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f804 	bl	800085e <Write4Bits>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f808 	bl	8000880 <ExpanderWrite>
  PulseEnable(value);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f820 	bl	80008b8 <PulseEnable>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <ExpanderWrite+0x30>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4313      	orrs	r3, r2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000896:	f107 020f 	add.w	r2, r7, #15
 800089a:	230a      	movs	r3, #10
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2301      	movs	r3, #1
 80008a0:	217e      	movs	r1, #126	; 0x7e
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <ExpanderWrite+0x34>)
 80008a4:	f000 ff34 	bl	8001710 <HAL_I2C_Master_Transmit>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000bc 	.word	0x200000bc
 80008b4:	200000c0 	.word	0x200000c0

080008b8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffd8 	bl	8000880 <ExpanderWrite>
  DelayUS(20);
 80008d0:	2014      	movs	r0, #20
 80008d2:	f000 f839 	bl	8000948 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f023 0304 	bic.w	r3, r3, #4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffce 	bl	8000880 <ExpanderWrite>
  DelayUS(20);
 80008e4:	2014      	movs	r0, #20
 80008e6:	f000 f82f 	bl	8000948 <DelayUS>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <DelayInit>:

static void DelayInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <DelayInit+0x4c>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	4a10      	ldr	r2, [pc, #64]	; (8000940 <DelayInit+0x4c>)
 80008fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000902:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <DelayInit+0x4c>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <DelayInit+0x4c>)
 800090a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800090e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <DelayInit+0x50>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <DelayInit+0x50>)
 8000916:	f023 0301 	bic.w	r3, r3, #1
 800091a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <DelayInit+0x50>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a08      	ldr	r2, [pc, #32]	; (8000944 <DelayInit+0x50>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <DelayInit+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800092e:	bf00      	nop
  __ASM volatile ("NOP");
 8000930:	bf00      	nop
  __ASM volatile ("NOP");
 8000932:	bf00      	nop
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000edf0 	.word	0xe000edf0
 8000944:	e0001000 	.word	0xe0001000

08000948 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <DelayUS+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <DelayUS+0x44>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9a      	lsrs	r2, r3, #18
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <DelayUS+0x48>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <DelayUS+0x48>)
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f6      	bhi.n	800096a <DelayUS+0x22>
}
 800097c:	bf00      	nop
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000010 	.word	0x20000010
 800098c:	431bde83 	.word	0x431bde83
 8000990:	e0001000 	.word	0xe0001000

08000994 <timer>:

int s = 0, m = 0, h = 0;
char _timer[14];
int check = 0;

void timer(){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af02      	add	r7, sp, #8
	if(check == 0)
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <timer+0xb8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d124      	bne.n	80009ec <timer+0x58>
	{
		if(s== 59 && m == 59) sprintf(_timer, "%.2d   %.2d   %.2d", h, m, s);
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <timer+0xbc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b3b      	cmp	r3, #59	; 0x3b
 80009a8:	d110      	bne.n	80009cc <timer+0x38>
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <timer+0xc0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b3b      	cmp	r3, #59	; 0x3b
 80009b0:	d10c      	bne.n	80009cc <timer+0x38>
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <timer+0xc4>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <timer+0xc0>)
 80009b8:	6819      	ldr	r1, [r3, #0]
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <timer+0xbc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	460b      	mov	r3, r1
 80009c2:	4926      	ldr	r1, [pc, #152]	; (8000a5c <timer+0xc8>)
 80009c4:	4826      	ldr	r0, [pc, #152]	; (8000a60 <timer+0xcc>)
 80009c6:	f001 fe7f 	bl	80026c8 <siprintf>
 80009ca:	e00b      	b.n	80009e4 <timer+0x50>
		else sprintf(_timer, "%.2d : %.2d   %.2d", h, m, s);
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <timer+0xc4>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <timer+0xc0>)
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <timer+0xbc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	460b      	mov	r3, r1
 80009dc:	4921      	ldr	r1, [pc, #132]	; (8000a64 <timer+0xd0>)
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <timer+0xcc>)
 80009e0:	f001 fe72 	bl	80026c8 <siprintf>
		check = 1;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <timer+0xb8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
		if(m == 60){
			h++;
			m=0;
		}
	}
}
 80009ea:	e02b      	b.n	8000a44 <timer+0xb0>
		sprintf(_timer, "%.2d : %.2d : %.2d", h, m, s);
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <timer+0xc4>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <timer+0xc0>)
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <timer+0xbc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	460b      	mov	r3, r1
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <timer+0xd4>)
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <timer+0xcc>)
 8000a00:	f001 fe62 	bl	80026c8 <siprintf>
		check = 0;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <timer+0xb8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
		s++;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <timer+0xbc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <timer+0xbc>)
 8000a12:	6013      	str	r3, [r2, #0]
		if(s == 60) {
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <timer+0xbc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b3c      	cmp	r3, #60	; 0x3c
 8000a1a:	d107      	bne.n	8000a2c <timer+0x98>
			m++;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <timer+0xc0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <timer+0xc0>)
 8000a24:	6013      	str	r3, [r2, #0]
			s=0;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <timer+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
		if(m == 60){
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <timer+0xc0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b3c      	cmp	r3, #60	; 0x3c
 8000a32:	d107      	bne.n	8000a44 <timer+0xb0>
			h++;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <timer+0xc4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <timer+0xc4>)
 8000a3c:	6013      	str	r3, [r2, #0]
			m=0;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <timer+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000a8 	.word	0x200000a8
 8000a50:	2000009c 	.word	0x2000009c
 8000a54:	200000a0 	.word	0x200000a0
 8000a58:	200000a4 	.word	0x200000a4
 8000a5c:	08002efc 	.word	0x08002efc
 8000a60:	20000114 	.word	0x20000114
 8000a64:	08002f10 	.word	0x08002f10
 8000a68:	08002f24 	.word	0x08002f24

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a70:	f000 f9f2 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f824 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f000 f8c2 	bl	8000c00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a7c:	f000 f880 	bl	8000b80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HD44780_Init(2); // Define row
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fd85 	bl	8000590 <HD44780_Init>
	HD44780_Clear(); // Clear Display
 8000a86:	f7ff fe07 	bl	8000698 <HD44780_Clear>
	HD44780_Backlight(); // Turn on Light
 8000a8a:	f7ff fe9f 	bl	80007cc <HD44780_Backlight>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HD44780_SetCursor(5,0);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2005      	movs	r0, #5
 8000a92:	f7ff fe17 	bl	80006c4 <HD44780_SetCursor>
	  HD44780_PrintStr("TIMER.");
 8000a96:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <main+0x4c>)
 8000a98:	f7ff fe84 	bl	80007a4 <HD44780_PrintStr>
	  HD44780_SetCursor(2,1);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fe10 	bl	80006c4 <HD44780_SetCursor>
	  timer();
 8000aa4:	f7ff ff76 	bl	8000994 <timer>
	  HD44780_PrintStr(_timer);
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <main+0x50>)
 8000aaa:	f7ff fe7b 	bl	80007a4 <HD44780_PrintStr>
	  HAL_Delay(500);
 8000aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab2:	f000 fa43 	bl	8000f3c <HAL_Delay>
	  HD44780_SetCursor(5,0);
 8000ab6:	e7ea      	b.n	8000a8e <main+0x22>
 8000ab8:	08002f38 	.word	0x08002f38
 8000abc:	20000114 	.word	0x20000114

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	; 0x50
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	2230      	movs	r2, #48	; 0x30
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fdf2 	bl	80026b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemClock_Config+0xb8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <SystemClock_Config+0xb8>)
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemClock_Config+0xb8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemClock_Config+0xbc>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <SystemClock_Config+0xbc>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemClock_Config+0xbc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f96d 	bl	8001e14 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b40:	f000 f878 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fbc8 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b6a:	f000 f863 	bl	8000c34 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	; 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <MX_I2C1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x7c>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bbe:	f000 fc6f 	bl	80014a0 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f000 f834 	bl	8000c34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bd0:	f001 f8a5 	bl	8001d1e <HAL_I2CEx_ConfigAnalogFilter>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bda:	f000 f82b 	bl	8000c34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000be2:	f001 f8d8 	bl	8001d96 <HAL_I2CEx_ConfigDigitalFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bec:	f000 f822 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000c0 	.word	0x200000c0
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	000186a0 	.word	0x000186a0

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_GPIO_Init+0x30>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <MX_GPIO_Init+0x30>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_GPIO_Init+0x30>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_I2C_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12b      	bne.n	8000d0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd6:	2312      	movs	r3, #18
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <HAL_I2C_MspInit+0x8c>)
 8000cee:	f000 fa2d 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_I2C_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f8c0 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x50>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x16>
		heap_end = &end;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <_sbrk+0x50>)
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <_sbrk+0x54>)
 8000d94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <_sbrk+0x50>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <_sbrk+0x50>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	466a      	mov	r2, sp
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d907      	bls.n	8000dba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000daa:	f001 fc5b 	bl	8002664 <__errno>
 8000dae:	4602      	mov	r2, r0
 8000db0:	230c      	movs	r3, #12
 8000db2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	e006      	b.n	8000dc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <_sbrk+0x50>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_sbrk+0x50>)
 8000dc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000ac 	.word	0x200000ac
 8000dd4:	20000130 	.word	0x20000130

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SystemInit+0x28>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SystemInit+0x28>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SystemInit+0x28>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr  r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd3 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f001 fc1d 	bl	8002670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fe19 	bl	8000a6c <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e3c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e40:	08002f9c 	.word	0x08002f9c
  ldr  r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e48:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000e4c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000e50:	2000012c 	.word	0x2000012c

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f92f 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff feda 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f939 	bl	8001132 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f90f 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000010 	.word	0x20000010
 8000ef4:	20000018 	.word	0x20000018
 8000ef8:	20000014 	.word	0x20000014

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000018 	.word	0x20000018
 8000f20:	20000124 	.word	0x20000124

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000124 	.word	0x20000124

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_Delay+0x40>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000018 	.word	0x20000018

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff47 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff5c 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff8e 	bl	8001038 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffb0 	bl	80010a0 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e177      	b.n	8001458 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8166 	bne.w	8001452 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d00b      	beq.n	80011a6 <HAL_GPIO_Init+0x5a>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119a:	2b11      	cmp	r3, #17
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d130      	bne.n	8001208 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0xfc>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80c0 	beq.w	8001452 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <HAL_GPIO_Init+0x320>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a64      	ldr	r2, [pc, #400]	; (800146c <HAL_GPIO_Init+0x320>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_GPIO_Init+0x320>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a60      	ldr	r2, [pc, #384]	; (8001470 <HAL_GPIO_Init+0x324>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a57      	ldr	r2, [pc, #348]	; (8001474 <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d037      	beq.n	800138a <HAL_GPIO_Init+0x23e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a56      	ldr	r2, [pc, #344]	; (8001478 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d031      	beq.n	8001386 <HAL_GPIO_Init+0x23a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a55      	ldr	r2, [pc, #340]	; (800147c <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d02b      	beq.n	8001382 <HAL_GPIO_Init+0x236>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a54      	ldr	r2, [pc, #336]	; (8001480 <HAL_GPIO_Init+0x334>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x232>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a53      	ldr	r2, [pc, #332]	; (8001484 <HAL_GPIO_Init+0x338>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x22e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_GPIO_Init+0x33c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x22a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a51      	ldr	r2, [pc, #324]	; (800148c <HAL_GPIO_Init+0x340>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x226>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a50      	ldr	r2, [pc, #320]	; (8001490 <HAL_GPIO_Init+0x344>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x222>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4f      	ldr	r2, [pc, #316]	; (8001494 <HAL_GPIO_Init+0x348>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x21e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <HAL_GPIO_Init+0x34c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x21a>
 8001362:	2309      	movs	r3, #9
 8001364:	e012      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001366:	230a      	movs	r3, #10
 8001368:	e010      	b.n	800138c <HAL_GPIO_Init+0x240>
 800136a:	2308      	movs	r3, #8
 800136c:	e00e      	b.n	800138c <HAL_GPIO_Init+0x240>
 800136e:	2307      	movs	r3, #7
 8001370:	e00c      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001372:	2306      	movs	r3, #6
 8001374:	e00a      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001376:	2305      	movs	r3, #5
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x240>
 800137a:	2304      	movs	r3, #4
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x240>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x240>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4934      	ldr	r1, [pc, #208]	; (8001470 <HAL_GPIO_Init+0x324>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_GPIO_Init+0x350>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_GPIO_Init+0x350>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_GPIO_Init+0x350>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <HAL_GPIO_Init+0x350>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_GPIO_Init+0x350>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_GPIO_Init+0x350>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_GPIO_Init+0x350>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <HAL_GPIO_Init+0x350>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f ae84 	bls.w	8001168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	3724      	adds	r7, #36	; 0x24
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021800 	.word	0x40021800
 8001490:	40021c00 	.word	0x40021c00
 8001494:	40022000 	.word	0x40022000
 8001498:	40022400 	.word	0x40022400
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e11f      	b.n	80016f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fbe4 	bl	8000c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2224      	movs	r2, #36	; 0x24
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001504:	f001 f89a 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a7b      	ldr	r2, [pc, #492]	; (80016fc <HAL_I2C_Init+0x25c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d807      	bhi.n	8001524 <HAL_I2C_Init+0x84>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4a7a      	ldr	r2, [pc, #488]	; (8001700 <HAL_I2C_Init+0x260>)
 8001518:	4293      	cmp	r3, r2
 800151a:	bf94      	ite	ls
 800151c:	2301      	movls	r3, #1
 800151e:	2300      	movhi	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e006      	b.n	8001532 <HAL_I2C_Init+0x92>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4a77      	ldr	r2, [pc, #476]	; (8001704 <HAL_I2C_Init+0x264>)
 8001528:	4293      	cmp	r3, r2
 800152a:	bf94      	ite	ls
 800152c:	2301      	movls	r3, #1
 800152e:	2300      	movhi	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0db      	b.n	80016f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_I2C_Init+0x268>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a64      	ldr	r2, [pc, #400]	; (80016fc <HAL_I2C_Init+0x25c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d802      	bhi.n	8001574 <HAL_I2C_Init+0xd4>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	e009      	b.n	8001588 <HAL_I2C_Init+0xe8>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	4a63      	ldr	r2, [pc, #396]	; (800170c <HAL_I2C_Init+0x26c>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	3301      	adds	r3, #1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	430b      	orrs	r3, r1
 800158e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800159a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4956      	ldr	r1, [pc, #344]	; (80016fc <HAL_I2C_Init+0x25c>)
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d80d      	bhi.n	80015c4 <HAL_I2C_Init+0x124>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e59      	subs	r1, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b04      	cmp	r3, #4
 80015be:	bf38      	it	cc
 80015c0:	2304      	movcc	r3, #4
 80015c2:	e04f      	b.n	8001664 <HAL_I2C_Init+0x1c4>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <HAL_I2C_Init+0x150>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e012      	b.n	8001616 <HAL_I2C_Init+0x176>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Init+0x17e>
 800161a:	2301      	movs	r3, #1
 800161c:	e022      	b.n	8001664 <HAL_I2C_Init+0x1c4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <HAL_I2C_Init+0x1a4>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e58      	subs	r0, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	440b      	add	r3, r1
 8001634:	fbb0 f3f3 	udiv	r3, r0, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001642:	e00f      	b.n	8001664 <HAL_I2C_Init+0x1c4>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	6809      	ldr	r1, [r1, #0]
 8001668:	4313      	orrs	r3, r2
 800166a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6911      	ldr	r1, [r2, #16]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68d2      	ldr	r2, [r2, #12]
 800169e:	4311      	orrs	r1, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	000186a0 	.word	0x000186a0
 8001700:	001e847f 	.word	0x001e847f
 8001704:	003d08ff 	.word	0x003d08ff
 8001708:	431bde83 	.word	0x431bde83
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	461a      	mov	r2, r3
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
 8001720:	4613      	mov	r3, r2
 8001722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fbfe 	bl	8000f24 <HAL_GetTick>
 8001728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	f040 80e0 	bne.w	80018f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2319      	movs	r3, #25
 800173e:	2201      	movs	r2, #1
 8001740:	4970      	ldr	r1, [pc, #448]	; (8001904 <HAL_I2C_Master_Transmit+0x1f4>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f964 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	e0d3      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2C_Master_Transmit+0x50>
 800175c:	2302      	movs	r3, #2
 800175e:	e0cc      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d007      	beq.n	8001786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2221      	movs	r2, #33	; 0x21
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2210      	movs	r2, #16
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	893a      	ldrh	r2, [r7, #8]
 80017b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_I2C_Master_Transmit+0x1f8>)
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c8:	8979      	ldrh	r1, [r7, #10]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f89c 	bl	800190c <I2C_MasterRequestWrite>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e08d      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017f4:	e066      	b.n	80018c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f9de 	bl	8001bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b04      	cmp	r3, #4
 800180c:	d107      	bne.n	800181e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06b      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d11b      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x188>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	6a39      	ldr	r1, [r7, #32]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f9ce 	bl	8001c3e <I2C_WaitOnBTFFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00d      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d107      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01a      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d194      	bne.n	80017f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	00100002 	.word	0x00100002
 8001908:	ffff0000 	.word	0xffff0000

0800190c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b08      	cmp	r3, #8
 8001926:	d006      	beq.n	8001936 <I2C_MasterRequestWrite+0x2a>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d003      	beq.n	8001936 <I2C_MasterRequestWrite+0x2a>
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001934:	d108      	bne.n	8001948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e00b      	b.n	8001960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	2b12      	cmp	r3, #18
 800194e:	d107      	bne.n	8001960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800195e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f84f 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00d      	beq.n	8001994 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001986:	d103      	bne.n	8001990 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e035      	b.n	8001a00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800199c:	d108      	bne.n	80019b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800199e:	897b      	ldrh	r3, [r7, #10]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	e01b      	b.n	80019e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019b0:	897b      	ldrh	r3, [r7, #10]
 80019b2:	11db      	asrs	r3, r3, #7
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f003 0306 	and.w	r3, r3, #6
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f063 030f 	orn	r3, r3, #15
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <I2C_MasterRequestWrite+0xfc>)
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f875 	bl	8001abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e010      	b.n	8001a00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019de:	897b      	ldrh	r3, [r7, #10]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <I2C_MasterRequestWrite+0x100>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f865 	bl	8001abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	00010008 	.word	0x00010008
 8001a0c:	00010002 	.word	0x00010002

08001a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	e025      	b.n	8001a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d021      	beq.n	8001a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2a:	f7ff fa7b 	bl	8000f24 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d302      	bcc.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d116      	bne.n	8001a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e023      	b.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d10d      	bne.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4013      	ands	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	e00c      	b.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d0b6      	beq.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001acc:	e051      	b.n	8001b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001adc:	d123      	bne.n	8001b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f043 0204 	orr.w	r2, r3, #4
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e046      	b.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d021      	beq.n	8001b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2e:	f7ff f9f9 	bl	8000f24 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d302      	bcc.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d116      	bne.n	8001b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f043 0220 	orr.w	r2, r3, #32
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e020      	b.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10c      	bne.n	8001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4013      	ands	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	e00b      	b.n	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d18d      	bne.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bc8:	e02d      	b.n	8001c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f878 	bl	8001cc0 <I2C_IsAcknowledgeFailed>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e02d      	b.n	8001c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d021      	beq.n	8001c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be2:	f7ff f99f 	bl	8000f24 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d302      	bcc.n	8001bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d116      	bne.n	8001c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f043 0220 	orr.w	r2, r3, #32
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e007      	b.n	8001c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b80      	cmp	r3, #128	; 0x80
 8001c32:	d1ca      	bne.n	8001bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c4a:	e02d      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f837 	bl	8001cc0 <I2C_IsAcknowledgeFailed>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e02d      	b.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c62:	d021      	beq.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c64:	f7ff f95e 	bl	8000f24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d302      	bcc.n	8001c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d116      	bne.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e007      	b.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d1ca      	bne.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	d11b      	bne.n	8001d10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ce0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d129      	bne.n	8001d88 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0210 	bic.w	r2, r2, #16
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d12a      	bne.n	8001e06 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	f023 030f 	bic.w	r3, r3, #15
 8001dd6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	89fb      	ldrh	r3, [r7, #14]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	89fa      	ldrh	r2, [r7, #14]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
  }
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e25b      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d075      	beq.n	8001f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e32:	4ba3      	ldr	r3, [pc, #652]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d00c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4ba0      	ldr	r3, [pc, #640]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d112      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b9d      	ldr	r3, [pc, #628]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b99      	ldr	r3, [pc, #612]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x108>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d157      	bne.n	8001f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e236      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x74>
 8001e7a:	4b91      	ldr	r3, [pc, #580]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a90      	ldr	r2, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xb0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x98>
 8001e92:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a8a      	ldr	r2, [pc, #552]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a87      	ldr	r2, [pc, #540]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xb0>
 8001eac:	4b84      	ldr	r3, [pc, #528]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a83      	ldr	r2, [pc, #524]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b81      	ldr	r3, [pc, #516]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f82a 	bl	8000f24 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f826 	bl	8000f24 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1fb      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xc0>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f816 	bl	8000f24 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff f812 	bl	8000f24 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1e7      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b6c      	ldr	r3, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0xe8>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d063      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f36:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d11c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b5f      	ldr	r3, [pc, #380]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x152>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1bb      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b56      	ldr	r3, [pc, #344]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4952      	ldr	r1, [pc, #328]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	e03a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <HAL_RCC_OscConfig+0x2b0>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7fe ffcb 	bl	8000f24 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f92:	f7fe ffc7 	bl	8000f24 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e19c      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4940      	ldr	r1, [pc, #256]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0x2b0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ffaa 	bl	8000f24 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7fe ffa6 	bl	8000f24 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e17b      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d030      	beq.n	8002060 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x2b4>)
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7fe ff8a 	bl	8000f24 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe ff86 	bl	8000f24 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e15b      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x200>
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x2b4>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe ff73 	bl	8000f24 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002042:	f7fe ff6f 	bl	8000f24 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e144      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a0 	beq.w	80021ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x2b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_RCC_OscConfig+0x2b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_RCC_OscConfig+0x2b8>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7fe ff35 	bl	8000f24 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e011      	b.n	80020e2 <HAL_RCC_OscConfig+0x2ce>
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
 80020cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7fe ff28 	bl	8000f24 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fd      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_OscConfig+0x4d4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x2f0>
 80020f6:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a7c      	ldr	r2, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	e01c      	b.n	800213e <HAL_RCC_OscConfig+0x32a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x312>
 800210c:	4b77      	ldr	r3, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a76      	ldr	r2, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	4b74      	ldr	r3, [pc, #464]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a73      	ldr	r2, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x32a>
 8002126:	4b71      	ldr	r3, [pc, #452]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a70      	ldr	r2, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	4b6e      	ldr	r3, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a6d      	ldr	r2, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d015      	beq.n	8002172 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7fe feed 	bl	8000f24 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fee9 	bl	8000f24 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0bc      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCC_OscConfig+0x33a>
 8002170:	e014      	b.n	800219c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe fed7 	bl	8000f24 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fed3 	bl	8000f24 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0a6      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ee      	bne.n	800217a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8092 	beq.w	80022dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b8:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d05c      	beq.n	800227e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d141      	bne.n	8002250 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCC_OscConfig+0x4dc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fea7 	bl	8000f24 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fea3 	bl	8000f24 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e078      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	019b      	lsls	r3, r3, #6
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	061b      	lsls	r3, r3, #24
 800221c:	4933      	ldr	r1, [pc, #204]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x4dc>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fe7c 	bl	8000f24 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fe78 	bl	8000f24 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04d      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x41c>
 800224e:	e045      	b.n	80022dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4dc>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fe65 	bl	8000f24 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fe61 	bl	8000f24 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e036      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x44a>
 800227c:	e02e      	b.n	80022dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e029      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_RCC_OscConfig+0x4d8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	429a      	cmp	r2, r3
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d115      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b2:	4013      	ands	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10d      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40007000 	.word	0x40007000
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470060 	.word	0x42470060

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0cc      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d90c      	bls.n	8002330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d044      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d119      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e067      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4934      	ldr	r1, [pc, #208]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fd9e 	bl	8000f24 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7fe fd9a 	bl	8000f24 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d20c      	bcs.n	800243c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4601      	mov	r1, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	fa21 f303 	lsr.w	r3, r1, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fcfe 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08002f40 	.word	0x08002f40
 80024b8:	20000010 	.word	0x20000010
 80024bc:	20000014 	.word	0x20000014

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d6:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_GetSysClockFreq+0x158>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d007      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x32>
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d008      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x38>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 808d 	bne.w	8002606 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_RCC_GetSysClockFreq+0x15c>)
 80024ee:	60bb      	str	r3, [r7, #8]
       break;
 80024f0:	e08c      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f2:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 80024f4:	60bb      	str	r3, [r7, #8]
      break;
 80024f6:	e089      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_GetSysClockFreq+0x158>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002500:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002502:	4b45      	ldr	r3, [pc, #276]	; (8002618 <HAL_RCC_GetSysClockFreq+0x158>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d023      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCC_GetSysClockFreq+0x158>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	f04f 0400 	mov.w	r4, #0
 8002518:	f240 11ff 	movw	r1, #511	; 0x1ff
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	ea03 0501 	and.w	r5, r3, r1
 8002524:	ea04 0602 	and.w	r6, r4, r2
 8002528:	4a3d      	ldr	r2, [pc, #244]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 800252a:	fb02 f106 	mul.w	r1, r2, r6
 800252e:	2200      	movs	r2, #0
 8002530:	fb02 f205 	mul.w	r2, r2, r5
 8002534:	440a      	add	r2, r1
 8002536:	493a      	ldr	r1, [pc, #232]	; (8002620 <HAL_RCC_GetSysClockFreq+0x160>)
 8002538:	fba5 0101 	umull	r0, r1, r5, r1
 800253c:	1853      	adds	r3, r2, r1
 800253e:	4619      	mov	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	461a      	mov	r2, r3
 8002548:	4623      	mov	r3, r4
 800254a:	f7fd fea1 	bl	8000290 <__aeabi_uldivmod>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e049      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_RCC_GetSysClockFreq+0x158>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	ea03 0501 	and.w	r5, r3, r1
 800256c:	ea04 0602 	and.w	r6, r4, r2
 8002570:	4629      	mov	r1, r5
 8002572:	4632      	mov	r2, r6
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	f04f 0400 	mov.w	r4, #0
 800257c:	0154      	lsls	r4, r2, #5
 800257e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002582:	014b      	lsls	r3, r1, #5
 8002584:	4619      	mov	r1, r3
 8002586:	4622      	mov	r2, r4
 8002588:	1b49      	subs	r1, r1, r5
 800258a:	eb62 0206 	sbc.w	r2, r2, r6
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f04f 0400 	mov.w	r4, #0
 8002596:	0194      	lsls	r4, r2, #6
 8002598:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800259c:	018b      	lsls	r3, r1, #6
 800259e:	1a5b      	subs	r3, r3, r1
 80025a0:	eb64 0402 	sbc.w	r4, r4, r2
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	00e2      	lsls	r2, r4, #3
 80025ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025b2:	00d9      	lsls	r1, r3, #3
 80025b4:	460b      	mov	r3, r1
 80025b6:	4614      	mov	r4, r2
 80025b8:	195b      	adds	r3, r3, r5
 80025ba:	eb44 0406 	adc.w	r4, r4, r6
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	02a2      	lsls	r2, r4, #10
 80025c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025cc:	0299      	lsls	r1, r3, #10
 80025ce:	460b      	mov	r3, r1
 80025d0:	4614      	mov	r4, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	4621      	mov	r1, r4
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f04f 0400 	mov.w	r4, #0
 80025dc:	461a      	mov	r2, r3
 80025de:	4623      	mov	r3, r4
 80025e0:	f7fd fe56 	bl	8000290 <__aeabi_uldivmod>
 80025e4:	4603      	mov	r3, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0x158>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	3301      	adds	r3, #1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	60bb      	str	r3, [r7, #8]
      break;
 8002604:	e002      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002608:	60bb      	str	r3, [r7, #8]
      break;
 800260a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260c:	68bb      	ldr	r3, [r7, #8]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	00f42400 	.word	0x00f42400
 8002620:	017d7840 	.word	0x017d7840

08002624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000010 	.word	0x20000010

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4601      	mov	r1, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a9b      	lsrs	r3, r3, #10
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	08002f50 	.word	0x08002f50

08002664 <__errno>:
 8002664:	4b01      	ldr	r3, [pc, #4]	; (800266c <__errno+0x8>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2000001c 	.word	0x2000001c

08002670 <__libc_init_array>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	4e0d      	ldr	r6, [pc, #52]	; (80026a8 <__libc_init_array+0x38>)
 8002674:	4c0d      	ldr	r4, [pc, #52]	; (80026ac <__libc_init_array+0x3c>)
 8002676:	1ba4      	subs	r4, r4, r6
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	2500      	movs	r5, #0
 800267c:	42a5      	cmp	r5, r4
 800267e:	d109      	bne.n	8002694 <__libc_init_array+0x24>
 8002680:	4e0b      	ldr	r6, [pc, #44]	; (80026b0 <__libc_init_array+0x40>)
 8002682:	4c0c      	ldr	r4, [pc, #48]	; (80026b4 <__libc_init_array+0x44>)
 8002684:	f000 fc26 	bl	8002ed4 <_init>
 8002688:	1ba4      	subs	r4, r4, r6
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	2500      	movs	r5, #0
 800268e:	42a5      	cmp	r5, r4
 8002690:	d105      	bne.n	800269e <__libc_init_array+0x2e>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002698:	4798      	blx	r3
 800269a:	3501      	adds	r5, #1
 800269c:	e7ee      	b.n	800267c <__libc_init_array+0xc>
 800269e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026a2:	4798      	blx	r3
 80026a4:	3501      	adds	r5, #1
 80026a6:	e7f2      	b.n	800268e <__libc_init_array+0x1e>
 80026a8:	08002f94 	.word	0x08002f94
 80026ac:	08002f94 	.word	0x08002f94
 80026b0:	08002f94 	.word	0x08002f94
 80026b4:	08002f98 	.word	0x08002f98

080026b8 <memset>:
 80026b8:	4402      	add	r2, r0
 80026ba:	4603      	mov	r3, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d100      	bne.n	80026c2 <memset+0xa>
 80026c0:	4770      	bx	lr
 80026c2:	f803 1b01 	strb.w	r1, [r3], #1
 80026c6:	e7f9      	b.n	80026bc <memset+0x4>

080026c8 <siprintf>:
 80026c8:	b40e      	push	{r1, r2, r3}
 80026ca:	b500      	push	{lr}
 80026cc:	b09c      	sub	sp, #112	; 0x70
 80026ce:	ab1d      	add	r3, sp, #116	; 0x74
 80026d0:	9002      	str	r0, [sp, #8]
 80026d2:	9006      	str	r0, [sp, #24]
 80026d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026d8:	4809      	ldr	r0, [pc, #36]	; (8002700 <siprintf+0x38>)
 80026da:	9107      	str	r1, [sp, #28]
 80026dc:	9104      	str	r1, [sp, #16]
 80026de:	4909      	ldr	r1, [pc, #36]	; (8002704 <siprintf+0x3c>)
 80026e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80026e4:	9105      	str	r1, [sp, #20]
 80026e6:	6800      	ldr	r0, [r0, #0]
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	a902      	add	r1, sp, #8
 80026ec:	f000 f866 	bl	80027bc <_svfiprintf_r>
 80026f0:	9b02      	ldr	r3, [sp, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	b01c      	add	sp, #112	; 0x70
 80026f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80026fc:	b003      	add	sp, #12
 80026fe:	4770      	bx	lr
 8002700:	2000001c 	.word	0x2000001c
 8002704:	ffff0208 	.word	0xffff0208

08002708 <__ssputs_r>:
 8002708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800270c:	688e      	ldr	r6, [r1, #8]
 800270e:	429e      	cmp	r6, r3
 8002710:	4682      	mov	sl, r0
 8002712:	460c      	mov	r4, r1
 8002714:	4690      	mov	r8, r2
 8002716:	4699      	mov	r9, r3
 8002718:	d837      	bhi.n	800278a <__ssputs_r+0x82>
 800271a:	898a      	ldrh	r2, [r1, #12]
 800271c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002720:	d031      	beq.n	8002786 <__ssputs_r+0x7e>
 8002722:	6825      	ldr	r5, [r4, #0]
 8002724:	6909      	ldr	r1, [r1, #16]
 8002726:	1a6f      	subs	r7, r5, r1
 8002728:	6965      	ldr	r5, [r4, #20]
 800272a:	2302      	movs	r3, #2
 800272c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002730:	fb95 f5f3 	sdiv	r5, r5, r3
 8002734:	f109 0301 	add.w	r3, r9, #1
 8002738:	443b      	add	r3, r7
 800273a:	429d      	cmp	r5, r3
 800273c:	bf38      	it	cc
 800273e:	461d      	movcc	r5, r3
 8002740:	0553      	lsls	r3, r2, #21
 8002742:	d530      	bpl.n	80027a6 <__ssputs_r+0x9e>
 8002744:	4629      	mov	r1, r5
 8002746:	f000 fb2b 	bl	8002da0 <_malloc_r>
 800274a:	4606      	mov	r6, r0
 800274c:	b950      	cbnz	r0, 8002764 <__ssputs_r+0x5c>
 800274e:	230c      	movs	r3, #12
 8002750:	f8ca 3000 	str.w	r3, [sl]
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800275a:	81a3      	strh	r3, [r4, #12]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002764:	463a      	mov	r2, r7
 8002766:	6921      	ldr	r1, [r4, #16]
 8002768:	f000 faa8 	bl	8002cbc <memcpy>
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	81a3      	strh	r3, [r4, #12]
 8002778:	6126      	str	r6, [r4, #16]
 800277a:	6165      	str	r5, [r4, #20]
 800277c:	443e      	add	r6, r7
 800277e:	1bed      	subs	r5, r5, r7
 8002780:	6026      	str	r6, [r4, #0]
 8002782:	60a5      	str	r5, [r4, #8]
 8002784:	464e      	mov	r6, r9
 8002786:	454e      	cmp	r6, r9
 8002788:	d900      	bls.n	800278c <__ssputs_r+0x84>
 800278a:	464e      	mov	r6, r9
 800278c:	4632      	mov	r2, r6
 800278e:	4641      	mov	r1, r8
 8002790:	6820      	ldr	r0, [r4, #0]
 8002792:	f000 fa9e 	bl	8002cd2 <memmove>
 8002796:	68a3      	ldr	r3, [r4, #8]
 8002798:	1b9b      	subs	r3, r3, r6
 800279a:	60a3      	str	r3, [r4, #8]
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	441e      	add	r6, r3
 80027a0:	6026      	str	r6, [r4, #0]
 80027a2:	2000      	movs	r0, #0
 80027a4:	e7dc      	b.n	8002760 <__ssputs_r+0x58>
 80027a6:	462a      	mov	r2, r5
 80027a8:	f000 fb54 	bl	8002e54 <_realloc_r>
 80027ac:	4606      	mov	r6, r0
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d1e2      	bne.n	8002778 <__ssputs_r+0x70>
 80027b2:	6921      	ldr	r1, [r4, #16]
 80027b4:	4650      	mov	r0, sl
 80027b6:	f000 faa5 	bl	8002d04 <_free_r>
 80027ba:	e7c8      	b.n	800274e <__ssputs_r+0x46>

080027bc <_svfiprintf_r>:
 80027bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c0:	461d      	mov	r5, r3
 80027c2:	898b      	ldrh	r3, [r1, #12]
 80027c4:	061f      	lsls	r7, r3, #24
 80027c6:	b09d      	sub	sp, #116	; 0x74
 80027c8:	4680      	mov	r8, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4616      	mov	r6, r2
 80027ce:	d50f      	bpl.n	80027f0 <_svfiprintf_r+0x34>
 80027d0:	690b      	ldr	r3, [r1, #16]
 80027d2:	b96b      	cbnz	r3, 80027f0 <_svfiprintf_r+0x34>
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	f000 fae3 	bl	8002da0 <_malloc_r>
 80027da:	6020      	str	r0, [r4, #0]
 80027dc:	6120      	str	r0, [r4, #16]
 80027de:	b928      	cbnz	r0, 80027ec <_svfiprintf_r+0x30>
 80027e0:	230c      	movs	r3, #12
 80027e2:	f8c8 3000 	str.w	r3, [r8]
 80027e6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ea:	e0c8      	b.n	800297e <_svfiprintf_r+0x1c2>
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	6163      	str	r3, [r4, #20]
 80027f0:	2300      	movs	r3, #0
 80027f2:	9309      	str	r3, [sp, #36]	; 0x24
 80027f4:	2320      	movs	r3, #32
 80027f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027fa:	2330      	movs	r3, #48	; 0x30
 80027fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002800:	9503      	str	r5, [sp, #12]
 8002802:	f04f 0b01 	mov.w	fp, #1
 8002806:	4637      	mov	r7, r6
 8002808:	463d      	mov	r5, r7
 800280a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800280e:	b10b      	cbz	r3, 8002814 <_svfiprintf_r+0x58>
 8002810:	2b25      	cmp	r3, #37	; 0x25
 8002812:	d13e      	bne.n	8002892 <_svfiprintf_r+0xd6>
 8002814:	ebb7 0a06 	subs.w	sl, r7, r6
 8002818:	d00b      	beq.n	8002832 <_svfiprintf_r+0x76>
 800281a:	4653      	mov	r3, sl
 800281c:	4632      	mov	r2, r6
 800281e:	4621      	mov	r1, r4
 8002820:	4640      	mov	r0, r8
 8002822:	f7ff ff71 	bl	8002708 <__ssputs_r>
 8002826:	3001      	adds	r0, #1
 8002828:	f000 80a4 	beq.w	8002974 <_svfiprintf_r+0x1b8>
 800282c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800282e:	4453      	add	r3, sl
 8002830:	9309      	str	r3, [sp, #36]	; 0x24
 8002832:	783b      	ldrb	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 809d 	beq.w	8002974 <_svfiprintf_r+0x1b8>
 800283a:	2300      	movs	r3, #0
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002844:	9304      	str	r3, [sp, #16]
 8002846:	9307      	str	r3, [sp, #28]
 8002848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800284c:	931a      	str	r3, [sp, #104]	; 0x68
 800284e:	462f      	mov	r7, r5
 8002850:	2205      	movs	r2, #5
 8002852:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002856:	4850      	ldr	r0, [pc, #320]	; (8002998 <_svfiprintf_r+0x1dc>)
 8002858:	f7fd fcca 	bl	80001f0 <memchr>
 800285c:	9b04      	ldr	r3, [sp, #16]
 800285e:	b9d0      	cbnz	r0, 8002896 <_svfiprintf_r+0xda>
 8002860:	06d9      	lsls	r1, r3, #27
 8002862:	bf44      	itt	mi
 8002864:	2220      	movmi	r2, #32
 8002866:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800286a:	071a      	lsls	r2, r3, #28
 800286c:	bf44      	itt	mi
 800286e:	222b      	movmi	r2, #43	; 0x2b
 8002870:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002874:	782a      	ldrb	r2, [r5, #0]
 8002876:	2a2a      	cmp	r2, #42	; 0x2a
 8002878:	d015      	beq.n	80028a6 <_svfiprintf_r+0xea>
 800287a:	9a07      	ldr	r2, [sp, #28]
 800287c:	462f      	mov	r7, r5
 800287e:	2000      	movs	r0, #0
 8002880:	250a      	movs	r5, #10
 8002882:	4639      	mov	r1, r7
 8002884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002888:	3b30      	subs	r3, #48	; 0x30
 800288a:	2b09      	cmp	r3, #9
 800288c:	d94d      	bls.n	800292a <_svfiprintf_r+0x16e>
 800288e:	b1b8      	cbz	r0, 80028c0 <_svfiprintf_r+0x104>
 8002890:	e00f      	b.n	80028b2 <_svfiprintf_r+0xf6>
 8002892:	462f      	mov	r7, r5
 8002894:	e7b8      	b.n	8002808 <_svfiprintf_r+0x4c>
 8002896:	4a40      	ldr	r2, [pc, #256]	; (8002998 <_svfiprintf_r+0x1dc>)
 8002898:	1a80      	subs	r0, r0, r2
 800289a:	fa0b f000 	lsl.w	r0, fp, r0
 800289e:	4318      	orrs	r0, r3
 80028a0:	9004      	str	r0, [sp, #16]
 80028a2:	463d      	mov	r5, r7
 80028a4:	e7d3      	b.n	800284e <_svfiprintf_r+0x92>
 80028a6:	9a03      	ldr	r2, [sp, #12]
 80028a8:	1d11      	adds	r1, r2, #4
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	9103      	str	r1, [sp, #12]
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	db01      	blt.n	80028b6 <_svfiprintf_r+0xfa>
 80028b2:	9207      	str	r2, [sp, #28]
 80028b4:	e004      	b.n	80028c0 <_svfiprintf_r+0x104>
 80028b6:	4252      	negs	r2, r2
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	9207      	str	r2, [sp, #28]
 80028be:	9304      	str	r3, [sp, #16]
 80028c0:	783b      	ldrb	r3, [r7, #0]
 80028c2:	2b2e      	cmp	r3, #46	; 0x2e
 80028c4:	d10c      	bne.n	80028e0 <_svfiprintf_r+0x124>
 80028c6:	787b      	ldrb	r3, [r7, #1]
 80028c8:	2b2a      	cmp	r3, #42	; 0x2a
 80028ca:	d133      	bne.n	8002934 <_svfiprintf_r+0x178>
 80028cc:	9b03      	ldr	r3, [sp, #12]
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	9203      	str	r2, [sp, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bfb8      	it	lt
 80028d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80028dc:	3702      	adds	r7, #2
 80028de:	9305      	str	r3, [sp, #20]
 80028e0:	4d2e      	ldr	r5, [pc, #184]	; (800299c <_svfiprintf_r+0x1e0>)
 80028e2:	7839      	ldrb	r1, [r7, #0]
 80028e4:	2203      	movs	r2, #3
 80028e6:	4628      	mov	r0, r5
 80028e8:	f7fd fc82 	bl	80001f0 <memchr>
 80028ec:	b138      	cbz	r0, 80028fe <_svfiprintf_r+0x142>
 80028ee:	2340      	movs	r3, #64	; 0x40
 80028f0:	1b40      	subs	r0, r0, r5
 80028f2:	fa03 f000 	lsl.w	r0, r3, r0
 80028f6:	9b04      	ldr	r3, [sp, #16]
 80028f8:	4303      	orrs	r3, r0
 80028fa:	3701      	adds	r7, #1
 80028fc:	9304      	str	r3, [sp, #16]
 80028fe:	7839      	ldrb	r1, [r7, #0]
 8002900:	4827      	ldr	r0, [pc, #156]	; (80029a0 <_svfiprintf_r+0x1e4>)
 8002902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002906:	2206      	movs	r2, #6
 8002908:	1c7e      	adds	r6, r7, #1
 800290a:	f7fd fc71 	bl	80001f0 <memchr>
 800290e:	2800      	cmp	r0, #0
 8002910:	d038      	beq.n	8002984 <_svfiprintf_r+0x1c8>
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <_svfiprintf_r+0x1e8>)
 8002914:	bb13      	cbnz	r3, 800295c <_svfiprintf_r+0x1a0>
 8002916:	9b03      	ldr	r3, [sp, #12]
 8002918:	3307      	adds	r3, #7
 800291a:	f023 0307 	bic.w	r3, r3, #7
 800291e:	3308      	adds	r3, #8
 8002920:	9303      	str	r3, [sp, #12]
 8002922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002924:	444b      	add	r3, r9
 8002926:	9309      	str	r3, [sp, #36]	; 0x24
 8002928:	e76d      	b.n	8002806 <_svfiprintf_r+0x4a>
 800292a:	fb05 3202 	mla	r2, r5, r2, r3
 800292e:	2001      	movs	r0, #1
 8002930:	460f      	mov	r7, r1
 8002932:	e7a6      	b.n	8002882 <_svfiprintf_r+0xc6>
 8002934:	2300      	movs	r3, #0
 8002936:	3701      	adds	r7, #1
 8002938:	9305      	str	r3, [sp, #20]
 800293a:	4619      	mov	r1, r3
 800293c:	250a      	movs	r5, #10
 800293e:	4638      	mov	r0, r7
 8002940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002944:	3a30      	subs	r2, #48	; 0x30
 8002946:	2a09      	cmp	r2, #9
 8002948:	d903      	bls.n	8002952 <_svfiprintf_r+0x196>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0c8      	beq.n	80028e0 <_svfiprintf_r+0x124>
 800294e:	9105      	str	r1, [sp, #20]
 8002950:	e7c6      	b.n	80028e0 <_svfiprintf_r+0x124>
 8002952:	fb05 2101 	mla	r1, r5, r1, r2
 8002956:	2301      	movs	r3, #1
 8002958:	4607      	mov	r7, r0
 800295a:	e7f0      	b.n	800293e <_svfiprintf_r+0x182>
 800295c:	ab03      	add	r3, sp, #12
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4622      	mov	r2, r4
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <_svfiprintf_r+0x1ec>)
 8002964:	a904      	add	r1, sp, #16
 8002966:	4640      	mov	r0, r8
 8002968:	f3af 8000 	nop.w
 800296c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002970:	4681      	mov	r9, r0
 8002972:	d1d6      	bne.n	8002922 <_svfiprintf_r+0x166>
 8002974:	89a3      	ldrh	r3, [r4, #12]
 8002976:	065b      	lsls	r3, r3, #25
 8002978:	f53f af35 	bmi.w	80027e6 <_svfiprintf_r+0x2a>
 800297c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800297e:	b01d      	add	sp, #116	; 0x74
 8002980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002984:	ab03      	add	r3, sp, #12
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4622      	mov	r2, r4
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <_svfiprintf_r+0x1ec>)
 800298c:	a904      	add	r1, sp, #16
 800298e:	4640      	mov	r0, r8
 8002990:	f000 f882 	bl	8002a98 <_printf_i>
 8002994:	e7ea      	b.n	800296c <_svfiprintf_r+0x1b0>
 8002996:	bf00      	nop
 8002998:	08002f58 	.word	0x08002f58
 800299c:	08002f5e 	.word	0x08002f5e
 80029a0:	08002f62 	.word	0x08002f62
 80029a4:	00000000 	.word	0x00000000
 80029a8:	08002709 	.word	0x08002709

080029ac <_printf_common>:
 80029ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b0:	4691      	mov	r9, r2
 80029b2:	461f      	mov	r7, r3
 80029b4:	688a      	ldr	r2, [r1, #8]
 80029b6:	690b      	ldr	r3, [r1, #16]
 80029b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029bc:	4293      	cmp	r3, r2
 80029be:	bfb8      	it	lt
 80029c0:	4613      	movlt	r3, r2
 80029c2:	f8c9 3000 	str.w	r3, [r9]
 80029c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029ca:	4606      	mov	r6, r0
 80029cc:	460c      	mov	r4, r1
 80029ce:	b112      	cbz	r2, 80029d6 <_printf_common+0x2a>
 80029d0:	3301      	adds	r3, #1
 80029d2:	f8c9 3000 	str.w	r3, [r9]
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	0699      	lsls	r1, r3, #26
 80029da:	bf42      	ittt	mi
 80029dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80029e0:	3302      	addmi	r3, #2
 80029e2:	f8c9 3000 	strmi.w	r3, [r9]
 80029e6:	6825      	ldr	r5, [r4, #0]
 80029e8:	f015 0506 	ands.w	r5, r5, #6
 80029ec:	d107      	bne.n	80029fe <_printf_common+0x52>
 80029ee:	f104 0a19 	add.w	sl, r4, #25
 80029f2:	68e3      	ldr	r3, [r4, #12]
 80029f4:	f8d9 2000 	ldr.w	r2, [r9]
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	42ab      	cmp	r3, r5
 80029fc:	dc28      	bgt.n	8002a50 <_printf_common+0xa4>
 80029fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	3300      	adds	r3, #0
 8002a06:	bf18      	it	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	0692      	lsls	r2, r2, #26
 8002a0c:	d42d      	bmi.n	8002a6a <_printf_common+0xbe>
 8002a0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a12:	4639      	mov	r1, r7
 8002a14:	4630      	mov	r0, r6
 8002a16:	47c0      	blx	r8
 8002a18:	3001      	adds	r0, #1
 8002a1a:	d020      	beq.n	8002a5e <_printf_common+0xb2>
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	68e5      	ldr	r5, [r4, #12]
 8002a20:	f8d9 2000 	ldr.w	r2, [r9]
 8002a24:	f003 0306 	and.w	r3, r3, #6
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	bf08      	it	eq
 8002a2c:	1aad      	subeq	r5, r5, r2
 8002a2e:	68a3      	ldr	r3, [r4, #8]
 8002a30:	6922      	ldr	r2, [r4, #16]
 8002a32:	bf0c      	ite	eq
 8002a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a38:	2500      	movne	r5, #0
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	bfc4      	itt	gt
 8002a3e:	1a9b      	subgt	r3, r3, r2
 8002a40:	18ed      	addgt	r5, r5, r3
 8002a42:	f04f 0900 	mov.w	r9, #0
 8002a46:	341a      	adds	r4, #26
 8002a48:	454d      	cmp	r5, r9
 8002a4a:	d11a      	bne.n	8002a82 <_printf_common+0xd6>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e008      	b.n	8002a62 <_printf_common+0xb6>
 8002a50:	2301      	movs	r3, #1
 8002a52:	4652      	mov	r2, sl
 8002a54:	4639      	mov	r1, r7
 8002a56:	4630      	mov	r0, r6
 8002a58:	47c0      	blx	r8
 8002a5a:	3001      	adds	r0, #1
 8002a5c:	d103      	bne.n	8002a66 <_printf_common+0xba>
 8002a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a66:	3501      	adds	r5, #1
 8002a68:	e7c3      	b.n	80029f2 <_printf_common+0x46>
 8002a6a:	18e1      	adds	r1, r4, r3
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	2030      	movs	r0, #48	; 0x30
 8002a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a74:	4422      	add	r2, r4
 8002a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a7e:	3302      	adds	r3, #2
 8002a80:	e7c5      	b.n	8002a0e <_printf_common+0x62>
 8002a82:	2301      	movs	r3, #1
 8002a84:	4622      	mov	r2, r4
 8002a86:	4639      	mov	r1, r7
 8002a88:	4630      	mov	r0, r6
 8002a8a:	47c0      	blx	r8
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d0e6      	beq.n	8002a5e <_printf_common+0xb2>
 8002a90:	f109 0901 	add.w	r9, r9, #1
 8002a94:	e7d8      	b.n	8002a48 <_printf_common+0x9c>
	...

08002a98 <_printf_i>:
 8002a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	7e09      	ldrb	r1, [r1, #24]
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	296e      	cmp	r1, #110	; 0x6e
 8002aa8:	4617      	mov	r7, r2
 8002aaa:	4606      	mov	r6, r0
 8002aac:	4698      	mov	r8, r3
 8002aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ab0:	f000 80b3 	beq.w	8002c1a <_printf_i+0x182>
 8002ab4:	d822      	bhi.n	8002afc <_printf_i+0x64>
 8002ab6:	2963      	cmp	r1, #99	; 0x63
 8002ab8:	d036      	beq.n	8002b28 <_printf_i+0x90>
 8002aba:	d80a      	bhi.n	8002ad2 <_printf_i+0x3a>
 8002abc:	2900      	cmp	r1, #0
 8002abe:	f000 80b9 	beq.w	8002c34 <_printf_i+0x19c>
 8002ac2:	2958      	cmp	r1, #88	; 0x58
 8002ac4:	f000 8083 	beq.w	8002bce <_printf_i+0x136>
 8002ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002acc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ad0:	e032      	b.n	8002b38 <_printf_i+0xa0>
 8002ad2:	2964      	cmp	r1, #100	; 0x64
 8002ad4:	d001      	beq.n	8002ada <_printf_i+0x42>
 8002ad6:	2969      	cmp	r1, #105	; 0x69
 8002ad8:	d1f6      	bne.n	8002ac8 <_printf_i+0x30>
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	0605      	lsls	r5, r0, #24
 8002ae0:	f103 0104 	add.w	r1, r3, #4
 8002ae4:	d52a      	bpl.n	8002b3c <_printf_i+0xa4>
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da03      	bge.n	8002af6 <_printf_i+0x5e>
 8002aee:	222d      	movs	r2, #45	; 0x2d
 8002af0:	425b      	negs	r3, r3
 8002af2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002af6:	486f      	ldr	r0, [pc, #444]	; (8002cb4 <_printf_i+0x21c>)
 8002af8:	220a      	movs	r2, #10
 8002afa:	e039      	b.n	8002b70 <_printf_i+0xd8>
 8002afc:	2973      	cmp	r1, #115	; 0x73
 8002afe:	f000 809d 	beq.w	8002c3c <_printf_i+0x1a4>
 8002b02:	d808      	bhi.n	8002b16 <_printf_i+0x7e>
 8002b04:	296f      	cmp	r1, #111	; 0x6f
 8002b06:	d020      	beq.n	8002b4a <_printf_i+0xb2>
 8002b08:	2970      	cmp	r1, #112	; 0x70
 8002b0a:	d1dd      	bne.n	8002ac8 <_printf_i+0x30>
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	6023      	str	r3, [r4, #0]
 8002b14:	e003      	b.n	8002b1e <_printf_i+0x86>
 8002b16:	2975      	cmp	r1, #117	; 0x75
 8002b18:	d017      	beq.n	8002b4a <_printf_i+0xb2>
 8002b1a:	2978      	cmp	r1, #120	; 0x78
 8002b1c:	d1d4      	bne.n	8002ac8 <_printf_i+0x30>
 8002b1e:	2378      	movs	r3, #120	; 0x78
 8002b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b24:	4864      	ldr	r0, [pc, #400]	; (8002cb8 <_printf_i+0x220>)
 8002b26:	e055      	b.n	8002bd4 <_printf_i+0x13c>
 8002b28:	6813      	ldr	r3, [r2, #0]
 8002b2a:	1d19      	adds	r1, r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6011      	str	r1, [r2, #0]
 8002b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e08c      	b.n	8002c56 <_printf_i+0x1be>
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6011      	str	r1, [r2, #0]
 8002b40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b44:	bf18      	it	ne
 8002b46:	b21b      	sxthne	r3, r3
 8002b48:	e7cf      	b.n	8002aea <_printf_i+0x52>
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	6825      	ldr	r5, [r4, #0]
 8002b4e:	1d18      	adds	r0, r3, #4
 8002b50:	6010      	str	r0, [r2, #0]
 8002b52:	0628      	lsls	r0, r5, #24
 8002b54:	d501      	bpl.n	8002b5a <_printf_i+0xc2>
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	e002      	b.n	8002b60 <_printf_i+0xc8>
 8002b5a:	0668      	lsls	r0, r5, #25
 8002b5c:	d5fb      	bpl.n	8002b56 <_printf_i+0xbe>
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	4854      	ldr	r0, [pc, #336]	; (8002cb4 <_printf_i+0x21c>)
 8002b62:	296f      	cmp	r1, #111	; 0x6f
 8002b64:	bf14      	ite	ne
 8002b66:	220a      	movne	r2, #10
 8002b68:	2208      	moveq	r2, #8
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b70:	6865      	ldr	r5, [r4, #4]
 8002b72:	60a5      	str	r5, [r4, #8]
 8002b74:	2d00      	cmp	r5, #0
 8002b76:	f2c0 8095 	blt.w	8002ca4 <_printf_i+0x20c>
 8002b7a:	6821      	ldr	r1, [r4, #0]
 8002b7c:	f021 0104 	bic.w	r1, r1, #4
 8002b80:	6021      	str	r1, [r4, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13d      	bne.n	8002c02 <_printf_i+0x16a>
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	f040 808e 	bne.w	8002ca8 <_printf_i+0x210>
 8002b8c:	4665      	mov	r5, ip
 8002b8e:	2a08      	cmp	r2, #8
 8002b90:	d10b      	bne.n	8002baa <_printf_i+0x112>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	07db      	lsls	r3, r3, #31
 8002b96:	d508      	bpl.n	8002baa <_printf_i+0x112>
 8002b98:	6923      	ldr	r3, [r4, #16]
 8002b9a:	6862      	ldr	r2, [r4, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	bfde      	ittt	le
 8002ba0:	2330      	movle	r3, #48	; 0x30
 8002ba2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ba6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002baa:	ebac 0305 	sub.w	r3, ip, r5
 8002bae:	6123      	str	r3, [r4, #16]
 8002bb0:	f8cd 8000 	str.w	r8, [sp]
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	aa03      	add	r2, sp, #12
 8002bb8:	4621      	mov	r1, r4
 8002bba:	4630      	mov	r0, r6
 8002bbc:	f7ff fef6 	bl	80029ac <_printf_common>
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	d14d      	bne.n	8002c60 <_printf_i+0x1c8>
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	b005      	add	sp, #20
 8002bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bce:	4839      	ldr	r0, [pc, #228]	; (8002cb4 <_printf_i+0x21c>)
 8002bd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	1d1d      	adds	r5, r3, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6015      	str	r5, [r2, #0]
 8002bde:	060a      	lsls	r2, r1, #24
 8002be0:	d50b      	bpl.n	8002bfa <_printf_i+0x162>
 8002be2:	07ca      	lsls	r2, r1, #31
 8002be4:	bf44      	itt	mi
 8002be6:	f041 0120 	orrmi.w	r1, r1, #32
 8002bea:	6021      	strmi	r1, [r4, #0]
 8002bec:	b91b      	cbnz	r3, 8002bf6 <_printf_i+0x15e>
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	f022 0220 	bic.w	r2, r2, #32
 8002bf4:	6022      	str	r2, [r4, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	e7b7      	b.n	8002b6a <_printf_i+0xd2>
 8002bfa:	064d      	lsls	r5, r1, #25
 8002bfc:	bf48      	it	mi
 8002bfe:	b29b      	uxthmi	r3, r3
 8002c00:	e7ef      	b.n	8002be2 <_printf_i+0x14a>
 8002c02:	4665      	mov	r5, ip
 8002c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c08:	fb02 3311 	mls	r3, r2, r1, r3
 8002c0c:	5cc3      	ldrb	r3, [r0, r3]
 8002c0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c12:	460b      	mov	r3, r1
 8002c14:	2900      	cmp	r1, #0
 8002c16:	d1f5      	bne.n	8002c04 <_printf_i+0x16c>
 8002c18:	e7b9      	b.n	8002b8e <_printf_i+0xf6>
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	6825      	ldr	r5, [r4, #0]
 8002c1e:	6961      	ldr	r1, [r4, #20]
 8002c20:	1d18      	adds	r0, r3, #4
 8002c22:	6010      	str	r0, [r2, #0]
 8002c24:	0628      	lsls	r0, r5, #24
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	d501      	bpl.n	8002c2e <_printf_i+0x196>
 8002c2a:	6019      	str	r1, [r3, #0]
 8002c2c:	e002      	b.n	8002c34 <_printf_i+0x19c>
 8002c2e:	066a      	lsls	r2, r5, #25
 8002c30:	d5fb      	bpl.n	8002c2a <_printf_i+0x192>
 8002c32:	8019      	strh	r1, [r3, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	6123      	str	r3, [r4, #16]
 8002c38:	4665      	mov	r5, ip
 8002c3a:	e7b9      	b.n	8002bb0 <_printf_i+0x118>
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	1d19      	adds	r1, r3, #4
 8002c40:	6011      	str	r1, [r2, #0]
 8002c42:	681d      	ldr	r5, [r3, #0]
 8002c44:	6862      	ldr	r2, [r4, #4]
 8002c46:	2100      	movs	r1, #0
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f7fd fad1 	bl	80001f0 <memchr>
 8002c4e:	b108      	cbz	r0, 8002c54 <_printf_i+0x1bc>
 8002c50:	1b40      	subs	r0, r0, r5
 8002c52:	6060      	str	r0, [r4, #4]
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	6123      	str	r3, [r4, #16]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c5e:	e7a7      	b.n	8002bb0 <_printf_i+0x118>
 8002c60:	6923      	ldr	r3, [r4, #16]
 8002c62:	462a      	mov	r2, r5
 8002c64:	4639      	mov	r1, r7
 8002c66:	4630      	mov	r0, r6
 8002c68:	47c0      	blx	r8
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	d0aa      	beq.n	8002bc4 <_printf_i+0x12c>
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	079b      	lsls	r3, r3, #30
 8002c72:	d413      	bmi.n	8002c9c <_printf_i+0x204>
 8002c74:	68e0      	ldr	r0, [r4, #12]
 8002c76:	9b03      	ldr	r3, [sp, #12]
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	bfb8      	it	lt
 8002c7c:	4618      	movlt	r0, r3
 8002c7e:	e7a3      	b.n	8002bc8 <_printf_i+0x130>
 8002c80:	2301      	movs	r3, #1
 8002c82:	464a      	mov	r2, r9
 8002c84:	4639      	mov	r1, r7
 8002c86:	4630      	mov	r0, r6
 8002c88:	47c0      	blx	r8
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d09a      	beq.n	8002bc4 <_printf_i+0x12c>
 8002c8e:	3501      	adds	r5, #1
 8002c90:	68e3      	ldr	r3, [r4, #12]
 8002c92:	9a03      	ldr	r2, [sp, #12]
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	42ab      	cmp	r3, r5
 8002c98:	dcf2      	bgt.n	8002c80 <_printf_i+0x1e8>
 8002c9a:	e7eb      	b.n	8002c74 <_printf_i+0x1dc>
 8002c9c:	2500      	movs	r5, #0
 8002c9e:	f104 0919 	add.w	r9, r4, #25
 8002ca2:	e7f5      	b.n	8002c90 <_printf_i+0x1f8>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ac      	bne.n	8002c02 <_printf_i+0x16a>
 8002ca8:	7803      	ldrb	r3, [r0, #0]
 8002caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cb2:	e76c      	b.n	8002b8e <_printf_i+0xf6>
 8002cb4:	08002f69 	.word	0x08002f69
 8002cb8:	08002f7a 	.word	0x08002f7a

08002cbc <memcpy>:
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	1e43      	subs	r3, r0, #1
 8002cc0:	440a      	add	r2, r1
 8002cc2:	4291      	cmp	r1, r2
 8002cc4:	d100      	bne.n	8002cc8 <memcpy+0xc>
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cd0:	e7f7      	b.n	8002cc2 <memcpy+0x6>

08002cd2 <memmove>:
 8002cd2:	4288      	cmp	r0, r1
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	eb01 0302 	add.w	r3, r1, r2
 8002cda:	d807      	bhi.n	8002cec <memmove+0x1a>
 8002cdc:	1e42      	subs	r2, r0, #1
 8002cde:	4299      	cmp	r1, r3
 8002ce0:	d00a      	beq.n	8002cf8 <memmove+0x26>
 8002ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ce6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002cea:	e7f8      	b.n	8002cde <memmove+0xc>
 8002cec:	4283      	cmp	r3, r0
 8002cee:	d9f5      	bls.n	8002cdc <memmove+0xa>
 8002cf0:	1881      	adds	r1, r0, r2
 8002cf2:	1ad2      	subs	r2, r2, r3
 8002cf4:	42d3      	cmn	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <memmove+0x28>
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d02:	e7f7      	b.n	8002cf4 <memmove+0x22>

08002d04 <_free_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4605      	mov	r5, r0
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d045      	beq.n	8002d98 <_free_r+0x94>
 8002d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d10:	1f0c      	subs	r4, r1, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bfb8      	it	lt
 8002d16:	18e4      	addlt	r4, r4, r3
 8002d18:	f000 f8d2 	bl	8002ec0 <__malloc_lock>
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <_free_r+0x98>)
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	4610      	mov	r0, r2
 8002d22:	b933      	cbnz	r3, 8002d32 <_free_r+0x2e>
 8002d24:	6063      	str	r3, [r4, #4]
 8002d26:	6014      	str	r4, [r2, #0]
 8002d28:	4628      	mov	r0, r5
 8002d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d2e:	f000 b8c8 	b.w	8002ec2 <__malloc_unlock>
 8002d32:	42a3      	cmp	r3, r4
 8002d34:	d90c      	bls.n	8002d50 <_free_r+0x4c>
 8002d36:	6821      	ldr	r1, [r4, #0]
 8002d38:	1862      	adds	r2, r4, r1
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	bf04      	itt	eq
 8002d3e:	681a      	ldreq	r2, [r3, #0]
 8002d40:	685b      	ldreq	r3, [r3, #4]
 8002d42:	6063      	str	r3, [r4, #4]
 8002d44:	bf04      	itt	eq
 8002d46:	1852      	addeq	r2, r2, r1
 8002d48:	6022      	streq	r2, [r4, #0]
 8002d4a:	6004      	str	r4, [r0, #0]
 8002d4c:	e7ec      	b.n	8002d28 <_free_r+0x24>
 8002d4e:	4613      	mov	r3, r2
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	b10a      	cbz	r2, 8002d58 <_free_r+0x54>
 8002d54:	42a2      	cmp	r2, r4
 8002d56:	d9fa      	bls.n	8002d4e <_free_r+0x4a>
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	1858      	adds	r0, r3, r1
 8002d5c:	42a0      	cmp	r0, r4
 8002d5e:	d10b      	bne.n	8002d78 <_free_r+0x74>
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	4401      	add	r1, r0
 8002d64:	1858      	adds	r0, r3, r1
 8002d66:	4282      	cmp	r2, r0
 8002d68:	6019      	str	r1, [r3, #0]
 8002d6a:	d1dd      	bne.n	8002d28 <_free_r+0x24>
 8002d6c:	6810      	ldr	r0, [r2, #0]
 8002d6e:	6852      	ldr	r2, [r2, #4]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	4401      	add	r1, r0
 8002d74:	6019      	str	r1, [r3, #0]
 8002d76:	e7d7      	b.n	8002d28 <_free_r+0x24>
 8002d78:	d902      	bls.n	8002d80 <_free_r+0x7c>
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	602b      	str	r3, [r5, #0]
 8002d7e:	e7d3      	b.n	8002d28 <_free_r+0x24>
 8002d80:	6820      	ldr	r0, [r4, #0]
 8002d82:	1821      	adds	r1, r4, r0
 8002d84:	428a      	cmp	r2, r1
 8002d86:	bf04      	itt	eq
 8002d88:	6811      	ldreq	r1, [r2, #0]
 8002d8a:	6852      	ldreq	r2, [r2, #4]
 8002d8c:	6062      	str	r2, [r4, #4]
 8002d8e:	bf04      	itt	eq
 8002d90:	1809      	addeq	r1, r1, r0
 8002d92:	6021      	streq	r1, [r4, #0]
 8002d94:	605c      	str	r4, [r3, #4]
 8002d96:	e7c7      	b.n	8002d28 <_free_r+0x24>
 8002d98:	bd38      	pop	{r3, r4, r5, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200000b0 	.word	0x200000b0

08002da0 <_malloc_r>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	1ccd      	adds	r5, r1, #3
 8002da4:	f025 0503 	bic.w	r5, r5, #3
 8002da8:	3508      	adds	r5, #8
 8002daa:	2d0c      	cmp	r5, #12
 8002dac:	bf38      	it	cc
 8002dae:	250c      	movcc	r5, #12
 8002db0:	2d00      	cmp	r5, #0
 8002db2:	4606      	mov	r6, r0
 8002db4:	db01      	blt.n	8002dba <_malloc_r+0x1a>
 8002db6:	42a9      	cmp	r1, r5
 8002db8:	d903      	bls.n	8002dc2 <_malloc_r+0x22>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	6033      	str	r3, [r6, #0]
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
 8002dc2:	f000 f87d 	bl	8002ec0 <__malloc_lock>
 8002dc6:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <_malloc_r+0xac>)
 8002dc8:	6814      	ldr	r4, [r2, #0]
 8002dca:	4621      	mov	r1, r4
 8002dcc:	b991      	cbnz	r1, 8002df4 <_malloc_r+0x54>
 8002dce:	4c20      	ldr	r4, [pc, #128]	; (8002e50 <_malloc_r+0xb0>)
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	b91b      	cbnz	r3, 8002ddc <_malloc_r+0x3c>
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f000 f863 	bl	8002ea0 <_sbrk_r>
 8002dda:	6020      	str	r0, [r4, #0]
 8002ddc:	4629      	mov	r1, r5
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 f85e 	bl	8002ea0 <_sbrk_r>
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	d124      	bne.n	8002e32 <_malloc_r+0x92>
 8002de8:	230c      	movs	r3, #12
 8002dea:	6033      	str	r3, [r6, #0]
 8002dec:	4630      	mov	r0, r6
 8002dee:	f000 f868 	bl	8002ec2 <__malloc_unlock>
 8002df2:	e7e4      	b.n	8002dbe <_malloc_r+0x1e>
 8002df4:	680b      	ldr	r3, [r1, #0]
 8002df6:	1b5b      	subs	r3, r3, r5
 8002df8:	d418      	bmi.n	8002e2c <_malloc_r+0x8c>
 8002dfa:	2b0b      	cmp	r3, #11
 8002dfc:	d90f      	bls.n	8002e1e <_malloc_r+0x7e>
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	50cd      	str	r5, [r1, r3]
 8002e02:	18cc      	adds	r4, r1, r3
 8002e04:	4630      	mov	r0, r6
 8002e06:	f000 f85c 	bl	8002ec2 <__malloc_unlock>
 8002e0a:	f104 000b 	add.w	r0, r4, #11
 8002e0e:	1d23      	adds	r3, r4, #4
 8002e10:	f020 0007 	bic.w	r0, r0, #7
 8002e14:	1ac3      	subs	r3, r0, r3
 8002e16:	d0d3      	beq.n	8002dc0 <_malloc_r+0x20>
 8002e18:	425a      	negs	r2, r3
 8002e1a:	50e2      	str	r2, [r4, r3]
 8002e1c:	e7d0      	b.n	8002dc0 <_malloc_r+0x20>
 8002e1e:	428c      	cmp	r4, r1
 8002e20:	684b      	ldr	r3, [r1, #4]
 8002e22:	bf16      	itet	ne
 8002e24:	6063      	strne	r3, [r4, #4]
 8002e26:	6013      	streq	r3, [r2, #0]
 8002e28:	460c      	movne	r4, r1
 8002e2a:	e7eb      	b.n	8002e04 <_malloc_r+0x64>
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	6849      	ldr	r1, [r1, #4]
 8002e30:	e7cc      	b.n	8002dcc <_malloc_r+0x2c>
 8002e32:	1cc4      	adds	r4, r0, #3
 8002e34:	f024 0403 	bic.w	r4, r4, #3
 8002e38:	42a0      	cmp	r0, r4
 8002e3a:	d005      	beq.n	8002e48 <_malloc_r+0xa8>
 8002e3c:	1a21      	subs	r1, r4, r0
 8002e3e:	4630      	mov	r0, r6
 8002e40:	f000 f82e 	bl	8002ea0 <_sbrk_r>
 8002e44:	3001      	adds	r0, #1
 8002e46:	d0cf      	beq.n	8002de8 <_malloc_r+0x48>
 8002e48:	6025      	str	r5, [r4, #0]
 8002e4a:	e7db      	b.n	8002e04 <_malloc_r+0x64>
 8002e4c:	200000b0 	.word	0x200000b0
 8002e50:	200000b4 	.word	0x200000b4

08002e54 <_realloc_r>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	4607      	mov	r7, r0
 8002e58:	4614      	mov	r4, r2
 8002e5a:	460e      	mov	r6, r1
 8002e5c:	b921      	cbnz	r1, 8002e68 <_realloc_r+0x14>
 8002e5e:	4611      	mov	r1, r2
 8002e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e64:	f7ff bf9c 	b.w	8002da0 <_malloc_r>
 8002e68:	b922      	cbnz	r2, 8002e74 <_realloc_r+0x20>
 8002e6a:	f7ff ff4b 	bl	8002d04 <_free_r>
 8002e6e:	4625      	mov	r5, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e74:	f000 f826 	bl	8002ec4 <_malloc_usable_size_r>
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d20f      	bcs.n	8002e9c <_realloc_r+0x48>
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f7ff ff8e 	bl	8002da0 <_malloc_r>
 8002e84:	4605      	mov	r5, r0
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d0f2      	beq.n	8002e70 <_realloc_r+0x1c>
 8002e8a:	4631      	mov	r1, r6
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	f7ff ff15 	bl	8002cbc <memcpy>
 8002e92:	4631      	mov	r1, r6
 8002e94:	4638      	mov	r0, r7
 8002e96:	f7ff ff35 	bl	8002d04 <_free_r>
 8002e9a:	e7e9      	b.n	8002e70 <_realloc_r+0x1c>
 8002e9c:	4635      	mov	r5, r6
 8002e9e:	e7e7      	b.n	8002e70 <_realloc_r+0x1c>

08002ea0 <_sbrk_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4c06      	ldr	r4, [pc, #24]	; (8002ebc <_sbrk_r+0x1c>)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	f7fd ff68 	bl	8000d80 <_sbrk>
 8002eb0:	1c43      	adds	r3, r0, #1
 8002eb2:	d102      	bne.n	8002eba <_sbrk_r+0x1a>
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	b103      	cbz	r3, 8002eba <_sbrk_r+0x1a>
 8002eb8:	602b      	str	r3, [r5, #0]
 8002eba:	bd38      	pop	{r3, r4, r5, pc}
 8002ebc:	20000128 	.word	0x20000128

08002ec0 <__malloc_lock>:
 8002ec0:	4770      	bx	lr

08002ec2 <__malloc_unlock>:
 8002ec2:	4770      	bx	lr

08002ec4 <_malloc_usable_size_r>:
 8002ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec8:	1f18      	subs	r0, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfbc      	itt	lt
 8002ece:	580b      	ldrlt	r3, [r1, r0]
 8002ed0:	18c0      	addlt	r0, r0, r3
 8002ed2:	4770      	bx	lr

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
