
Project_2_analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080061b8  080061b8  000161b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006468  08006468  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001ec  0800665c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800665c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b52e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b8b  00000000  00000000  0002b74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023856  00000000  00000000  0002e598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c45  00000000  00000000  00051dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6387  00000000  00000000  0005aa33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  00130e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061a0 	.word	0x080061a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	080061a0 	.word	0x080061a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f72:	4a38      	ldr	r2, [pc, #224]	; (8001054 <HD44780_Init+0xec>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HD44780_Init+0xf0>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <HD44780_Init+0xf4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HD44780_Init+0xec>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d907      	bls.n	8000f9c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <HD44780_Init+0xf4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b31      	ldr	r3, [pc, #196]	; (800105c <HD44780_Init+0xf4>)
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e006      	b.n	8000faa <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HD44780_Init+0xf4>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HD44780_Init+0xf4>)
 8000fa8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000faa:	f000 f99b 	bl	80012e4 <DelayInit>
  HAL_Delay(50);
 8000fae:	2032      	movs	r0, #50	; 0x32
 8000fb0:	f000 ff48 	bl	8001e44 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <HD44780_Init+0xf0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f959 	bl	8001270 <ExpanderWrite>
  HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f000 ff3f 	bl	8001e44 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000fc6:	2030      	movs	r0, #48	; 0x30
 8000fc8:	f000 f941 	bl	800124e <Write4Bits>
  DelayUS(4500);
 8000fcc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fd0:	f000 f9b2 	bl	8001338 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fd4:	2030      	movs	r0, #48	; 0x30
 8000fd6:	f000 f93a 	bl	800124e <Write4Bits>
  DelayUS(4500);
 8000fda:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fde:	f000 f9ab 	bl	8001338 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fe2:	2030      	movs	r0, #48	; 0x30
 8000fe4:	f000 f933 	bl	800124e <Write4Bits>
  DelayUS(4500);
 8000fe8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fec:	f000 f9a4 	bl	8001338 <DelayUS>

  Write4Bits(0x02 << 4);
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	f000 f92c 	bl	800124e <Write4Bits>
  DelayUS(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f000 f99e 	bl	8001338 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HD44780_Init+0xf4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f043 0320 	orr.w	r3, r3, #32
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f8e4 	bl	80011d4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HD44780_Init+0xf8>)
 800100e:	2204      	movs	r2, #4
 8001010:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001012:	f000 f875 	bl	8001100 <HD44780_Display>
  HD44780_Clear();
 8001016:	f000 f82b 	bl	8001070 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HD44780_Init+0xfc>)
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HD44780_Init+0xfc>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8d2 	bl	80011d4 <SendCommand>
  DelayUS(4500);
 8001030:	f241 1094 	movw	r0, #4500	; 0x1194
 8001034:	f000 f980 	bl	8001338 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001038:	490b      	ldr	r1, [pc, #44]	; (8001068 <HD44780_Init+0x100>)
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f876 	bl	800112c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001040:	490a      	ldr	r1, [pc, #40]	; (800106c <HD44780_Init+0x104>)
 8001042:	2001      	movs	r0, #1
 8001044:	f000 f872 	bl	800112c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001048:	f000 f81d 	bl	8001086 <HD44780_Home>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000222 	.word	0x20000222
 8001058:	20000224 	.word	0x20000224
 800105c:	20000220 	.word	0x20000220
 8001060:	20000223 	.word	0x20000223
 8001064:	20000221 	.word	0x20000221
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008

08001070 <HD44780_Clear>:

void HD44780_Clear()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001074:	2001      	movs	r0, #1
 8001076:	f000 f8ad 	bl	80011d4 <SendCommand>
  DelayUS(2000);
 800107a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800107e:	f000 f95b 	bl	8001338 <DelayUS>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}

08001086 <HD44780_Home>:

void HD44780_Home()
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800108a:	2002      	movs	r0, #2
 800108c:	f000 f8a2 	bl	80011d4 <SendCommand>
  DelayUS(2000);
 8001090:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001094:	f000 f950 	bl	8001338 <DelayUS>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HD44780_SetCursor+0x5c>)
 80010ae:	f107 0408 	add.w	r4, r7, #8
 80010b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HD44780_SetCursor+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	79ba      	ldrb	r2, [r7, #6]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d303      	bcc.n	80010ca <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HD44780_SetCursor+0x60>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	f107 0218 	add.w	r2, r7, #24
 80010d2:	4413      	add	r3, r2
 80010d4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4413      	add	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f872 	bl	80011d4 <SendCommand>
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	080061b8 	.word	0x080061b8
 80010fc:	20000222 	.word	0x20000222

08001100 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HD44780_Display+0x28>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HD44780_Display+0x28>)
 8001110:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HD44780_Display+0x28>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f859 	bl	80011d4 <SendCommand>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000223 	.word	0x20000223

0800112c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	b25b      	sxtb	r3, r3
 8001146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114a:	b25b      	sxtb	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f840 	bl	80011d4 <SendCommand>
  for (int i=0; i<8; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e009      	b.n	800116e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f844 	bl	80011f0 <SendChar>
  for (int i=0; i<8; i++)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b07      	cmp	r3, #7
 8001172:	ddf2      	ble.n	800115a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001184:	e006      	b.n	8001194 <HD44780_PrintStr+0x18>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f82e 	bl	80011f0 <SendChar>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f4      	bne.n	8001186 <HD44780_PrintStr+0xa>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HD44780_NoBacklight+0x14>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f85e 	bl	8001270 <ExpanderWrite>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000224 	.word	0x20000224

080011bc <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HD44780_Backlight+0x14>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f852 	bl	8001270 <ExpanderWrite>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000224 	.word	0x20000224

080011d4 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f812 	bl	800120c <Send>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2101      	movs	r1, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f804 	bl	800120c <Send>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f023 030f 	bic.w	r3, r3, #15
 8001222:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	4313      	orrs	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f80b 	bl	800124e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001238:	7bba      	ldrb	r2, [r7, #14]
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	4313      	orrs	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f804 	bl	800124e <Write4Bits>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f808 	bl	8001270 <ExpanderWrite>
  PulseEnable(value);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f820 	bl	80012a8 <PulseEnable>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <ExpanderWrite+0x30>)
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4313      	orrs	r3, r2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001286:	f107 020f 	add.w	r2, r7, #15
 800128a:	230a      	movs	r3, #10
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	217e      	movs	r1, #126	; 0x7e
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <ExpanderWrite+0x34>)
 8001294:	f001 ff6c 	bl	8003170 <HAL_I2C_Master_Transmit>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000224 	.word	0x20000224
 80012a4:	20000228 	.word	0x20000228

080012a8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ffd8 	bl	8001270 <ExpanderWrite>
  DelayUS(20);
 80012c0:	2014      	movs	r0, #20
 80012c2:	f000 f839 	bl	8001338 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ffce 	bl	8001270 <ExpanderWrite>
  DelayUS(20);
 80012d4:	2014      	movs	r0, #20
 80012d6:	f000 f82f 	bl	8001338 <DelayUS>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <DelayInit>:

static void DelayInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <DelayInit+0x4c>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <DelayInit+0x4c>)
 80012ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <DelayInit+0x4c>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <DelayInit+0x4c>)
 80012fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fe:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <DelayInit+0x50>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <DelayInit+0x50>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <DelayInit+0x50>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <DelayInit+0x50>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <DelayInit+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800131e:	bf00      	nop
  __ASM volatile ("NOP");
 8001320:	bf00      	nop
  __ASM volatile ("NOP");
 8001322:	bf00      	nop
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000edf0 	.word	0xe000edf0
 8001334:	e0001000 	.word	0xe0001000

08001338 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <DelayUS+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <DelayUS+0x44>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9a      	lsrs	r2, r3, #18
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <DelayUS+0x48>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <DelayUS+0x48>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f6      	bhi.n	800135a <DelayUS+0x22>
}
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000010 	.word	0x20000010
 800137c:	431bde83 	.word	0x431bde83
 8001380:	e0001000 	.word	0xe0001000

08001384 <clear_lcd>:
float tempC, tempF;
int statusC = 0, statusF = 0;;
int count = 0;

void clear_lcd()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	if(tempC > 100)
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <clear_lcd+0x88>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001410 <clear_lcd+0x8c>
 8001392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	dd02      	ble.n	80013a2 <clear_lcd+0x1e>
	{
		statusC = 1;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <clear_lcd+0x90>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
	}
	if(tempF > 100)
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <clear_lcd+0x94>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001410 <clear_lcd+0x8c>
 80013ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	dd02      	ble.n	80013bc <clear_lcd+0x38>
	{
		statusF = 1;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <clear_lcd+0x98>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
	}
	if((tempC < 100 && statusC == 1) || (tempF < 100 && statusF == 1)){
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <clear_lcd+0x88>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001410 <clear_lcd+0x8c>
 80013c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	d503      	bpl.n	80013d8 <clear_lcd+0x54>
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <clear_lcd+0x90>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d00e      	beq.n	80013f6 <clear_lcd+0x72>
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <clear_lcd+0x94>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001410 <clear_lcd+0x8c>
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d400      	bmi.n	80013ee <clear_lcd+0x6a>
		HD44780_Clear();
		statusC = 0;
		statusF = 0;
	}
}
 80013ec:	e00b      	b.n	8001406 <clear_lcd+0x82>
	if((tempC < 100 && statusC == 1) || (tempF < 100 && statusF == 1)){
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <clear_lcd+0x98>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <clear_lcd+0x82>
		HD44780_Clear();
 80013f6:	f7ff fe3b 	bl	8001070 <HD44780_Clear>
		statusC = 0;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <clear_lcd+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
		statusF = 0;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <clear_lcd+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002c4 	.word	0x200002c4
 8001410:	42c80000 	.word	0x42c80000
 8001414:	20000208 	.word	0x20000208
 8001418:	200002c8 	.word	0x200002c8
 800141c:	2000020c 	.word	0x2000020c

08001420 <convert_data>:

float convert_data(int raw, char mode)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	float c = (float)raw/(float)10.5;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001436:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(mode == 'C') return c;
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	2b43      	cmp	r3, #67	; 0x43
 8001446:	d101      	bne.n	800144c <convert_data+0x2c>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	e01f      	b.n	800148c <convert_data+0x6c>
	if(mode == 'K') return c = (c*1.8) + 32;
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b4b      	cmp	r3, #75	; 0x4b
 8001450:	d11a      	bne.n	8001488 <convert_data+0x68>
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff f888 	bl	8000568 <__aeabi_f2d>
 8001458:	a312      	add	r3, pc, #72	; (adr r3, 80014a4 <convert_data+0x84>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f8db 	bl	8000618 <__aeabi_dmul>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <convert_data+0x80>)
 8001470:	f7fe ff1c 	bl	80002ac <__adddf3>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4618      	mov	r0, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f7ff fba4 	bl	8000bc8 <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	e001      	b.n	800148c <convert_data+0x6c>
	return 0.0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	ee07 3a90 	vmov	s15, r3
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w
 80014a0:	40400000 	.word	0x40400000
 80014a4:	cccccccd 	.word	0xcccccccd
 80014a8:	3ffccccc 	.word	0x3ffccccc

080014ac <checktemp>:

void checktemp()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	if(tempC >= 20.0)
 80014b0:	4b7e      	ldr	r3, [pc, #504]	; (80016ac <checktemp+0x200>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	db1f      	blt.n	8001504 <checktemp+0x58>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4879      	ldr	r0, [pc, #484]	; (80016b0 <checktemp+0x204>)
 80014ca:	f001 fcff 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	4877      	ldr	r0, [pc, #476]	; (80016b0 <checktemp+0x204>)
 80014d4:	f001 fcfa 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2108      	movs	r1, #8
 80014dc:	4874      	ldr	r0, [pc, #464]	; (80016b0 <checktemp+0x204>)
 80014de:	f001 fcf5 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e8:	4871      	ldr	r0, [pc, #452]	; (80016b0 <checktemp+0x204>)
 80014ea:	f001 fcef 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	486e      	ldr	r0, [pc, #440]	; (80016b0 <checktemp+0x204>)
 80014f6:	f001 fce9 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2101      	movs	r1, #1
 80014fe:	486d      	ldr	r0, [pc, #436]	; (80016b4 <checktemp+0x208>)
 8001500:	f001 fce4 	bl	8002ecc <HAL_GPIO_WritePin>
	}
	if(tempC >= 40.0){
 8001504:	4b69      	ldr	r3, [pc, #420]	; (80016ac <checktemp+0x200>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80016b8 <checktemp+0x20c>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	db1f      	blt.n	8001558 <checktemp+0xac>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	4864      	ldr	r0, [pc, #400]	; (80016b0 <checktemp+0x204>)
 800151e:	f001 fcd5 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4862      	ldr	r0, [pc, #392]	; (80016b0 <checktemp+0x204>)
 8001528:	f001 fcd0 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2108      	movs	r1, #8
 8001530:	485f      	ldr	r0, [pc, #380]	; (80016b0 <checktemp+0x204>)
 8001532:	f001 fccb 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153c:	485c      	ldr	r0, [pc, #368]	; (80016b0 <checktemp+0x204>)
 800153e:	f001 fcc5 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001548:	4859      	ldr	r0, [pc, #356]	; (80016b0 <checktemp+0x204>)
 800154a:	f001 fcbf 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	4858      	ldr	r0, [pc, #352]	; (80016b4 <checktemp+0x208>)
 8001554:	f001 fcba 	bl	8002ecc <HAL_GPIO_WritePin>
	}
	if(tempC >= 60.0){
 8001558:	4b54      	ldr	r3, [pc, #336]	; (80016ac <checktemp+0x200>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80016bc <checktemp+0x210>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	db1f      	blt.n	80015ac <checktemp+0x100>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2110      	movs	r1, #16
 8001570:	484f      	ldr	r0, [pc, #316]	; (80016b0 <checktemp+0x204>)
 8001572:	f001 fcab 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2120      	movs	r1, #32
 800157a:	484d      	ldr	r0, [pc, #308]	; (80016b0 <checktemp+0x204>)
 800157c:	f001 fca6 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2108      	movs	r1, #8
 8001584:	484a      	ldr	r0, [pc, #296]	; (80016b0 <checktemp+0x204>)
 8001586:	f001 fca1 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001590:	4847      	ldr	r0, [pc, #284]	; (80016b0 <checktemp+0x204>)
 8001592:	f001 fc9b 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	4844      	ldr	r0, [pc, #272]	; (80016b0 <checktemp+0x204>)
 800159e:	f001 fc95 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2101      	movs	r1, #1
 80015a6:	4843      	ldr	r0, [pc, #268]	; (80016b4 <checktemp+0x208>)
 80015a8:	f001 fc90 	bl	8002ecc <HAL_GPIO_WritePin>
	}
	if(tempC >= 80.0){
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <checktemp+0x200>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80016c0 <checktemp+0x214>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	db1f      	blt.n	8001600 <checktemp+0x154>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2110      	movs	r1, #16
 80015c4:	483a      	ldr	r0, [pc, #232]	; (80016b0 <checktemp+0x204>)
 80015c6:	f001 fc81 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2120      	movs	r1, #32
 80015ce:	4838      	ldr	r0, [pc, #224]	; (80016b0 <checktemp+0x204>)
 80015d0:	f001 fc7c 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2108      	movs	r1, #8
 80015d8:	4835      	ldr	r0, [pc, #212]	; (80016b0 <checktemp+0x204>)
 80015da:	f001 fc77 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e4:	4832      	ldr	r0, [pc, #200]	; (80016b0 <checktemp+0x204>)
 80015e6:	f001 fc71 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	482f      	ldr	r0, [pc, #188]	; (80016b0 <checktemp+0x204>)
 80015f2:	f001 fc6b 	bl	8002ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2101      	movs	r1, #1
 80015fa:	482e      	ldr	r0, [pc, #184]	; (80016b4 <checktemp+0x208>)
 80015fc:	f001 fc66 	bl	8002ecc <HAL_GPIO_WritePin>
	}
	if(tempC >= 100.0){
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <checktemp+0x200>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80016c4 <checktemp+0x218>
 800160a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	da00      	bge.n	8001616 <checktemp+0x16a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
			HD44780_NoBacklight();
		}
	}
}
 8001614:	e048      	b.n	80016a8 <checktemp+0x1fc>
		if(count <= 1){
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <checktemp+0x21c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	dc22      	bgt.n	8001664 <checktemp+0x1b8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	4823      	ldr	r0, [pc, #140]	; (80016b0 <checktemp+0x204>)
 8001624:	f001 fc52 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2120      	movs	r1, #32
 800162c:	4820      	ldr	r0, [pc, #128]	; (80016b0 <checktemp+0x204>)
 800162e:	f001 fc4d 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2108      	movs	r1, #8
 8001636:	481e      	ldr	r0, [pc, #120]	; (80016b0 <checktemp+0x204>)
 8001638:	f001 fc48 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001642:	481b      	ldr	r0, [pc, #108]	; (80016b0 <checktemp+0x204>)
 8001644:	f001 fc42 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <checktemp+0x204>)
 8001650:	f001 fc3c 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2101      	movs	r1, #1
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <checktemp+0x208>)
 800165a:	f001 fc37 	bl	8002ecc <HAL_GPIO_WritePin>
			HD44780_Backlight();
 800165e:	f7ff fdad 	bl	80011bc <HD44780_Backlight>
}
 8001662:	e021      	b.n	80016a8 <checktemp+0x1fc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	4811      	ldr	r0, [pc, #68]	; (80016b0 <checktemp+0x204>)
 800166a:	f001 fc2f 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2120      	movs	r1, #32
 8001672:	480f      	ldr	r0, [pc, #60]	; (80016b0 <checktemp+0x204>)
 8001674:	f001 fc2a 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2108      	movs	r1, #8
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <checktemp+0x204>)
 800167e:	f001 fc25 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <checktemp+0x204>)
 800168a:	f001 fc1f 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001694:	4806      	ldr	r0, [pc, #24]	; (80016b0 <checktemp+0x204>)
 8001696:	f001 fc19 	bl	8002ecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2101      	movs	r1, #1
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <checktemp+0x208>)
 80016a0:	f001 fc14 	bl	8002ecc <HAL_GPIO_WritePin>
			HD44780_NoBacklight();
 80016a4:	f7ff fd7e 	bl	80011a4 <HD44780_NoBacklight>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200002c4 	.word	0x200002c4
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	42200000 	.word	0x42200000
 80016bc:	42700000 	.word	0x42700000
 80016c0:	42a00000 	.word	0x42a00000
 80016c4:	42c80000 	.word	0x42c80000
 80016c8:	20000210 	.word	0x20000210

080016cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b09b      	sub	sp, #108	; 0x6c
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int raw = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d6:	f000 fb43 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016da:	f000 f87f 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016de:	f000 f96f 	bl	80019c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016e2:	f000 f92d 	bl	8001940 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016e6:	f000 f8d9 	bl	800189c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HD44780_Init(2); // Define row
 80016ea:	2002      	movs	r0, #2
 80016ec:	f7ff fc3c 	bl	8000f68 <HD44780_Init>
	HD44780_Clear(); // Clear Display
 80016f0:	f7ff fcbe 	bl	8001070 <HD44780_Clear>
	HD44780_Backlight(); // Turn on Light
 80016f4:	f7ff fd62 	bl	80011bc <HD44780_Backlight>
	HAL_ADC_Start(&hadc1);
 80016f8:	4832      	ldr	r0, [pc, #200]	; (80017c4 <main+0xf8>)
 80016fa:	f000 fc09 	bl	8001f10 <HAL_ADC_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Read Temperature
	  HAL_ADC_Start(&hadc1);
 80016fe:	4831      	ldr	r0, [pc, #196]	; (80017c4 <main+0xf8>)
 8001700:	f000 fc06 	bl	8001f10 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	482e      	ldr	r0, [pc, #184]	; (80017c4 <main+0xf8>)
 800170a:	f000 fcfa 	bl	8002102 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 800170e:	482d      	ldr	r0, [pc, #180]	; (80017c4 <main+0xf8>)
 8001710:	f000 febc 	bl	800248c <HAL_ADC_GetValue>
 8001714:	4603      	mov	r3, r0
 8001716:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_ADC_Stop(&hadc1);
 8001718:	482a      	ldr	r0, [pc, #168]	; (80017c4 <main+0xf8>)
 800171a:	f000 fcbf 	bl	800209c <HAL_ADC_Stop>

	  //Display
	  HD44780_Backlight();
 800171e:	f7ff fd4d 	bl	80011bc <HD44780_Backlight>
	  tempC = convert_data(raw, 'C');
 8001722:	2143      	movs	r1, #67	; 0x43
 8001724:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001726:	f7ff fe7b 	bl	8001420 <convert_data>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <main+0xfc>)
 8001730:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(msg, "TempC : %.1f C", tempC);
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <main+0xfc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff15 	bl	8000568 <__aeabi_f2d>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4638      	mov	r0, r7
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	4920      	ldr	r1, [pc, #128]	; (80017cc <main+0x100>)
 800174a:	f003 f949 	bl	80049e0 <siprintf>
	  HD44780_SetCursor(0,0);
 800174e:	2100      	movs	r1, #0
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fca3 	bl	800109c <HD44780_SetCursor>
	  HD44780_PrintStr(msg);
 8001756:	463b      	mov	r3, r7
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fd0f 	bl	800117c <HD44780_PrintStr>
	  tempF = convert_data(raw, 'K');
 800175e:	214b      	movs	r1, #75	; 0x4b
 8001760:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001762:	f7ff fe5d 	bl	8001420 <convert_data>
 8001766:	eef0 7a40 	vmov.f32	s15, s0
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <main+0x104>)
 800176c:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(msg, "TempF : %.1f F", tempF);
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <main+0x104>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fef7 	bl	8000568 <__aeabi_f2d>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	4638      	mov	r0, r7
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	4913      	ldr	r1, [pc, #76]	; (80017d4 <main+0x108>)
 8001786:	f003 f92b 	bl	80049e0 <siprintf>
	  HD44780_SetCursor(0,1);
 800178a:	2101      	movs	r1, #1
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fc85 	bl	800109c <HD44780_SetCursor>
	  HD44780_PrintStr(msg);
 8001792:	463b      	mov	r3, r7
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fcf1 	bl	800117c <HD44780_PrintStr>
	  clear_lcd();
 800179a:	f7ff fdf3 	bl	8001384 <clear_lcd>
	  checktemp();
 800179e:	f7ff fe85 	bl	80014ac <checktemp>
	  HAL_Delay(100);
 80017a2:	2064      	movs	r0, #100	; 0x64
 80017a4:	f000 fb4e 	bl	8001e44 <HAL_Delay>
	  count++;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <main+0x10c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <main+0x10c>)
 80017b0:	6013      	str	r3, [r2, #0]
	  if(count == 3) count =0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <main+0x10c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d1a1      	bne.n	80016fe <main+0x32>
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <main+0x10c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 80017c0:	e79d      	b.n	80016fe <main+0x32>
 80017c2:	bf00      	nop
 80017c4:	2000027c 	.word	0x2000027c
 80017c8:	200002c4 	.word	0x200002c4
 80017cc:	080061c8 	.word	0x080061c8
 80017d0:	200002c8 	.word	0x200002c8
 80017d4:	080061d8 	.word	0x080061d8
 80017d8:	20000210 	.word	0x20000210

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	2230      	movs	r2, #48	; 0x30
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fc94 	bl	8004118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <SystemClock_Config+0xb8>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <SystemClock_Config+0xb8>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SystemClock_Config+0xb8>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <SystemClock_Config+0xbc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <SystemClock_Config+0xbc>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <SystemClock_Config+0xbc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	2302      	movs	r3, #2
 800183e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f80f 	bl	8003874 <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800185c:	f000 f918 	bl	8001a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fa6a 	bl	8003d54 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001886:	f000 f903 	bl	8001a90 <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_ADC1_Init+0x98>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <MX_ADC1_Init+0x9c>)
 80018b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_ADC1_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_ADC1_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_ADC1_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_ADC1_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_ADC1_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_ADC1_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_ADC1_Init+0x98>)
 80018dc:	4a17      	ldr	r2, [pc, #92]	; (800193c <MX_ADC1_Init+0xa0>)
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_ADC1_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_ADC1_Init+0x98>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_ADC1_Init+0x98>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_ADC1_Init+0x98>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <MX_ADC1_Init+0x98>)
 80018fc:	f000 fac4 	bl	8001e88 <HAL_ADC_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 f8c3 	bl	8001a90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800190a:	2308      	movs	r3, #8
 800190c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_ADC1_Init+0x98>)
 800191c:	f000 fde2 	bl	80024e4 <HAL_ADC_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001926:	f000 f8b3 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000027c 	.word	0x2000027c
 8001938:	40012000 	.word	0x40012000
 800193c:	0f000001 	.word	0x0f000001

08001940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <MX_I2C1_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_I2C1_Init+0x74>)
 800194c:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <MX_I2C1_Init+0x7c>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_I2C1_Init+0x74>)
 800195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_I2C1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_I2C1_Init+0x74>)
 800197e:	f001 fabf 	bl	8002f00 <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001988:	f000 f882 	bl	8001a90 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_I2C1_Init+0x74>)
 8001990:	f001 fef5 	bl	800377e <HAL_I2CEx_ConfigAnalogFilter>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800199a:	f000 f879 	bl	8001a90 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_I2C1_Init+0x74>)
 80019a2:	f001 ff28 	bl	80037f6 <HAL_I2CEx_ConfigDigitalFilter>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80019ac:	f000 f870 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000228 	.word	0x20000228
 80019b8:	40005400 	.word	0x40005400
 80019bc:	000186a0 	.word	0x000186a0

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <MX_GPIO_Init+0xc4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <MX_GPIO_Init+0xc4>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_GPIO_Init+0xc4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <MX_GPIO_Init+0xc4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <MX_GPIO_Init+0xc4>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_GPIO_Init+0xc4>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_GPIO_Init+0xc4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <MX_GPIO_Init+0xc4>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_GPIO_Init+0xc4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8 
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001a30:	4815      	ldr	r0, [pc, #84]	; (8001a88 <MX_GPIO_Init+0xc8>)
 8001a32:	f001 fa4b 	bl	8002ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4814      	ldr	r0, [pc, #80]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a3c:	f001 fa46 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB5 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8 
 8001a40:	f44f 734e 	mov.w	r3, #824	; 0x338
 8001a44:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <MX_GPIO_Init+0xc8>)
 8001a5a:	f001 f88d 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a76:	f001 f87f 	bl	8002b78 <HAL_GPIO_Init>

}
 8001a7a:	bf00      	nop
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40021000 	.word	0x40021000

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_ADC_MspInit+0x8c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12f      	bne.n	8001b72 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_ADC_MspInit+0x90>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_ADC_MspInit+0x90>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_ADC_MspInit+0x90>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_ADC_MspInit+0x90>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_ADC_MspInit+0x90>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_ADC_MspInit+0x90>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_ADC_MspInit+0x94>)
 8001b5e:	f001 f80b 	bl	8002b78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2012      	movs	r0, #18
 8001b68:	f000 ffcf 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b6c:	2012      	movs	r0, #18
 8001b6e:	f000 ffe8 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40012000 	.word	0x40012000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12b      	bne.n	8001c02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bca:	2312      	movs	r3, #18
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <HAL_I2C_MspInit+0x8c>)
 8001be2:	f000 ffc9 	bl	8002b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 f8ca 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <ADC_IRQHandler+0x10>)
 8001c7a:	f000 fac6 	bl	800220a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000027c 	.word	0x2000027c

08001c88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x50>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <_sbrk+0x16>
		heap_end = &end;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <_sbrk+0x50>)
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <_sbrk+0x54>)
 8001c9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <_sbrk+0x50>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <_sbrk+0x50>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	466a      	mov	r2, sp
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d907      	bls.n	8001cc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cb2:	f002 fa07 	bl	80040c4 <__errno>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	230c      	movs	r3, #12
 8001cba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e006      	b.n	8001cd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <_sbrk+0x50>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <_sbrk+0x50>)
 8001ccc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000214 	.word	0x20000214
 8001cdc:	200002d8 	.word	0x200002d8

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <SystemInit+0x28>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <SystemInit+0x28>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SystemInit+0x28>)
 8001cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d12:	e003      	b.n	8001d1c <LoopCopyDataInit>

08001d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d1a:	3104      	adds	r1, #4

08001d1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d24:	d3f6      	bcc.n	8001d14 <CopyDataInit>
  ldr  r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d28:	e002      	b.n	8001d30 <LoopFillZerobss>

08001d2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d2c:	f842 3b04 	str.w	r3, [r2], #4

08001d30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d34:	d3f9      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d36:	f7ff ffd3 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f002 f9c9 	bl	80040d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff fcc5 	bl	80016cc <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001d48:	08006470 	.word	0x08006470
  ldr  r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d50:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001d54:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001d58:	200002d4 	.word	0x200002d4

08001d5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <CAN1_RX0_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 feb3 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fe84 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fecb 	bl	8002b5e <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 fe93 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	20000018 	.word	0x20000018
 8001e00:	20000014 	.word	0x20000014

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000018 	.word	0x20000018
 8001e28:	200002cc 	.word	0x200002cc

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200002cc 	.word	0x200002cc

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_Delay+0x40>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000018 	.word	0x20000018

08001e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e033      	b.n	8001f06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fe22 	bl	8001af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ece:	f023 0302 	bic.w	r3, r3, #2
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fc34 	bl	8002748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef6:	e001      	b.n	8001efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Start+0x1a>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e0a5      	b.n	8002076 <HAL_ADC_Start+0x166>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d018      	beq.n	8001f72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_ADC_Start+0x174>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_ADC_Start+0x178>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0c9a      	lsrs	r2, r3, #18
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f9      	bne.n	8001f66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d179      	bne.n	8002074 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001faa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fbe:	d106      	bne.n	8001fce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f023 0206 	bic.w	r2, r3, #6
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_ADC_Start+0x17c>)
 8001fde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12a      	bne.n	800204c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_ADC_Start+0x180>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d015      	beq.n	800202c <HAL_ADC_Start+0x11c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_ADC_Start+0x184>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d105      	bne.n	8002016 <HAL_ADC_Start+0x106>
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_ADC_Start+0x17c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_ADC_Start+0x188>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d129      	bne.n	8002074 <HAL_ADC_Start+0x164>
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_ADC_Start+0x17c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d823      	bhi.n	8002074 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11c      	bne.n	8002074 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	e013      	b.n	8002074 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_ADC_Start+0x180>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10e      	bne.n	8002074 <HAL_ADC_Start+0x164>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002072:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000010 	.word	0x20000010
 8002088:	431bde83 	.word	0x431bde83
 800208c:	40012300 	.word	0x40012300
 8002090:	40012000 	.word	0x40012000
 8002094:	40012100 	.word	0x40012100
 8002098:	40012200 	.word	0x40012200

0800209c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Stop+0x16>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e021      	b.n	80020f6 <HAL_ADC_Stop+0x5a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d113      	bne.n	8002148 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	d10b      	bne.n	8002148 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e05c      	b.n	8002202 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002148:	f7ff fe70 	bl	8001e2c <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800214e:	e01a      	b.n	8002186 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d016      	beq.n	8002186 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_ADC_PollForConversion+0x6c>
 800215e:	f7ff fe65 	bl	8001e2c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d20b      	bcs.n	8002186 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0204 	orr.w	r2, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e03d      	b.n	8002202 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	d1dd      	bne.n	8002150 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0212 	mvn.w	r2, #18
 800219c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d123      	bne.n	8002200 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d11f      	bne.n	8002200 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b02      	cmp	r3, #2
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b20      	cmp	r3, #32
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d049      	beq.n	80022e0 <HAL_ADC_IRQHandler+0xd6>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d046      	beq.n	80022e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d12b      	bne.n	80022d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d127      	bne.n	80022d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002298:	2b00      	cmp	r3, #0
 800229a:	d119      	bne.n	80022d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0220 	bic.w	r2, r2, #32
 80022aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8e8 	bl	80024a6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 0212 	mvn.w	r2, #18
 80022de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d057      	beq.n	80023c2 <HAL_ADC_IRQHandler+0x1b8>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d054      	beq.n	80023c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d139      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002356:	2b00      	cmp	r3, #0
 8002358:	d12b      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002364:	2b00      	cmp	r3, #0
 8002366:	d124      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11d      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800238c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fac4 	bl	8002940 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 020c 	mvn.w	r2, #12
 80023c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d017      	beq.n	8002424 <HAL_ADC_IRQHandler+0x21a>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d014      	beq.n	8002424 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d10d      	bne.n	8002424 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f850 	bl	80024ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0201 	mvn.w	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b20      	cmp	r3, #32
 8002430:	bf0c      	ite	eq
 8002432:	2301      	moveq	r3, #1
 8002434:	2300      	movne	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d015      	beq.n	8002484 <HAL_ADC_IRQHandler+0x27a>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f043 0202 	orr.w	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0220 	mvn.w	r2, #32
 8002472:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f82a 	bl	80024ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0220 	mvn.w	r2, #32
 8002482:	601a      	str	r2, [r3, #0]
  }
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x1c>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e113      	b.n	8002728 <HAL_ADC_ConfigChannel+0x244>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b09      	cmp	r3, #9
 800250e:	d925      	bls.n	800255c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68d9      	ldr	r1, [r3, #12]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	3b1e      	subs	r3, #30
 8002526:	2207      	movs	r2, #7
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43da      	mvns	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68d9      	ldr	r1, [r3, #12]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	4618      	mov	r0, r3
 8002548:	4603      	mov	r3, r0
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4403      	add	r3, r0
 800254e:	3b1e      	subs	r3, #30
 8002550:	409a      	lsls	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	e022      	b.n	80025a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	2207      	movs	r2, #7
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	400a      	ands	r2, r1
 800257e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6919      	ldr	r1, [r3, #16]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	4603      	mov	r3, r0
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4403      	add	r3, r0
 8002598:	409a      	lsls	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d824      	bhi.n	80025f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b05      	subs	r3, #5
 80025bc:	221f      	movs	r2, #31
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	400a      	ands	r2, r1
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	3b05      	subs	r3, #5
 80025e6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
 80025f2:	e04c      	b.n	800268e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	d824      	bhi.n	8002646 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b23      	subs	r3, #35	; 0x23
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43da      	mvns	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	400a      	ands	r2, r1
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b23      	subs	r3, #35	; 0x23
 8002638:	fa00 f203 	lsl.w	r2, r0, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
 8002644:	e023      	b.n	800268e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3b41      	subs	r3, #65	; 0x41
 8002658:	221f      	movs	r2, #31
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	400a      	ands	r2, r1
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	3b41      	subs	r3, #65	; 0x41
 8002682:	fa00 f203 	lsl.w	r2, r0, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_ADC_ConfigChannel+0x250>)
 8002690:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a28      	ldr	r2, [pc, #160]	; (8002738 <HAL_ADC_ConfigChannel+0x254>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d10f      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1d8>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d10b      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_ADC_ConfigChannel+0x254>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12b      	bne.n	800271e <HAL_ADC_ConfigChannel+0x23a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_ADC_ConfigChannel+0x258>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x1f4>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b11      	cmp	r3, #17
 80026d6:	d122      	bne.n	800271e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <HAL_ADC_ConfigChannel+0x258>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d111      	bne.n	800271e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_ADC_ConfigChannel+0x25c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x260>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9a      	lsrs	r2, r3, #18
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002710:	e002      	b.n	8002718 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3b01      	subs	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f9      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40012300 	.word	0x40012300
 8002738:	40012000 	.word	0x40012000
 800273c:	10000012 	.word	0x10000012
 8002740:	20000010 	.word	0x20000010
 8002744:	431bde83 	.word	0x431bde83

08002748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002750:	4b79      	ldr	r3, [pc, #484]	; (8002938 <ADC_Init+0x1f0>)
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800277c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	4a58      	ldr	r2, [pc, #352]	; (800293c <ADC_Init+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e00f      	b.n	8002846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0202 	bic.w	r2, r2, #2
 8002854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7e1b      	ldrb	r3, [r3, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	3b01      	subs	r3, #1
 80028a0:	035a      	lsls	r2, r3, #13
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e007      	b.n	80028bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	051a      	lsls	r2, r3, #20
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fe:	025a      	lsls	r2, r3, #9
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	029a      	lsls	r2, r3, #10
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40012300 	.word	0x40012300
 800293c:	0f000001 	.word	0x0f000001

08002940 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff29 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff3e 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff8e 	bl	8002a48 <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5d 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff31 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffa2 	bl	8002ab0 <SysTick_Config>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e177      	b.n	8002e84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8166 	bne.w	8002e7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_GPIO_Init+0x5a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d007      	beq.n	8002bd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bc6:	2b11      	cmp	r3, #17
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b12      	cmp	r3, #18
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0xfc>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80c0 	beq.w	8002e7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_GPIO_Init+0x320>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a64      	ldr	r2, [pc, #400]	; (8002e98 <HAL_GPIO_Init+0x320>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <HAL_GPIO_Init+0x320>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a60      	ldr	r2, [pc, #384]	; (8002e9c <HAL_GPIO_Init+0x324>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <HAL_GPIO_Init+0x328>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d037      	beq.n	8002db6 <HAL_GPIO_Init+0x23e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a56      	ldr	r2, [pc, #344]	; (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d031      	beq.n	8002db2 <HAL_GPIO_Init+0x23a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a55      	ldr	r2, [pc, #340]	; (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <HAL_GPIO_Init+0x236>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a54      	ldr	r2, [pc, #336]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x232>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a53      	ldr	r2, [pc, #332]	; (8002eb0 <HAL_GPIO_Init+0x338>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x22e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x33c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x22a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <HAL_GPIO_Init+0x340>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a50      	ldr	r2, [pc, #320]	; (8002ebc <HAL_GPIO_Init+0x344>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4f      	ldr	r2, [pc, #316]	; (8002ec0 <HAL_GPIO_Init+0x348>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4e      	ldr	r2, [pc, #312]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x21a>
 8002d8e:	2309      	movs	r3, #9
 8002d90:	e012      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d92:	230a      	movs	r3, #10
 8002d94:	e010      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d96:	2308      	movs	r3, #8
 8002d98:	e00e      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00c      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00a      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002da2:	2305      	movs	r3, #5
 8002da4:	e008      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002db6:	2300      	movs	r3, #0
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f002 0203 	and.w	r2, r2, #3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc8:	4934      	ldr	r1, [pc, #208]	; (8002e9c <HAL_GPIO_Init+0x324>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfa:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e24:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	f67f ae84 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3724      	adds	r7, #36	; 0x24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40021800 	.word	0x40021800
 8002ebc:	40021c00 	.word	0x40021c00
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40022400 	.word	0x40022400
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e11f      	b.n	8003152 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fe2e 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f64:	f001 f89a 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a7b      	ldr	r2, [pc, #492]	; (800315c <HAL_I2C_Init+0x25c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d807      	bhi.n	8002f84 <HAL_I2C_Init+0x84>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a7a      	ldr	r2, [pc, #488]	; (8003160 <HAL_I2C_Init+0x260>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e006      	b.n	8002f92 <HAL_I2C_Init+0x92>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a77      	ldr	r2, [pc, #476]	; (8003164 <HAL_I2C_Init+0x264>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0db      	b.n	8003152 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a72      	ldr	r2, [pc, #456]	; (8003168 <HAL_I2C_Init+0x268>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a64      	ldr	r2, [pc, #400]	; (800315c <HAL_I2C_Init+0x25c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <HAL_I2C_Init+0xd4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e009      	b.n	8002fe8 <HAL_I2C_Init+0xe8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_I2C_Init+0x26c>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4956      	ldr	r1, [pc, #344]	; (800315c <HAL_I2C_Init+0x25c>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d80d      	bhi.n	8003024 <HAL_I2C_Init+0x124>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e59      	subs	r1, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b04      	cmp	r3, #4
 800301e:	bf38      	it	cc
 8003020:	2304      	movcc	r3, #4
 8003022:	e04f      	b.n	80030c4 <HAL_I2C_Init+0x1c4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d111      	bne.n	8003050 <HAL_I2C_Init+0x150>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1e58      	subs	r0, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e012      	b.n	8003076 <HAL_I2C_Init+0x176>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	0099      	lsls	r1, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Init+0x17e>
 800307a:	2301      	movs	r3, #1
 800307c:	e022      	b.n	80030c4 <HAL_I2C_Init+0x1c4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10e      	bne.n	80030a4 <HAL_I2C_Init+0x1a4>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1e58      	subs	r0, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	440b      	add	r3, r1
 8003094:	fbb0 f3f3 	udiv	r3, r0, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Init+0x1c4>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	0099      	lsls	r1, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	6809      	ldr	r1, [r1, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6911      	ldr	r1, [r2, #16]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68d2      	ldr	r2, [r2, #12]
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	430b      	orrs	r3, r1
 8003106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	000186a0 	.word	0x000186a0
 8003160:	001e847f 	.word	0x001e847f
 8003164:	003d08ff 	.word	0x003d08ff
 8003168:	431bde83 	.word	0x431bde83
 800316c:	10624dd3 	.word	0x10624dd3

08003170 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	460b      	mov	r3, r1
 800317e:	817b      	strh	r3, [r7, #10]
 8003180:	4613      	mov	r3, r2
 8003182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7fe fe52 	bl	8001e2c <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 80e0 	bne.w	8003358 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	4970      	ldr	r1, [pc, #448]	; (8003364 <HAL_I2C_Master_Transmit+0x1f4>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f964 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0d3      	b.n	800335a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2C_Master_Transmit+0x50>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0cc      	b.n	800335a <HAL_I2C_Master_Transmit+0x1ea>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d007      	beq.n	80031e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2221      	movs	r2, #33	; 0x21
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2210      	movs	r2, #16
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a50      	ldr	r2, [pc, #320]	; (8003368 <HAL_I2C_Master_Transmit+0x1f8>)
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003228:	8979      	ldrh	r1, [r7, #10]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f89c 	bl	800336c <I2C_MasterRequestWrite>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e08d      	b.n	800335a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003254:	e066      	b.n	8003324 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	6a39      	ldr	r1, [r7, #32]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f9de 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b04      	cmp	r3, #4
 800326c:	d107      	bne.n	800327e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06b      	b.n	800335a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d11b      	bne.n	80032f8 <HAL_I2C_Master_Transmit+0x188>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d017      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	6a39      	ldr	r1, [r7, #32]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f9ce 	bl	800369e <I2C_WaitOnBTFFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2b04      	cmp	r3, #4
 800330e:	d107      	bne.n	8003320 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e01a      	b.n	800335a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d194      	bne.n	8003256 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	00100002 	.word	0x00100002
 8003368:	ffff0000 	.word	0xffff0000

0800336c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	460b      	mov	r3, r1
 800337a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d006      	beq.n	8003396 <I2C_MasterRequestWrite+0x2a>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d003      	beq.n	8003396 <I2C_MasterRequestWrite+0x2a>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003394:	d108      	bne.n	80033a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e00b      	b.n	80033c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	2b12      	cmp	r3, #18
 80033ae:	d107      	bne.n	80033c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f84f 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e6:	d103      	bne.n	80033f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e035      	b.n	8003460 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fc:	d108      	bne.n	8003410 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	e01b      	b.n	8003448 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	11db      	asrs	r3, r3, #7
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0306 	and.w	r3, r3, #6
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f063 030f 	orn	r3, r3, #15
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <I2C_MasterRequestWrite+0xfc>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f875 	bl	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e010      	b.n	8003460 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <I2C_MasterRequestWrite+0x100>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f865 	bl	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	00010008 	.word	0x00010008
 800346c:	00010002 	.word	0x00010002

08003470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	e025      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d021      	beq.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fccf 	bl	8001e2c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d116      	bne.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e023      	b.n	8003516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10d      	bne.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	e00c      	b.n	800350e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d0b6      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800352c:	e051      	b.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d123      	bne.n	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e046      	b.n	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d021      	beq.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe fc4d 	bl	8001e2c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e020      	b.n	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e00b      	b.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d18d      	bne.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003628:	e02d      	b.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f878 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e02d      	b.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d021      	beq.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe fbf3 	bl	8001e2c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d1ca      	bne.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036aa:	e02d      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f837 	bl	8003720 <I2C_IsAcknowledgeFailed>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e02d      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d021      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fbb2 	bl	8001e2c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d1ca      	bne.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d11b      	bne.n	8003770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b20      	cmp	r3, #32
 8003792:	d129      	bne.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0210 	bic.w	r2, r2, #16
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	d12a      	bne.n	8003866 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003830:	89fb      	ldrh	r3, [r7, #14]
 8003832:	f023 030f 	bic.w	r3, r3, #15
 8003836:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b29a      	uxth	r2, r3
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	4313      	orrs	r3, r2
 8003840:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	89fa      	ldrh	r2, [r7, #14]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e25b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003892:	4ba3      	ldr	r3, [pc, #652]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d112      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038aa:	4b9d      	ldr	r3, [pc, #628]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e236      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a90      	ldr	r2, [pc, #576]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a8a      	ldr	r2, [pc, #552]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a87      	ldr	r2, [pc, #540]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a83      	ldr	r2, [pc, #524]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fa7e 	bl	8001e2c <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe fa7a 	bl	8001e2c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1fb      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fa6a 	bl	8001e2c <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fe fa66 	bl	8001e2c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1e7      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1bb      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b56      	ldr	r3, [pc, #344]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4952      	ldr	r1, [pc, #328]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe fa1f 	bl	8001e2c <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fe fa1b 	bl	8001e2c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e19c      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4940      	ldr	r1, [pc, #256]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f9fe 	bl	8001e2c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe f9fa 	bl	8001e2c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e17b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe f9de 	bl	8001e2c <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe f9da 	bl	8001e2c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e15b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
 8003a92:	e015      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe f9c7 	bl	8001e2c <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fe f9c3 	bl	8001e2c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e144      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a0 	beq.w	8003c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe f989 	bl	8001e2c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e011      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
 8003b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fe f97c 	bl	8001e2c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0fd      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCC_OscConfig+0x4d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	e01c      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b77      	ldr	r3, [pc, #476]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	4b74      	ldr	r3, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b86:	4b71      	ldr	r3, [pc, #452]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a70      	ldr	r2, [pc, #448]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a6d      	ldr	r2, [pc, #436]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f941 	bl	8001e2c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe f93d 	bl	8001e2c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0bc      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCC_OscConfig+0x33a>
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe f92b 	bl	8001e2c <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe f927 	bl	8001e2c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0a6      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ee      	bne.n	8003bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b52      	ldr	r3, [pc, #328]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8092 	beq.w	8003d3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d05c      	beq.n	8003cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d141      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe f8fb 	bl	8001e2c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe f8f7 	bl	8001e2c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e078      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4c:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	4933      	ldr	r1, [pc, #204]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c82:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe f8d0 	bl	8001e2c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fe f8cc 	bl	8001e2c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04d      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x41c>
 8003cae:	e045      	b.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f8b9 	bl	8001e2c <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe f8b5 	bl	8001e2c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e036      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x44a>
 8003cdc:	e02e      	b.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e029      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d115      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	42470060 	.word	0x42470060

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fd fff2 	bl	8001e2c <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fd ffee 	bl	8001e2c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f821 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ede:	4601      	mov	r1, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd ff52 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	080061e8 	.word	0x080061e8
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	20000014 	.word	0x20000014

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f36:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d007      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x32>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d008      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x38>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 808d 	bne.w	8004066 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	; (800407c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f4e:	60bb      	str	r3, [r7, #8]
       break;
 8003f50:	e08c      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	e089      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f58:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f62:	4b45      	ldr	r3, [pc, #276]	; (8004078 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d023      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b42      	ldr	r3, [pc, #264]	; (8004078 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea03 0501 	and.w	r5, r3, r1
 8003f84:	ea04 0602 	and.w	r6, r4, r2
 8003f88:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f8a:	fb02 f106 	mul.w	r1, r2, r6
 8003f8e:	2200      	movs	r2, #0
 8003f90:	fb02 f205 	mul.w	r2, r2, r5
 8003f94:	440a      	add	r2, r1
 8003f96:	493a      	ldr	r1, [pc, #232]	; (8004080 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f98:	fba5 0101 	umull	r0, r1, r5, r1
 8003f9c:	1853      	adds	r3, r2, r1
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f04f 0400 	mov.w	r4, #0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4623      	mov	r3, r4
 8003faa:	f7fc fe5d 	bl	8000c68 <__aeabi_uldivmod>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e049      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	ea03 0501 	and.w	r5, r3, r1
 8003fcc:	ea04 0602 	and.w	r6, r4, r2
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4632      	mov	r2, r6
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f04f 0400 	mov.w	r4, #0
 8003fdc:	0154      	lsls	r4, r2, #5
 8003fde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fe2:	014b      	lsls	r3, r1, #5
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	1b49      	subs	r1, r1, r5
 8003fea:	eb62 0206 	sbc.w	r2, r2, r6
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f04f 0400 	mov.w	r4, #0
 8003ff6:	0194      	lsls	r4, r2, #6
 8003ff8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ffc:	018b      	lsls	r3, r1, #6
 8003ffe:	1a5b      	subs	r3, r3, r1
 8004000:	eb64 0402 	sbc.w	r4, r4, r2
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	00e2      	lsls	r2, r4, #3
 800400e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004012:	00d9      	lsls	r1, r3, #3
 8004014:	460b      	mov	r3, r1
 8004016:	4614      	mov	r4, r2
 8004018:	195b      	adds	r3, r3, r5
 800401a:	eb44 0406 	adc.w	r4, r4, r6
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	02a2      	lsls	r2, r4, #10
 8004028:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800402c:	0299      	lsls	r1, r3, #10
 800402e:	460b      	mov	r3, r1
 8004030:	4614      	mov	r4, r2
 8004032:	4618      	mov	r0, r3
 8004034:	4621      	mov	r1, r4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f04f 0400 	mov.w	r4, #0
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	f7fc fe12 	bl	8000c68 <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_GetSysClockFreq+0x158>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	3301      	adds	r3, #1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	60bb      	str	r3, [r7, #8]
      break;
 8004064:	e002      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004068:	60bb      	str	r3, [r7, #8]
      break;
 800406a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406c:	68bb      	ldr	r3, [r7, #8]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800
 800407c:	00f42400 	.word	0x00f42400
 8004080:	017d7840 	.word	0x017d7840

08004084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_RCC_GetHCLKFreq+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000010 	.word	0x20000010

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a0:	f7ff fff0 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0a9b      	lsrs	r3, r3, #10
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	080061f8 	.word	0x080061f8

080040c4 <__errno>:
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <__errno+0x8>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	2000001c 	.word	0x2000001c

080040d0 <__libc_init_array>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4e0d      	ldr	r6, [pc, #52]	; (8004108 <__libc_init_array+0x38>)
 80040d4:	4c0d      	ldr	r4, [pc, #52]	; (800410c <__libc_init_array+0x3c>)
 80040d6:	1ba4      	subs	r4, r4, r6
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	2500      	movs	r5, #0
 80040dc:	42a5      	cmp	r5, r4
 80040de:	d109      	bne.n	80040f4 <__libc_init_array+0x24>
 80040e0:	4e0b      	ldr	r6, [pc, #44]	; (8004110 <__libc_init_array+0x40>)
 80040e2:	4c0c      	ldr	r4, [pc, #48]	; (8004114 <__libc_init_array+0x44>)
 80040e4:	f002 f85c 	bl	80061a0 <_init>
 80040e8:	1ba4      	subs	r4, r4, r6
 80040ea:	10a4      	asrs	r4, r4, #2
 80040ec:	2500      	movs	r5, #0
 80040ee:	42a5      	cmp	r5, r4
 80040f0:	d105      	bne.n	80040fe <__libc_init_array+0x2e>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f8:	4798      	blx	r3
 80040fa:	3501      	adds	r5, #1
 80040fc:	e7ee      	b.n	80040dc <__libc_init_array+0xc>
 80040fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004102:	4798      	blx	r3
 8004104:	3501      	adds	r5, #1
 8004106:	e7f2      	b.n	80040ee <__libc_init_array+0x1e>
 8004108:	08006468 	.word	0x08006468
 800410c:	08006468 	.word	0x08006468
 8004110:	08006468 	.word	0x08006468
 8004114:	0800646c 	.word	0x0800646c

08004118 <memset>:
 8004118:	4402      	add	r2, r0
 800411a:	4603      	mov	r3, r0
 800411c:	4293      	cmp	r3, r2
 800411e:	d100      	bne.n	8004122 <memset+0xa>
 8004120:	4770      	bx	lr
 8004122:	f803 1b01 	strb.w	r1, [r3], #1
 8004126:	e7f9      	b.n	800411c <memset+0x4>

08004128 <__cvt>:
 8004128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	ec55 4b10 	vmov	r4, r5, d0
 8004130:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004132:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004136:	2d00      	cmp	r5, #0
 8004138:	460e      	mov	r6, r1
 800413a:	4691      	mov	r9, r2
 800413c:	4619      	mov	r1, r3
 800413e:	bfb8      	it	lt
 8004140:	4622      	movlt	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	f027 0720 	bic.w	r7, r7, #32
 8004148:	bfbb      	ittet	lt
 800414a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800414e:	461d      	movlt	r5, r3
 8004150:	2300      	movge	r3, #0
 8004152:	232d      	movlt	r3, #45	; 0x2d
 8004154:	bfb8      	it	lt
 8004156:	4614      	movlt	r4, r2
 8004158:	2f46      	cmp	r7, #70	; 0x46
 800415a:	700b      	strb	r3, [r1, #0]
 800415c:	d004      	beq.n	8004168 <__cvt+0x40>
 800415e:	2f45      	cmp	r7, #69	; 0x45
 8004160:	d100      	bne.n	8004164 <__cvt+0x3c>
 8004162:	3601      	adds	r6, #1
 8004164:	2102      	movs	r1, #2
 8004166:	e000      	b.n	800416a <__cvt+0x42>
 8004168:	2103      	movs	r1, #3
 800416a:	ab03      	add	r3, sp, #12
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	ab02      	add	r3, sp, #8
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4632      	mov	r2, r6
 8004174:	4653      	mov	r3, sl
 8004176:	ec45 4b10 	vmov	d0, r4, r5
 800417a:	f000 fcdd 	bl	8004b38 <_dtoa_r>
 800417e:	2f47      	cmp	r7, #71	; 0x47
 8004180:	4680      	mov	r8, r0
 8004182:	d102      	bne.n	800418a <__cvt+0x62>
 8004184:	f019 0f01 	tst.w	r9, #1
 8004188:	d026      	beq.n	80041d8 <__cvt+0xb0>
 800418a:	2f46      	cmp	r7, #70	; 0x46
 800418c:	eb08 0906 	add.w	r9, r8, r6
 8004190:	d111      	bne.n	80041b6 <__cvt+0x8e>
 8004192:	f898 3000 	ldrb.w	r3, [r8]
 8004196:	2b30      	cmp	r3, #48	; 0x30
 8004198:	d10a      	bne.n	80041b0 <__cvt+0x88>
 800419a:	2200      	movs	r2, #0
 800419c:	2300      	movs	r3, #0
 800419e:	4620      	mov	r0, r4
 80041a0:	4629      	mov	r1, r5
 80041a2:	f7fc fca1 	bl	8000ae8 <__aeabi_dcmpeq>
 80041a6:	b918      	cbnz	r0, 80041b0 <__cvt+0x88>
 80041a8:	f1c6 0601 	rsb	r6, r6, #1
 80041ac:	f8ca 6000 	str.w	r6, [sl]
 80041b0:	f8da 3000 	ldr.w	r3, [sl]
 80041b4:	4499      	add	r9, r3
 80041b6:	2200      	movs	r2, #0
 80041b8:	2300      	movs	r3, #0
 80041ba:	4620      	mov	r0, r4
 80041bc:	4629      	mov	r1, r5
 80041be:	f7fc fc93 	bl	8000ae8 <__aeabi_dcmpeq>
 80041c2:	b938      	cbnz	r0, 80041d4 <__cvt+0xac>
 80041c4:	2230      	movs	r2, #48	; 0x30
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	454b      	cmp	r3, r9
 80041ca:	d205      	bcs.n	80041d8 <__cvt+0xb0>
 80041cc:	1c59      	adds	r1, r3, #1
 80041ce:	9103      	str	r1, [sp, #12]
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	e7f8      	b.n	80041c6 <__cvt+0x9e>
 80041d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041dc:	eba3 0308 	sub.w	r3, r3, r8
 80041e0:	4640      	mov	r0, r8
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	b004      	add	sp, #16
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080041ea <__exponent>:
 80041ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ec:	2900      	cmp	r1, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	bfba      	itte	lt
 80041f2:	4249      	neglt	r1, r1
 80041f4:	232d      	movlt	r3, #45	; 0x2d
 80041f6:	232b      	movge	r3, #43	; 0x2b
 80041f8:	2909      	cmp	r1, #9
 80041fa:	f804 2b02 	strb.w	r2, [r4], #2
 80041fe:	7043      	strb	r3, [r0, #1]
 8004200:	dd20      	ble.n	8004244 <__exponent+0x5a>
 8004202:	f10d 0307 	add.w	r3, sp, #7
 8004206:	461f      	mov	r7, r3
 8004208:	260a      	movs	r6, #10
 800420a:	fb91 f5f6 	sdiv	r5, r1, r6
 800420e:	fb06 1115 	mls	r1, r6, r5, r1
 8004212:	3130      	adds	r1, #48	; 0x30
 8004214:	2d09      	cmp	r5, #9
 8004216:	f803 1c01 	strb.w	r1, [r3, #-1]
 800421a:	f103 32ff 	add.w	r2, r3, #4294967295
 800421e:	4629      	mov	r1, r5
 8004220:	dc09      	bgt.n	8004236 <__exponent+0x4c>
 8004222:	3130      	adds	r1, #48	; 0x30
 8004224:	3b02      	subs	r3, #2
 8004226:	f802 1c01 	strb.w	r1, [r2, #-1]
 800422a:	42bb      	cmp	r3, r7
 800422c:	4622      	mov	r2, r4
 800422e:	d304      	bcc.n	800423a <__exponent+0x50>
 8004230:	1a10      	subs	r0, r2, r0
 8004232:	b003      	add	sp, #12
 8004234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004236:	4613      	mov	r3, r2
 8004238:	e7e7      	b.n	800420a <__exponent+0x20>
 800423a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423e:	f804 2b01 	strb.w	r2, [r4], #1
 8004242:	e7f2      	b.n	800422a <__exponent+0x40>
 8004244:	2330      	movs	r3, #48	; 0x30
 8004246:	4419      	add	r1, r3
 8004248:	7083      	strb	r3, [r0, #2]
 800424a:	1d02      	adds	r2, r0, #4
 800424c:	70c1      	strb	r1, [r0, #3]
 800424e:	e7ef      	b.n	8004230 <__exponent+0x46>

08004250 <_printf_float>:
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	b08d      	sub	sp, #52	; 0x34
 8004256:	460c      	mov	r4, r1
 8004258:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800425c:	4616      	mov	r6, r2
 800425e:	461f      	mov	r7, r3
 8004260:	4605      	mov	r5, r0
 8004262:	f001 fa21 	bl	80056a8 <_localeconv_r>
 8004266:	6803      	ldr	r3, [r0, #0]
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fb ffc0 	bl	80001f0 <strlen>
 8004270:	2300      	movs	r3, #0
 8004272:	930a      	str	r3, [sp, #40]	; 0x28
 8004274:	f8d8 3000 	ldr.w	r3, [r8]
 8004278:	9005      	str	r0, [sp, #20]
 800427a:	3307      	adds	r3, #7
 800427c:	f023 0307 	bic.w	r3, r3, #7
 8004280:	f103 0208 	add.w	r2, r3, #8
 8004284:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004288:	f8d4 b000 	ldr.w	fp, [r4]
 800428c:	f8c8 2000 	str.w	r2, [r8]
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004298:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800429c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042a0:	9307      	str	r3, [sp, #28]
 80042a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	4ba7      	ldr	r3, [pc, #668]	; (8004548 <_printf_float+0x2f8>)
 80042ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042b0:	f7fc fc4c 	bl	8000b4c <__aeabi_dcmpun>
 80042b4:	bb70      	cbnz	r0, 8004314 <_printf_float+0xc4>
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ba:	4ba3      	ldr	r3, [pc, #652]	; (8004548 <_printf_float+0x2f8>)
 80042bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c0:	f7fc fc26 	bl	8000b10 <__aeabi_dcmple>
 80042c4:	bb30      	cbnz	r0, 8004314 <_printf_float+0xc4>
 80042c6:	2200      	movs	r2, #0
 80042c8:	2300      	movs	r3, #0
 80042ca:	4640      	mov	r0, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	f7fc fc15 	bl	8000afc <__aeabi_dcmplt>
 80042d2:	b110      	cbz	r0, 80042da <_printf_float+0x8a>
 80042d4:	232d      	movs	r3, #45	; 0x2d
 80042d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042da:	4a9c      	ldr	r2, [pc, #624]	; (800454c <_printf_float+0x2fc>)
 80042dc:	4b9c      	ldr	r3, [pc, #624]	; (8004550 <_printf_float+0x300>)
 80042de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80042e2:	bf8c      	ite	hi
 80042e4:	4690      	movhi	r8, r2
 80042e6:	4698      	movls	r8, r3
 80042e8:	2303      	movs	r3, #3
 80042ea:	f02b 0204 	bic.w	r2, fp, #4
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	6022      	str	r2, [r4, #0]
 80042f2:	f04f 0900 	mov.w	r9, #0
 80042f6:	9700      	str	r7, [sp, #0]
 80042f8:	4633      	mov	r3, r6
 80042fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80042fc:	4621      	mov	r1, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 f9e6 	bl	80046d0 <_printf_common>
 8004304:	3001      	adds	r0, #1
 8004306:	f040 808d 	bne.w	8004424 <_printf_float+0x1d4>
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	b00d      	add	sp, #52	; 0x34
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	4640      	mov	r0, r8
 800431a:	4649      	mov	r1, r9
 800431c:	f7fc fc16 	bl	8000b4c <__aeabi_dcmpun>
 8004320:	b110      	cbz	r0, 8004328 <_printf_float+0xd8>
 8004322:	4a8c      	ldr	r2, [pc, #560]	; (8004554 <_printf_float+0x304>)
 8004324:	4b8c      	ldr	r3, [pc, #560]	; (8004558 <_printf_float+0x308>)
 8004326:	e7da      	b.n	80042de <_printf_float+0x8e>
 8004328:	6861      	ldr	r1, [r4, #4]
 800432a:	1c4b      	adds	r3, r1, #1
 800432c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004330:	a80a      	add	r0, sp, #40	; 0x28
 8004332:	d13e      	bne.n	80043b2 <_printf_float+0x162>
 8004334:	2306      	movs	r3, #6
 8004336:	6063      	str	r3, [r4, #4]
 8004338:	2300      	movs	r3, #0
 800433a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800433e:	ab09      	add	r3, sp, #36	; 0x24
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	ec49 8b10 	vmov	d0, r8, r9
 8004346:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800434a:	6022      	str	r2, [r4, #0]
 800434c:	f8cd a004 	str.w	sl, [sp, #4]
 8004350:	6861      	ldr	r1, [r4, #4]
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff fee8 	bl	8004128 <__cvt>
 8004358:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800435c:	2b47      	cmp	r3, #71	; 0x47
 800435e:	4680      	mov	r8, r0
 8004360:	d109      	bne.n	8004376 <_printf_float+0x126>
 8004362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004364:	1cd8      	adds	r0, r3, #3
 8004366:	db02      	blt.n	800436e <_printf_float+0x11e>
 8004368:	6862      	ldr	r2, [r4, #4]
 800436a:	4293      	cmp	r3, r2
 800436c:	dd47      	ble.n	80043fe <_printf_float+0x1ae>
 800436e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004372:	fa5f fa8a 	uxtb.w	sl, sl
 8004376:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800437a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800437c:	d824      	bhi.n	80043c8 <_printf_float+0x178>
 800437e:	3901      	subs	r1, #1
 8004380:	4652      	mov	r2, sl
 8004382:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004386:	9109      	str	r1, [sp, #36]	; 0x24
 8004388:	f7ff ff2f 	bl	80041ea <__exponent>
 800438c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800438e:	1813      	adds	r3, r2, r0
 8004390:	2a01      	cmp	r2, #1
 8004392:	4681      	mov	r9, r0
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	dc02      	bgt.n	800439e <_printf_float+0x14e>
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	07d1      	lsls	r1, r2, #31
 800439c:	d501      	bpl.n	80043a2 <_printf_float+0x152>
 800439e:	3301      	adds	r3, #1
 80043a0:	6123      	str	r3, [r4, #16]
 80043a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0a5      	beq.n	80042f6 <_printf_float+0xa6>
 80043aa:	232d      	movs	r3, #45	; 0x2d
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b0:	e7a1      	b.n	80042f6 <_printf_float+0xa6>
 80043b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80043b6:	f000 8177 	beq.w	80046a8 <_printf_float+0x458>
 80043ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80043be:	d1bb      	bne.n	8004338 <_printf_float+0xe8>
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d1b9      	bne.n	8004338 <_printf_float+0xe8>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e7b6      	b.n	8004336 <_printf_float+0xe6>
 80043c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80043cc:	d119      	bne.n	8004402 <_printf_float+0x1b2>
 80043ce:	2900      	cmp	r1, #0
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	dd0c      	ble.n	80043ee <_printf_float+0x19e>
 80043d4:	6121      	str	r1, [r4, #16]
 80043d6:	b913      	cbnz	r3, 80043de <_printf_float+0x18e>
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	07d2      	lsls	r2, r2, #31
 80043dc:	d502      	bpl.n	80043e4 <_printf_float+0x194>
 80043de:	3301      	adds	r3, #1
 80043e0:	440b      	add	r3, r1
 80043e2:	6123      	str	r3, [r4, #16]
 80043e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80043e8:	f04f 0900 	mov.w	r9, #0
 80043ec:	e7d9      	b.n	80043a2 <_printf_float+0x152>
 80043ee:	b913      	cbnz	r3, 80043f6 <_printf_float+0x1a6>
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	07d0      	lsls	r0, r2, #31
 80043f4:	d501      	bpl.n	80043fa <_printf_float+0x1aa>
 80043f6:	3302      	adds	r3, #2
 80043f8:	e7f3      	b.n	80043e2 <_printf_float+0x192>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e7f1      	b.n	80043e2 <_printf_float+0x192>
 80043fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004402:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004406:	4293      	cmp	r3, r2
 8004408:	db05      	blt.n	8004416 <_printf_float+0x1c6>
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	07d1      	lsls	r1, r2, #31
 8004410:	d5e8      	bpl.n	80043e4 <_printf_float+0x194>
 8004412:	3301      	adds	r3, #1
 8004414:	e7e5      	b.n	80043e2 <_printf_float+0x192>
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfd4      	ite	le
 800441a:	f1c3 0302 	rsble	r3, r3, #2
 800441e:	2301      	movgt	r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	e7de      	b.n	80043e2 <_printf_float+0x192>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	055a      	lsls	r2, r3, #21
 8004428:	d407      	bmi.n	800443a <_printf_float+0x1ea>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	4642      	mov	r2, r8
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	d12b      	bne.n	8004490 <_printf_float+0x240>
 8004438:	e767      	b.n	800430a <_printf_float+0xba>
 800443a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800443e:	f240 80dc 	bls.w	80045fa <_printf_float+0x3aa>
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800444a:	f7fc fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800444e:	2800      	cmp	r0, #0
 8004450:	d033      	beq.n	80044ba <_printf_float+0x26a>
 8004452:	2301      	movs	r3, #1
 8004454:	4a41      	ldr	r2, [pc, #260]	; (800455c <_printf_float+0x30c>)
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	f43f af54 	beq.w	800430a <_printf_float+0xba>
 8004462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004466:	429a      	cmp	r2, r3
 8004468:	db02      	blt.n	8004470 <_printf_float+0x220>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	07d8      	lsls	r0, r3, #31
 800446e:	d50f      	bpl.n	8004490 <_printf_float+0x240>
 8004470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004474:	4631      	mov	r1, r6
 8004476:	4628      	mov	r0, r5
 8004478:	47b8      	blx	r7
 800447a:	3001      	adds	r0, #1
 800447c:	f43f af45 	beq.w	800430a <_printf_float+0xba>
 8004480:	f04f 0800 	mov.w	r8, #0
 8004484:	f104 091a 	add.w	r9, r4, #26
 8004488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	4543      	cmp	r3, r8
 800448e:	dc09      	bgt.n	80044a4 <_printf_float+0x254>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	079b      	lsls	r3, r3, #30
 8004494:	f100 8103 	bmi.w	800469e <_printf_float+0x44e>
 8004498:	68e0      	ldr	r0, [r4, #12]
 800449a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800449c:	4298      	cmp	r0, r3
 800449e:	bfb8      	it	lt
 80044a0:	4618      	movlt	r0, r3
 80044a2:	e734      	b.n	800430e <_printf_float+0xbe>
 80044a4:	2301      	movs	r3, #1
 80044a6:	464a      	mov	r2, r9
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f af2b 	beq.w	800430a <_printf_float+0xba>
 80044b4:	f108 0801 	add.w	r8, r8, #1
 80044b8:	e7e6      	b.n	8004488 <_printf_float+0x238>
 80044ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	dc2b      	bgt.n	8004518 <_printf_float+0x2c8>
 80044c0:	2301      	movs	r3, #1
 80044c2:	4a26      	ldr	r2, [pc, #152]	; (800455c <_printf_float+0x30c>)
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f af1d 	beq.w	800430a <_printf_float+0xba>
 80044d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d2:	b923      	cbnz	r3, 80044de <_printf_float+0x28e>
 80044d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d6:	b913      	cbnz	r3, 80044de <_printf_float+0x28e>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	07d9      	lsls	r1, r3, #31
 80044dc:	d5d8      	bpl.n	8004490 <_printf_float+0x240>
 80044de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044e2:	4631      	mov	r1, r6
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b8      	blx	r7
 80044e8:	3001      	adds	r0, #1
 80044ea:	f43f af0e 	beq.w	800430a <_printf_float+0xba>
 80044ee:	f04f 0900 	mov.w	r9, #0
 80044f2:	f104 0a1a 	add.w	sl, r4, #26
 80044f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f8:	425b      	negs	r3, r3
 80044fa:	454b      	cmp	r3, r9
 80044fc:	dc01      	bgt.n	8004502 <_printf_float+0x2b2>
 80044fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004500:	e794      	b.n	800442c <_printf_float+0x1dc>
 8004502:	2301      	movs	r3, #1
 8004504:	4652      	mov	r2, sl
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f aefc 	beq.w	800430a <_printf_float+0xba>
 8004512:	f109 0901 	add.w	r9, r9, #1
 8004516:	e7ee      	b.n	80044f6 <_printf_float+0x2a6>
 8004518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800451a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800451c:	429a      	cmp	r2, r3
 800451e:	bfa8      	it	ge
 8004520:	461a      	movge	r2, r3
 8004522:	2a00      	cmp	r2, #0
 8004524:	4691      	mov	r9, r2
 8004526:	dd07      	ble.n	8004538 <_printf_float+0x2e8>
 8004528:	4613      	mov	r3, r2
 800452a:	4631      	mov	r1, r6
 800452c:	4642      	mov	r2, r8
 800452e:	4628      	mov	r0, r5
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	f43f aee9 	beq.w	800430a <_printf_float+0xba>
 8004538:	f104 031a 	add.w	r3, r4, #26
 800453c:	f04f 0b00 	mov.w	fp, #0
 8004540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004544:	9306      	str	r3, [sp, #24]
 8004546:	e015      	b.n	8004574 <_printf_float+0x324>
 8004548:	7fefffff 	.word	0x7fefffff
 800454c:	08006204 	.word	0x08006204
 8004550:	08006200 	.word	0x08006200
 8004554:	0800620c 	.word	0x0800620c
 8004558:	08006208 	.word	0x08006208
 800455c:	08006210 	.word	0x08006210
 8004560:	2301      	movs	r3, #1
 8004562:	9a06      	ldr	r2, [sp, #24]
 8004564:	4631      	mov	r1, r6
 8004566:	4628      	mov	r0, r5
 8004568:	47b8      	blx	r7
 800456a:	3001      	adds	r0, #1
 800456c:	f43f aecd 	beq.w	800430a <_printf_float+0xba>
 8004570:	f10b 0b01 	add.w	fp, fp, #1
 8004574:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004578:	ebaa 0309 	sub.w	r3, sl, r9
 800457c:	455b      	cmp	r3, fp
 800457e:	dcef      	bgt.n	8004560 <_printf_float+0x310>
 8004580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004584:	429a      	cmp	r2, r3
 8004586:	44d0      	add	r8, sl
 8004588:	db15      	blt.n	80045b6 <_printf_float+0x366>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	07da      	lsls	r2, r3, #31
 800458e:	d412      	bmi.n	80045b6 <_printf_float+0x366>
 8004590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004592:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004594:	eba3 020a 	sub.w	r2, r3, sl
 8004598:	eba3 0a01 	sub.w	sl, r3, r1
 800459c:	4592      	cmp	sl, r2
 800459e:	bfa8      	it	ge
 80045a0:	4692      	movge	sl, r2
 80045a2:	f1ba 0f00 	cmp.w	sl, #0
 80045a6:	dc0e      	bgt.n	80045c6 <_printf_float+0x376>
 80045a8:	f04f 0800 	mov.w	r8, #0
 80045ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045b0:	f104 091a 	add.w	r9, r4, #26
 80045b4:	e019      	b.n	80045ea <_printf_float+0x39a>
 80045b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	d1e5      	bne.n	8004590 <_printf_float+0x340>
 80045c4:	e6a1      	b.n	800430a <_printf_float+0xba>
 80045c6:	4653      	mov	r3, sl
 80045c8:	4642      	mov	r2, r8
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	d1e9      	bne.n	80045a8 <_printf_float+0x358>
 80045d4:	e699      	b.n	800430a <_printf_float+0xba>
 80045d6:	2301      	movs	r3, #1
 80045d8:	464a      	mov	r2, r9
 80045da:	4631      	mov	r1, r6
 80045dc:	4628      	mov	r0, r5
 80045de:	47b8      	blx	r7
 80045e0:	3001      	adds	r0, #1
 80045e2:	f43f ae92 	beq.w	800430a <_printf_float+0xba>
 80045e6:	f108 0801 	add.w	r8, r8, #1
 80045ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	eba3 030a 	sub.w	r3, r3, sl
 80045f4:	4543      	cmp	r3, r8
 80045f6:	dcee      	bgt.n	80045d6 <_printf_float+0x386>
 80045f8:	e74a      	b.n	8004490 <_printf_float+0x240>
 80045fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045fc:	2a01      	cmp	r2, #1
 80045fe:	dc01      	bgt.n	8004604 <_printf_float+0x3b4>
 8004600:	07db      	lsls	r3, r3, #31
 8004602:	d53a      	bpl.n	800467a <_printf_float+0x42a>
 8004604:	2301      	movs	r3, #1
 8004606:	4642      	mov	r2, r8
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f ae7b 	beq.w	800430a <_printf_float+0xba>
 8004614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f108 0801 	add.w	r8, r8, #1
 8004624:	f43f ae71 	beq.w	800430a <_printf_float+0xba>
 8004628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462a:	2200      	movs	r2, #0
 800462c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004634:	2300      	movs	r3, #0
 8004636:	f7fc fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 800463a:	b9c8      	cbnz	r0, 8004670 <_printf_float+0x420>
 800463c:	4653      	mov	r3, sl
 800463e:	4642      	mov	r2, r8
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	d10e      	bne.n	8004668 <_printf_float+0x418>
 800464a:	e65e      	b.n	800430a <_printf_float+0xba>
 800464c:	2301      	movs	r3, #1
 800464e:	4652      	mov	r2, sl
 8004650:	4631      	mov	r1, r6
 8004652:	4628      	mov	r0, r5
 8004654:	47b8      	blx	r7
 8004656:	3001      	adds	r0, #1
 8004658:	f43f ae57 	beq.w	800430a <_printf_float+0xba>
 800465c:	f108 0801 	add.w	r8, r8, #1
 8004660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	4543      	cmp	r3, r8
 8004666:	dcf1      	bgt.n	800464c <_printf_float+0x3fc>
 8004668:	464b      	mov	r3, r9
 800466a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800466e:	e6de      	b.n	800442e <_printf_float+0x1de>
 8004670:	f04f 0800 	mov.w	r8, #0
 8004674:	f104 0a1a 	add.w	sl, r4, #26
 8004678:	e7f2      	b.n	8004660 <_printf_float+0x410>
 800467a:	2301      	movs	r3, #1
 800467c:	e7df      	b.n	800463e <_printf_float+0x3ee>
 800467e:	2301      	movs	r3, #1
 8004680:	464a      	mov	r2, r9
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f ae3e 	beq.w	800430a <_printf_float+0xba>
 800468e:	f108 0801 	add.w	r8, r8, #1
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	4543      	cmp	r3, r8
 800469a:	dcf0      	bgt.n	800467e <_printf_float+0x42e>
 800469c:	e6fc      	b.n	8004498 <_printf_float+0x248>
 800469e:	f04f 0800 	mov.w	r8, #0
 80046a2:	f104 0919 	add.w	r9, r4, #25
 80046a6:	e7f4      	b.n	8004692 <_printf_float+0x442>
 80046a8:	2900      	cmp	r1, #0
 80046aa:	f43f ae8b 	beq.w	80043c4 <_printf_float+0x174>
 80046ae:	2300      	movs	r3, #0
 80046b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80046b4:	ab09      	add	r3, sp, #36	; 0x24
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	ec49 8b10 	vmov	d0, r8, r9
 80046bc:	6022      	str	r2, [r4, #0]
 80046be:	f8cd a004 	str.w	sl, [sp, #4]
 80046c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7ff fd2e 	bl	8004128 <__cvt>
 80046cc:	4680      	mov	r8, r0
 80046ce:	e648      	b.n	8004362 <_printf_float+0x112>

080046d0 <_printf_common>:
 80046d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d4:	4691      	mov	r9, r2
 80046d6:	461f      	mov	r7, r3
 80046d8:	688a      	ldr	r2, [r1, #8]
 80046da:	690b      	ldr	r3, [r1, #16]
 80046dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bfb8      	it	lt
 80046e4:	4613      	movlt	r3, r2
 80046e6:	f8c9 3000 	str.w	r3, [r9]
 80046ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ee:	4606      	mov	r6, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	b112      	cbz	r2, 80046fa <_printf_common+0x2a>
 80046f4:	3301      	adds	r3, #1
 80046f6:	f8c9 3000 	str.w	r3, [r9]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	0699      	lsls	r1, r3, #26
 80046fe:	bf42      	ittt	mi
 8004700:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004704:	3302      	addmi	r3, #2
 8004706:	f8c9 3000 	strmi.w	r3, [r9]
 800470a:	6825      	ldr	r5, [r4, #0]
 800470c:	f015 0506 	ands.w	r5, r5, #6
 8004710:	d107      	bne.n	8004722 <_printf_common+0x52>
 8004712:	f104 0a19 	add.w	sl, r4, #25
 8004716:	68e3      	ldr	r3, [r4, #12]
 8004718:	f8d9 2000 	ldr.w	r2, [r9]
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	42ab      	cmp	r3, r5
 8004720:	dc28      	bgt.n	8004774 <_printf_common+0xa4>
 8004722:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	3300      	adds	r3, #0
 800472a:	bf18      	it	ne
 800472c:	2301      	movne	r3, #1
 800472e:	0692      	lsls	r2, r2, #26
 8004730:	d42d      	bmi.n	800478e <_printf_common+0xbe>
 8004732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004736:	4639      	mov	r1, r7
 8004738:	4630      	mov	r0, r6
 800473a:	47c0      	blx	r8
 800473c:	3001      	adds	r0, #1
 800473e:	d020      	beq.n	8004782 <_printf_common+0xb2>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	68e5      	ldr	r5, [r4, #12]
 8004744:	f8d9 2000 	ldr.w	r2, [r9]
 8004748:	f003 0306 	and.w	r3, r3, #6
 800474c:	2b04      	cmp	r3, #4
 800474e:	bf08      	it	eq
 8004750:	1aad      	subeq	r5, r5, r2
 8004752:	68a3      	ldr	r3, [r4, #8]
 8004754:	6922      	ldr	r2, [r4, #16]
 8004756:	bf0c      	ite	eq
 8004758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800475c:	2500      	movne	r5, #0
 800475e:	4293      	cmp	r3, r2
 8004760:	bfc4      	itt	gt
 8004762:	1a9b      	subgt	r3, r3, r2
 8004764:	18ed      	addgt	r5, r5, r3
 8004766:	f04f 0900 	mov.w	r9, #0
 800476a:	341a      	adds	r4, #26
 800476c:	454d      	cmp	r5, r9
 800476e:	d11a      	bne.n	80047a6 <_printf_common+0xd6>
 8004770:	2000      	movs	r0, #0
 8004772:	e008      	b.n	8004786 <_printf_common+0xb6>
 8004774:	2301      	movs	r3, #1
 8004776:	4652      	mov	r2, sl
 8004778:	4639      	mov	r1, r7
 800477a:	4630      	mov	r0, r6
 800477c:	47c0      	blx	r8
 800477e:	3001      	adds	r0, #1
 8004780:	d103      	bne.n	800478a <_printf_common+0xba>
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478a:	3501      	adds	r5, #1
 800478c:	e7c3      	b.n	8004716 <_printf_common+0x46>
 800478e:	18e1      	adds	r1, r4, r3
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	2030      	movs	r0, #48	; 0x30
 8004794:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004798:	4422      	add	r2, r4
 800479a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800479e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047a2:	3302      	adds	r3, #2
 80047a4:	e7c5      	b.n	8004732 <_printf_common+0x62>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4622      	mov	r2, r4
 80047aa:	4639      	mov	r1, r7
 80047ac:	4630      	mov	r0, r6
 80047ae:	47c0      	blx	r8
 80047b0:	3001      	adds	r0, #1
 80047b2:	d0e6      	beq.n	8004782 <_printf_common+0xb2>
 80047b4:	f109 0901 	add.w	r9, r9, #1
 80047b8:	e7d8      	b.n	800476c <_printf_common+0x9c>
	...

080047bc <_printf_i>:
 80047bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80047c4:	460c      	mov	r4, r1
 80047c6:	7e09      	ldrb	r1, [r1, #24]
 80047c8:	b085      	sub	sp, #20
 80047ca:	296e      	cmp	r1, #110	; 0x6e
 80047cc:	4617      	mov	r7, r2
 80047ce:	4606      	mov	r6, r0
 80047d0:	4698      	mov	r8, r3
 80047d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047d4:	f000 80b3 	beq.w	800493e <_printf_i+0x182>
 80047d8:	d822      	bhi.n	8004820 <_printf_i+0x64>
 80047da:	2963      	cmp	r1, #99	; 0x63
 80047dc:	d036      	beq.n	800484c <_printf_i+0x90>
 80047de:	d80a      	bhi.n	80047f6 <_printf_i+0x3a>
 80047e0:	2900      	cmp	r1, #0
 80047e2:	f000 80b9 	beq.w	8004958 <_printf_i+0x19c>
 80047e6:	2958      	cmp	r1, #88	; 0x58
 80047e8:	f000 8083 	beq.w	80048f2 <_printf_i+0x136>
 80047ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047f4:	e032      	b.n	800485c <_printf_i+0xa0>
 80047f6:	2964      	cmp	r1, #100	; 0x64
 80047f8:	d001      	beq.n	80047fe <_printf_i+0x42>
 80047fa:	2969      	cmp	r1, #105	; 0x69
 80047fc:	d1f6      	bne.n	80047ec <_printf_i+0x30>
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	0605      	lsls	r5, r0, #24
 8004804:	f103 0104 	add.w	r1, r3, #4
 8004808:	d52a      	bpl.n	8004860 <_printf_i+0xa4>
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6011      	str	r1, [r2, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	da03      	bge.n	800481a <_printf_i+0x5e>
 8004812:	222d      	movs	r2, #45	; 0x2d
 8004814:	425b      	negs	r3, r3
 8004816:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800481a:	486f      	ldr	r0, [pc, #444]	; (80049d8 <_printf_i+0x21c>)
 800481c:	220a      	movs	r2, #10
 800481e:	e039      	b.n	8004894 <_printf_i+0xd8>
 8004820:	2973      	cmp	r1, #115	; 0x73
 8004822:	f000 809d 	beq.w	8004960 <_printf_i+0x1a4>
 8004826:	d808      	bhi.n	800483a <_printf_i+0x7e>
 8004828:	296f      	cmp	r1, #111	; 0x6f
 800482a:	d020      	beq.n	800486e <_printf_i+0xb2>
 800482c:	2970      	cmp	r1, #112	; 0x70
 800482e:	d1dd      	bne.n	80047ec <_printf_i+0x30>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	f043 0320 	orr.w	r3, r3, #32
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	e003      	b.n	8004842 <_printf_i+0x86>
 800483a:	2975      	cmp	r1, #117	; 0x75
 800483c:	d017      	beq.n	800486e <_printf_i+0xb2>
 800483e:	2978      	cmp	r1, #120	; 0x78
 8004840:	d1d4      	bne.n	80047ec <_printf_i+0x30>
 8004842:	2378      	movs	r3, #120	; 0x78
 8004844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004848:	4864      	ldr	r0, [pc, #400]	; (80049dc <_printf_i+0x220>)
 800484a:	e055      	b.n	80048f8 <_printf_i+0x13c>
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	1d19      	adds	r1, r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6011      	str	r1, [r2, #0]
 8004854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800485c:	2301      	movs	r3, #1
 800485e:	e08c      	b.n	800497a <_printf_i+0x1be>
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6011      	str	r1, [r2, #0]
 8004864:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004868:	bf18      	it	ne
 800486a:	b21b      	sxthne	r3, r3
 800486c:	e7cf      	b.n	800480e <_printf_i+0x52>
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	6825      	ldr	r5, [r4, #0]
 8004872:	1d18      	adds	r0, r3, #4
 8004874:	6010      	str	r0, [r2, #0]
 8004876:	0628      	lsls	r0, r5, #24
 8004878:	d501      	bpl.n	800487e <_printf_i+0xc2>
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	e002      	b.n	8004884 <_printf_i+0xc8>
 800487e:	0668      	lsls	r0, r5, #25
 8004880:	d5fb      	bpl.n	800487a <_printf_i+0xbe>
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	4854      	ldr	r0, [pc, #336]	; (80049d8 <_printf_i+0x21c>)
 8004886:	296f      	cmp	r1, #111	; 0x6f
 8004888:	bf14      	ite	ne
 800488a:	220a      	movne	r2, #10
 800488c:	2208      	moveq	r2, #8
 800488e:	2100      	movs	r1, #0
 8004890:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004894:	6865      	ldr	r5, [r4, #4]
 8004896:	60a5      	str	r5, [r4, #8]
 8004898:	2d00      	cmp	r5, #0
 800489a:	f2c0 8095 	blt.w	80049c8 <_printf_i+0x20c>
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	f021 0104 	bic.w	r1, r1, #4
 80048a4:	6021      	str	r1, [r4, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d13d      	bne.n	8004926 <_printf_i+0x16a>
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	f040 808e 	bne.w	80049cc <_printf_i+0x210>
 80048b0:	4665      	mov	r5, ip
 80048b2:	2a08      	cmp	r2, #8
 80048b4:	d10b      	bne.n	80048ce <_printf_i+0x112>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	07db      	lsls	r3, r3, #31
 80048ba:	d508      	bpl.n	80048ce <_printf_i+0x112>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	bfde      	ittt	le
 80048c4:	2330      	movle	r3, #48	; 0x30
 80048c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048ce:	ebac 0305 	sub.w	r3, ip, r5
 80048d2:	6123      	str	r3, [r4, #16]
 80048d4:	f8cd 8000 	str.w	r8, [sp]
 80048d8:	463b      	mov	r3, r7
 80048da:	aa03      	add	r2, sp, #12
 80048dc:	4621      	mov	r1, r4
 80048de:	4630      	mov	r0, r6
 80048e0:	f7ff fef6 	bl	80046d0 <_printf_common>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d14d      	bne.n	8004984 <_printf_i+0x1c8>
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	b005      	add	sp, #20
 80048ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048f2:	4839      	ldr	r0, [pc, #228]	; (80049d8 <_printf_i+0x21c>)
 80048f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048f8:	6813      	ldr	r3, [r2, #0]
 80048fa:	6821      	ldr	r1, [r4, #0]
 80048fc:	1d1d      	adds	r5, r3, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6015      	str	r5, [r2, #0]
 8004902:	060a      	lsls	r2, r1, #24
 8004904:	d50b      	bpl.n	800491e <_printf_i+0x162>
 8004906:	07ca      	lsls	r2, r1, #31
 8004908:	bf44      	itt	mi
 800490a:	f041 0120 	orrmi.w	r1, r1, #32
 800490e:	6021      	strmi	r1, [r4, #0]
 8004910:	b91b      	cbnz	r3, 800491a <_printf_i+0x15e>
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	f022 0220 	bic.w	r2, r2, #32
 8004918:	6022      	str	r2, [r4, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	e7b7      	b.n	800488e <_printf_i+0xd2>
 800491e:	064d      	lsls	r5, r1, #25
 8004920:	bf48      	it	mi
 8004922:	b29b      	uxthmi	r3, r3
 8004924:	e7ef      	b.n	8004906 <_printf_i+0x14a>
 8004926:	4665      	mov	r5, ip
 8004928:	fbb3 f1f2 	udiv	r1, r3, r2
 800492c:	fb02 3311 	mls	r3, r2, r1, r3
 8004930:	5cc3      	ldrb	r3, [r0, r3]
 8004932:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004936:	460b      	mov	r3, r1
 8004938:	2900      	cmp	r1, #0
 800493a:	d1f5      	bne.n	8004928 <_printf_i+0x16c>
 800493c:	e7b9      	b.n	80048b2 <_printf_i+0xf6>
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6961      	ldr	r1, [r4, #20]
 8004944:	1d18      	adds	r0, r3, #4
 8004946:	6010      	str	r0, [r2, #0]
 8004948:	0628      	lsls	r0, r5, #24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	d501      	bpl.n	8004952 <_printf_i+0x196>
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	e002      	b.n	8004958 <_printf_i+0x19c>
 8004952:	066a      	lsls	r2, r5, #25
 8004954:	d5fb      	bpl.n	800494e <_printf_i+0x192>
 8004956:	8019      	strh	r1, [r3, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	4665      	mov	r5, ip
 800495e:	e7b9      	b.n	80048d4 <_printf_i+0x118>
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	1d19      	adds	r1, r3, #4
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	681d      	ldr	r5, [r3, #0]
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	2100      	movs	r1, #0
 800496c:	4628      	mov	r0, r5
 800496e:	f7fb fc47 	bl	8000200 <memchr>
 8004972:	b108      	cbz	r0, 8004978 <_printf_i+0x1bc>
 8004974:	1b40      	subs	r0, r0, r5
 8004976:	6060      	str	r0, [r4, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2300      	movs	r3, #0
 800497e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004982:	e7a7      	b.n	80048d4 <_printf_i+0x118>
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	462a      	mov	r2, r5
 8004988:	4639      	mov	r1, r7
 800498a:	4630      	mov	r0, r6
 800498c:	47c0      	blx	r8
 800498e:	3001      	adds	r0, #1
 8004990:	d0aa      	beq.n	80048e8 <_printf_i+0x12c>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	079b      	lsls	r3, r3, #30
 8004996:	d413      	bmi.n	80049c0 <_printf_i+0x204>
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	4298      	cmp	r0, r3
 800499e:	bfb8      	it	lt
 80049a0:	4618      	movlt	r0, r3
 80049a2:	e7a3      	b.n	80048ec <_printf_i+0x130>
 80049a4:	2301      	movs	r3, #1
 80049a6:	464a      	mov	r2, r9
 80049a8:	4639      	mov	r1, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d09a      	beq.n	80048e8 <_printf_i+0x12c>
 80049b2:	3501      	adds	r5, #1
 80049b4:	68e3      	ldr	r3, [r4, #12]
 80049b6:	9a03      	ldr	r2, [sp, #12]
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dcf2      	bgt.n	80049a4 <_printf_i+0x1e8>
 80049be:	e7eb      	b.n	8004998 <_printf_i+0x1dc>
 80049c0:	2500      	movs	r5, #0
 80049c2:	f104 0919 	add.w	r9, r4, #25
 80049c6:	e7f5      	b.n	80049b4 <_printf_i+0x1f8>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ac      	bne.n	8004926 <_printf_i+0x16a>
 80049cc:	7803      	ldrb	r3, [r0, #0]
 80049ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d6:	e76c      	b.n	80048b2 <_printf_i+0xf6>
 80049d8:	08006212 	.word	0x08006212
 80049dc:	08006223 	.word	0x08006223

080049e0 <siprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b500      	push	{lr}
 80049e4:	b09c      	sub	sp, #112	; 0x70
 80049e6:	ab1d      	add	r3, sp, #116	; 0x74
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9006      	str	r0, [sp, #24]
 80049ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049f0:	4809      	ldr	r0, [pc, #36]	; (8004a18 <siprintf+0x38>)
 80049f2:	9107      	str	r1, [sp, #28]
 80049f4:	9104      	str	r1, [sp, #16]
 80049f6:	4909      	ldr	r1, [pc, #36]	; (8004a1c <siprintf+0x3c>)
 80049f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049fc:	9105      	str	r1, [sp, #20]
 80049fe:	6800      	ldr	r0, [r0, #0]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	a902      	add	r1, sp, #8
 8004a04:	f001 fa5c 	bl	8005ec0 <_svfiprintf_r>
 8004a08:	9b02      	ldr	r3, [sp, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	b01c      	add	sp, #112	; 0x70
 8004a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a14:	b003      	add	sp, #12
 8004a16:	4770      	bx	lr
 8004a18:	2000001c 	.word	0x2000001c
 8004a1c:	ffff0208 	.word	0xffff0208

08004a20 <quorem>:
 8004a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	6903      	ldr	r3, [r0, #16]
 8004a26:	690c      	ldr	r4, [r1, #16]
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	4680      	mov	r8, r0
 8004a2c:	f2c0 8082 	blt.w	8004b34 <quorem+0x114>
 8004a30:	3c01      	subs	r4, #1
 8004a32:	f101 0714 	add.w	r7, r1, #20
 8004a36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a3a:	f100 0614 	add.w	r6, r0, #20
 8004a3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a46:	eb06 030c 	add.w	r3, r6, ip
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	eb07 090c 	add.w	r9, r7, ip
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a56:	b395      	cbz	r5, 8004abe <quorem+0x9e>
 8004a58:	f04f 0a00 	mov.w	sl, #0
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	46b6      	mov	lr, r6
 8004a60:	46d3      	mov	fp, sl
 8004a62:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a66:	b293      	uxth	r3, r2
 8004a68:	fb05 a303 	mla	r3, r5, r3, sl
 8004a6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	ebab 0303 	sub.w	r3, fp, r3
 8004a76:	0c12      	lsrs	r2, r2, #16
 8004a78:	f8de b000 	ldr.w	fp, [lr]
 8004a7c:	fb05 a202 	mla	r2, r5, r2, sl
 8004a80:	fa13 f38b 	uxtah	r3, r3, fp
 8004a84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a88:	fa1f fb82 	uxth.w	fp, r2
 8004a8c:	f8de 2000 	ldr.w	r2, [lr]
 8004a90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a9e:	4581      	cmp	r9, r0
 8004aa0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004aa4:	f84e 3b04 	str.w	r3, [lr], #4
 8004aa8:	d2db      	bcs.n	8004a62 <quorem+0x42>
 8004aaa:	f856 300c 	ldr.w	r3, [r6, ip]
 8004aae:	b933      	cbnz	r3, 8004abe <quorem+0x9e>
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	3b04      	subs	r3, #4
 8004ab4:	429e      	cmp	r6, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	d330      	bcc.n	8004b1c <quorem+0xfc>
 8004aba:	f8c8 4010 	str.w	r4, [r8, #16]
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f001 f828 	bl	8005b14 <__mcmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	db25      	blt.n	8004b14 <quorem+0xf4>
 8004ac8:	3501      	adds	r5, #1
 8004aca:	4630      	mov	r0, r6
 8004acc:	f04f 0c00 	mov.w	ip, #0
 8004ad0:	f857 2b04 	ldr.w	r2, [r7], #4
 8004ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8004ad8:	b293      	uxth	r3, r2
 8004ada:	ebac 0303 	sub.w	r3, ip, r3
 8004ade:	0c12      	lsrs	r2, r2, #16
 8004ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004af2:	45b9      	cmp	r9, r7
 8004af4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004af8:	f840 3b04 	str.w	r3, [r0], #4
 8004afc:	d2e8      	bcs.n	8004ad0 <quorem+0xb0>
 8004afe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b06:	b92a      	cbnz	r2, 8004b14 <quorem+0xf4>
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	429e      	cmp	r6, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	d30b      	bcc.n	8004b28 <quorem+0x108>
 8004b10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b14:	4628      	mov	r0, r5
 8004b16:	b003      	add	sp, #12
 8004b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	2a00      	cmp	r2, #0
 8004b22:	d1ca      	bne.n	8004aba <quorem+0x9a>
 8004b24:	3c01      	subs	r4, #1
 8004b26:	e7c5      	b.n	8004ab4 <quorem+0x94>
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	3b04      	subs	r3, #4
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	d1ef      	bne.n	8004b10 <quorem+0xf0>
 8004b30:	3c01      	subs	r4, #1
 8004b32:	e7ea      	b.n	8004b0a <quorem+0xea>
 8004b34:	2000      	movs	r0, #0
 8004b36:	e7ee      	b.n	8004b16 <quorem+0xf6>

08004b38 <_dtoa_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	ec57 6b10 	vmov	r6, r7, d0
 8004b40:	b097      	sub	sp, #92	; 0x5c
 8004b42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b44:	9106      	str	r1, [sp, #24]
 8004b46:	4604      	mov	r4, r0
 8004b48:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b4a:	9312      	str	r3, [sp, #72]	; 0x48
 8004b4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b50:	e9cd 6700 	strd	r6, r7, [sp]
 8004b54:	b93d      	cbnz	r5, 8004b66 <_dtoa_r+0x2e>
 8004b56:	2010      	movs	r0, #16
 8004b58:	f000 fdb4 	bl	80056c4 <malloc>
 8004b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8004b5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b62:	6005      	str	r5, [r0, #0]
 8004b64:	60c5      	str	r5, [r0, #12]
 8004b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	b151      	cbz	r1, 8004b82 <_dtoa_r+0x4a>
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	604a      	str	r2, [r1, #4]
 8004b70:	2301      	movs	r3, #1
 8004b72:	4093      	lsls	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 fdeb 	bl	8005752 <_Bfree>
 8004b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	1e3b      	subs	r3, r7, #0
 8004b84:	bfbb      	ittet	lt
 8004b86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	9301      	strlt	r3, [sp, #4]
 8004b8c:	2300      	movge	r3, #0
 8004b8e:	2201      	movlt	r2, #1
 8004b90:	bfac      	ite	ge
 8004b92:	f8c8 3000 	strge.w	r3, [r8]
 8004b96:	f8c8 2000 	strlt.w	r2, [r8]
 8004b9a:	4baf      	ldr	r3, [pc, #700]	; (8004e58 <_dtoa_r+0x320>)
 8004b9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ba0:	ea33 0308 	bics.w	r3, r3, r8
 8004ba4:	d114      	bne.n	8004bd0 <_dtoa_r+0x98>
 8004ba6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ba8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	9b00      	ldr	r3, [sp, #0]
 8004bb0:	b923      	cbnz	r3, 8004bbc <_dtoa_r+0x84>
 8004bb2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f000 8542 	beq.w	8005640 <_dtoa_r+0xb08>
 8004bbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004e6c <_dtoa_r+0x334>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8544 	beq.w	8005650 <_dtoa_r+0xb18>
 8004bc8:	f10b 0303 	add.w	r3, fp, #3
 8004bcc:	f000 bd3e 	b.w	800564c <_dtoa_r+0xb14>
 8004bd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4630      	mov	r0, r6
 8004bda:	4639      	mov	r1, r7
 8004bdc:	f7fb ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 8004be0:	4681      	mov	r9, r0
 8004be2:	b168      	cbz	r0, 8004c00 <_dtoa_r+0xc8>
 8004be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004be6:	2301      	movs	r3, #1
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8524 	beq.w	800563a <_dtoa_r+0xb02>
 8004bf2:	4b9a      	ldr	r3, [pc, #616]	; (8004e5c <_dtoa_r+0x324>)
 8004bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bf6:	f103 3bff 	add.w	fp, r3, #4294967295
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	f000 bd28 	b.w	8005650 <_dtoa_r+0xb18>
 8004c00:	aa14      	add	r2, sp, #80	; 0x50
 8004c02:	a915      	add	r1, sp, #84	; 0x54
 8004c04:	ec47 6b10 	vmov	d0, r6, r7
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fffa 	bl	8005c02 <__d2b>
 8004c0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c12:	9004      	str	r0, [sp, #16]
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	d07c      	beq.n	8004d12 <_dtoa_r+0x1da>
 8004c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004c20:	46b2      	mov	sl, r6
 8004c22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <_dtoa_r+0x328>)
 8004c32:	4650      	mov	r0, sl
 8004c34:	4659      	mov	r1, fp
 8004c36:	f7fb fb37 	bl	80002a8 <__aeabi_dsub>
 8004c3a:	a381      	add	r3, pc, #516	; (adr r3, 8004e40 <_dtoa_r+0x308>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f7fb fcea 	bl	8000618 <__aeabi_dmul>
 8004c44:	a380      	add	r3, pc, #512	; (adr r3, 8004e48 <_dtoa_r+0x310>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f7fb fb2f 	bl	80002ac <__adddf3>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	4628      	mov	r0, r5
 8004c52:	460f      	mov	r7, r1
 8004c54:	f7fb fc76 	bl	8000544 <__aeabi_i2d>
 8004c58:	a37d      	add	r3, pc, #500	; (adr r3, 8004e50 <_dtoa_r+0x318>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fcdb 	bl	8000618 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4630      	mov	r0, r6
 8004c68:	4639      	mov	r1, r7
 8004c6a:	f7fb fb1f 	bl	80002ac <__adddf3>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	460f      	mov	r7, r1
 8004c72:	f7fb ff81 	bl	8000b78 <__aeabi_d2iz>
 8004c76:	2200      	movs	r2, #0
 8004c78:	4682      	mov	sl, r0
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	4639      	mov	r1, r7
 8004c80:	f7fb ff3c 	bl	8000afc <__aeabi_dcmplt>
 8004c84:	b148      	cbz	r0, 8004c9a <_dtoa_r+0x162>
 8004c86:	4650      	mov	r0, sl
 8004c88:	f7fb fc5c 	bl	8000544 <__aeabi_i2d>
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	463b      	mov	r3, r7
 8004c90:	f7fb ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c94:	b908      	cbnz	r0, 8004c9a <_dtoa_r+0x162>
 8004c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c9a:	f1ba 0f16 	cmp.w	sl, #22
 8004c9e:	d859      	bhi.n	8004d54 <_dtoa_r+0x21c>
 8004ca0:	4970      	ldr	r1, [pc, #448]	; (8004e64 <_dtoa_r+0x32c>)
 8004ca2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cae:	f7fb ff43 	bl	8000b38 <__aeabi_dcmpgt>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d050      	beq.n	8004d58 <_dtoa_r+0x220>
 8004cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cba:	2300      	movs	r3, #0
 8004cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cc0:	1b5d      	subs	r5, r3, r5
 8004cc2:	f1b5 0801 	subs.w	r8, r5, #1
 8004cc6:	bf49      	itett	mi
 8004cc8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004ccc:	2300      	movpl	r3, #0
 8004cce:	9305      	strmi	r3, [sp, #20]
 8004cd0:	f04f 0800 	movmi.w	r8, #0
 8004cd4:	bf58      	it	pl
 8004cd6:	9305      	strpl	r3, [sp, #20]
 8004cd8:	f1ba 0f00 	cmp.w	sl, #0
 8004cdc:	db3e      	blt.n	8004d5c <_dtoa_r+0x224>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	44d0      	add	r8, sl
 8004ce2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ce6:	9307      	str	r3, [sp, #28]
 8004ce8:	9b06      	ldr	r3, [sp, #24]
 8004cea:	2b09      	cmp	r3, #9
 8004cec:	f200 8090 	bhi.w	8004e10 <_dtoa_r+0x2d8>
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	bfc4      	itt	gt
 8004cf4:	3b04      	subgt	r3, #4
 8004cf6:	9306      	strgt	r3, [sp, #24]
 8004cf8:	9b06      	ldr	r3, [sp, #24]
 8004cfa:	f1a3 0302 	sub.w	r3, r3, #2
 8004cfe:	bfcc      	ite	gt
 8004d00:	2500      	movgt	r5, #0
 8004d02:	2501      	movle	r5, #1
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	f200 808f 	bhi.w	8004e28 <_dtoa_r+0x2f0>
 8004d0a:	e8df f003 	tbb	[pc, r3]
 8004d0e:	7f7d      	.short	0x7f7d
 8004d10:	7131      	.short	0x7131
 8004d12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004d16:	441d      	add	r5, r3
 8004d18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d1c:	2820      	cmp	r0, #32
 8004d1e:	dd13      	ble.n	8004d48 <_dtoa_r+0x210>
 8004d20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d24:	9b00      	ldr	r3, [sp, #0]
 8004d26:	fa08 f800 	lsl.w	r8, r8, r0
 8004d2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d2e:	fa23 f000 	lsr.w	r0, r3, r0
 8004d32:	ea48 0000 	orr.w	r0, r8, r0
 8004d36:	f7fb fbf5 	bl	8000524 <__aeabi_ui2d>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4682      	mov	sl, r0
 8004d3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004d42:	3d01      	subs	r5, #1
 8004d44:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d46:	e772      	b.n	8004c2e <_dtoa_r+0xf6>
 8004d48:	9b00      	ldr	r3, [sp, #0]
 8004d4a:	f1c0 0020 	rsb	r0, r0, #32
 8004d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d52:	e7f0      	b.n	8004d36 <_dtoa_r+0x1fe>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e7b1      	b.n	8004cbc <_dtoa_r+0x184>
 8004d58:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d5a:	e7b0      	b.n	8004cbe <_dtoa_r+0x186>
 8004d5c:	9b05      	ldr	r3, [sp, #20]
 8004d5e:	eba3 030a 	sub.w	r3, r3, sl
 8004d62:	9305      	str	r3, [sp, #20]
 8004d64:	f1ca 0300 	rsb	r3, sl, #0
 8004d68:	9307      	str	r3, [sp, #28]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d6e:	e7bb      	b.n	8004ce8 <_dtoa_r+0x1b0>
 8004d70:	2301      	movs	r3, #1
 8004d72:	930a      	str	r3, [sp, #40]	; 0x28
 8004d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dd59      	ble.n	8004e2e <_dtoa_r+0x2f6>
 8004d7a:	9302      	str	r3, [sp, #8]
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d80:	2200      	movs	r2, #0
 8004d82:	6072      	str	r2, [r6, #4]
 8004d84:	2204      	movs	r2, #4
 8004d86:	f102 0014 	add.w	r0, r2, #20
 8004d8a:	4298      	cmp	r0, r3
 8004d8c:	6871      	ldr	r1, [r6, #4]
 8004d8e:	d953      	bls.n	8004e38 <_dtoa_r+0x300>
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 fcaa 	bl	80056ea <_Balloc>
 8004d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	f1b9 0f0e 	cmp.w	r9, #14
 8004d9e:	f8d3 b000 	ldr.w	fp, [r3]
 8004da2:	f200 80e6 	bhi.w	8004f72 <_dtoa_r+0x43a>
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	f000 80e3 	beq.w	8004f72 <_dtoa_r+0x43a>
 8004dac:	ed9d 7b00 	vldr	d7, [sp]
 8004db0:	f1ba 0f00 	cmp.w	sl, #0
 8004db4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004db8:	dd74      	ble.n	8004ea4 <_dtoa_r+0x36c>
 8004dba:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <_dtoa_r+0x32c>)
 8004dbc:	f00a 030f 	and.w	r3, sl, #15
 8004dc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dc4:	ed93 7b00 	vldr	d7, [r3]
 8004dc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004dcc:	06f0      	lsls	r0, r6, #27
 8004dce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004dd2:	d565      	bpl.n	8004ea0 <_dtoa_r+0x368>
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <_dtoa_r+0x330>)
 8004dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dde:	f7fb fd45 	bl	800086c <__aeabi_ddiv>
 8004de2:	e9cd 0100 	strd	r0, r1, [sp]
 8004de6:	f006 060f 	and.w	r6, r6, #15
 8004dea:	2503      	movs	r5, #3
 8004dec:	4f1e      	ldr	r7, [pc, #120]	; (8004e68 <_dtoa_r+0x330>)
 8004dee:	e04c      	b.n	8004e8a <_dtoa_r+0x352>
 8004df0:	2301      	movs	r3, #1
 8004df2:	930a      	str	r3, [sp, #40]	; 0x28
 8004df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004df6:	4453      	add	r3, sl
 8004df8:	f103 0901 	add.w	r9, r3, #1
 8004dfc:	9302      	str	r3, [sp, #8]
 8004dfe:	464b      	mov	r3, r9
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	bfb8      	it	lt
 8004e04:	2301      	movlt	r3, #1
 8004e06:	e7ba      	b.n	8004d7e <_dtoa_r+0x246>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e7b2      	b.n	8004d72 <_dtoa_r+0x23a>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e7f0      	b.n	8004df2 <_dtoa_r+0x2ba>
 8004e10:	2501      	movs	r5, #1
 8004e12:	2300      	movs	r3, #0
 8004e14:	9306      	str	r3, [sp, #24]
 8004e16:	950a      	str	r5, [sp, #40]	; 0x28
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	4699      	mov	r9, r3
 8004e20:	2200      	movs	r2, #0
 8004e22:	2312      	movs	r3, #18
 8004e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e26:	e7aa      	b.n	8004d7e <_dtoa_r+0x246>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e2c:	e7f4      	b.n	8004e18 <_dtoa_r+0x2e0>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	9302      	str	r3, [sp, #8]
 8004e32:	4699      	mov	r9, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	e7f5      	b.n	8004e24 <_dtoa_r+0x2ec>
 8004e38:	3101      	adds	r1, #1
 8004e3a:	6071      	str	r1, [r6, #4]
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	e7a2      	b.n	8004d86 <_dtoa_r+0x24e>
 8004e40:	636f4361 	.word	0x636f4361
 8004e44:	3fd287a7 	.word	0x3fd287a7
 8004e48:	8b60c8b3 	.word	0x8b60c8b3
 8004e4c:	3fc68a28 	.word	0x3fc68a28
 8004e50:	509f79fb 	.word	0x509f79fb
 8004e54:	3fd34413 	.word	0x3fd34413
 8004e58:	7ff00000 	.word	0x7ff00000
 8004e5c:	08006211 	.word	0x08006211
 8004e60:	3ff80000 	.word	0x3ff80000
 8004e64:	08006270 	.word	0x08006270
 8004e68:	08006248 	.word	0x08006248
 8004e6c:	0800623d 	.word	0x0800623d
 8004e70:	07f1      	lsls	r1, r6, #31
 8004e72:	d508      	bpl.n	8004e86 <_dtoa_r+0x34e>
 8004e74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e7c:	f7fb fbcc 	bl	8000618 <__aeabi_dmul>
 8004e80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e84:	3501      	adds	r5, #1
 8004e86:	1076      	asrs	r6, r6, #1
 8004e88:	3708      	adds	r7, #8
 8004e8a:	2e00      	cmp	r6, #0
 8004e8c:	d1f0      	bne.n	8004e70 <_dtoa_r+0x338>
 8004e8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e96:	f7fb fce9 	bl	800086c <__aeabi_ddiv>
 8004e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8004e9e:	e01a      	b.n	8004ed6 <_dtoa_r+0x39e>
 8004ea0:	2502      	movs	r5, #2
 8004ea2:	e7a3      	b.n	8004dec <_dtoa_r+0x2b4>
 8004ea4:	f000 80a0 	beq.w	8004fe8 <_dtoa_r+0x4b0>
 8004ea8:	f1ca 0600 	rsb	r6, sl, #0
 8004eac:	4b9f      	ldr	r3, [pc, #636]	; (800512c <_dtoa_r+0x5f4>)
 8004eae:	4fa0      	ldr	r7, [pc, #640]	; (8005130 <_dtoa_r+0x5f8>)
 8004eb0:	f006 020f 	and.w	r2, r6, #15
 8004eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ec0:	f7fb fbaa 	bl	8000618 <__aeabi_dmul>
 8004ec4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ec8:	1136      	asrs	r6, r6, #4
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2502      	movs	r5, #2
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d17f      	bne.n	8004fd2 <_dtoa_r+0x49a>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e1      	bne.n	8004e9a <_dtoa_r+0x362>
 8004ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8087 	beq.w	8004fec <_dtoa_r+0x4b4>
 8004ede:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4b93      	ldr	r3, [pc, #588]	; (8005134 <_dtoa_r+0x5fc>)
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	4639      	mov	r1, r7
 8004eea:	f7fb fe07 	bl	8000afc <__aeabi_dcmplt>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d07c      	beq.n	8004fec <_dtoa_r+0x4b4>
 8004ef2:	f1b9 0f00 	cmp.w	r9, #0
 8004ef6:	d079      	beq.n	8004fec <_dtoa_r+0x4b4>
 8004ef8:	9b02      	ldr	r3, [sp, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dd35      	ble.n	8004f6a <_dtoa_r+0x432>
 8004efe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f02:	9308      	str	r3, [sp, #32]
 8004f04:	4639      	mov	r1, r7
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b8b      	ldr	r3, [pc, #556]	; (8005138 <_dtoa_r+0x600>)
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7fb fb84 	bl	8000618 <__aeabi_dmul>
 8004f10:	e9cd 0100 	strd	r0, r1, [sp]
 8004f14:	9f02      	ldr	r7, [sp, #8]
 8004f16:	3501      	adds	r5, #1
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f7fb fb13 	bl	8000544 <__aeabi_i2d>
 8004f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f22:	f7fb fb79 	bl	8000618 <__aeabi_dmul>
 8004f26:	2200      	movs	r2, #0
 8004f28:	4b84      	ldr	r3, [pc, #528]	; (800513c <_dtoa_r+0x604>)
 8004f2a:	f7fb f9bf 	bl	80002ac <__adddf3>
 8004f2e:	4605      	mov	r5, r0
 8004f30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f34:	2f00      	cmp	r7, #0
 8004f36:	d15d      	bne.n	8004ff4 <_dtoa_r+0x4bc>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4b81      	ldr	r3, [pc, #516]	; (8005140 <_dtoa_r+0x608>)
 8004f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f40:	f7fb f9b2 	bl	80002a8 <__aeabi_dsub>
 8004f44:	462a      	mov	r2, r5
 8004f46:	4633      	mov	r3, r6
 8004f48:	e9cd 0100 	strd	r0, r1, [sp]
 8004f4c:	f7fb fdf4 	bl	8000b38 <__aeabi_dcmpgt>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f040 8288 	bne.w	8005466 <_dtoa_r+0x92e>
 8004f56:	462a      	mov	r2, r5
 8004f58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f60:	f7fb fdcc 	bl	8000afc <__aeabi_dcmplt>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f040 827c 	bne.w	8005462 <_dtoa_r+0x92a>
 8004f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8004f72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f2c0 8150 	blt.w	800521a <_dtoa_r+0x6e2>
 8004f7a:	f1ba 0f0e 	cmp.w	sl, #14
 8004f7e:	f300 814c 	bgt.w	800521a <_dtoa_r+0x6e2>
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <_dtoa_r+0x5f4>)
 8004f84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f88:	ed93 7b00 	vldr	d7, [r3]
 8004f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f94:	f280 80d8 	bge.w	8005148 <_dtoa_r+0x610>
 8004f98:	f1b9 0f00 	cmp.w	r9, #0
 8004f9c:	f300 80d4 	bgt.w	8005148 <_dtoa_r+0x610>
 8004fa0:	f040 825e 	bne.w	8005460 <_dtoa_r+0x928>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4b66      	ldr	r3, [pc, #408]	; (8005140 <_dtoa_r+0x608>)
 8004fa8:	ec51 0b17 	vmov	r0, r1, d7
 8004fac:	f7fb fb34 	bl	8000618 <__aeabi_dmul>
 8004fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fb4:	f7fb fdb6 	bl	8000b24 <__aeabi_dcmpge>
 8004fb8:	464f      	mov	r7, r9
 8004fba:	464e      	mov	r6, r9
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f040 8234 	bne.w	800542a <_dtoa_r+0x8f2>
 8004fc2:	2331      	movs	r3, #49	; 0x31
 8004fc4:	f10b 0501 	add.w	r5, fp, #1
 8004fc8:	f88b 3000 	strb.w	r3, [fp]
 8004fcc:	f10a 0a01 	add.w	sl, sl, #1
 8004fd0:	e22f      	b.n	8005432 <_dtoa_r+0x8fa>
 8004fd2:	07f2      	lsls	r2, r6, #31
 8004fd4:	d505      	bpl.n	8004fe2 <_dtoa_r+0x4aa>
 8004fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fda:	f7fb fb1d 	bl	8000618 <__aeabi_dmul>
 8004fde:	3501      	adds	r5, #1
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	1076      	asrs	r6, r6, #1
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	e772      	b.n	8004ece <_dtoa_r+0x396>
 8004fe8:	2502      	movs	r5, #2
 8004fea:	e774      	b.n	8004ed6 <_dtoa_r+0x39e>
 8004fec:	f8cd a020 	str.w	sl, [sp, #32]
 8004ff0:	464f      	mov	r7, r9
 8004ff2:	e791      	b.n	8004f18 <_dtoa_r+0x3e0>
 8004ff4:	4b4d      	ldr	r3, [pc, #308]	; (800512c <_dtoa_r+0x5f4>)
 8004ff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ffa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005000:	2b00      	cmp	r3, #0
 8005002:	d047      	beq.n	8005094 <_dtoa_r+0x55c>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	2000      	movs	r0, #0
 800500a:	494e      	ldr	r1, [pc, #312]	; (8005144 <_dtoa_r+0x60c>)
 800500c:	f7fb fc2e 	bl	800086c <__aeabi_ddiv>
 8005010:	462a      	mov	r2, r5
 8005012:	4633      	mov	r3, r6
 8005014:	f7fb f948 	bl	80002a8 <__aeabi_dsub>
 8005018:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800501c:	465d      	mov	r5, fp
 800501e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005022:	f7fb fda9 	bl	8000b78 <__aeabi_d2iz>
 8005026:	4606      	mov	r6, r0
 8005028:	f7fb fa8c 	bl	8000544 <__aeabi_i2d>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005034:	f7fb f938 	bl	80002a8 <__aeabi_dsub>
 8005038:	3630      	adds	r6, #48	; 0x30
 800503a:	f805 6b01 	strb.w	r6, [r5], #1
 800503e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005042:	e9cd 0100 	strd	r0, r1, [sp]
 8005046:	f7fb fd59 	bl	8000afc <__aeabi_dcmplt>
 800504a:	2800      	cmp	r0, #0
 800504c:	d163      	bne.n	8005116 <_dtoa_r+0x5de>
 800504e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005052:	2000      	movs	r0, #0
 8005054:	4937      	ldr	r1, [pc, #220]	; (8005134 <_dtoa_r+0x5fc>)
 8005056:	f7fb f927 	bl	80002a8 <__aeabi_dsub>
 800505a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800505e:	f7fb fd4d 	bl	8000afc <__aeabi_dcmplt>
 8005062:	2800      	cmp	r0, #0
 8005064:	f040 80b7 	bne.w	80051d6 <_dtoa_r+0x69e>
 8005068:	eba5 030b 	sub.w	r3, r5, fp
 800506c:	429f      	cmp	r7, r3
 800506e:	f77f af7c 	ble.w	8004f6a <_dtoa_r+0x432>
 8005072:	2200      	movs	r2, #0
 8005074:	4b30      	ldr	r3, [pc, #192]	; (8005138 <_dtoa_r+0x600>)
 8005076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800507a:	f7fb facd 	bl	8000618 <__aeabi_dmul>
 800507e:	2200      	movs	r2, #0
 8005080:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005084:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <_dtoa_r+0x600>)
 8005086:	e9dd 0100 	ldrd	r0, r1, [sp]
 800508a:	f7fb fac5 	bl	8000618 <__aeabi_dmul>
 800508e:	e9cd 0100 	strd	r0, r1, [sp]
 8005092:	e7c4      	b.n	800501e <_dtoa_r+0x4e6>
 8005094:	462a      	mov	r2, r5
 8005096:	4633      	mov	r3, r6
 8005098:	f7fb fabe 	bl	8000618 <__aeabi_dmul>
 800509c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050a0:	eb0b 0507 	add.w	r5, fp, r7
 80050a4:	465e      	mov	r6, fp
 80050a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050aa:	f7fb fd65 	bl	8000b78 <__aeabi_d2iz>
 80050ae:	4607      	mov	r7, r0
 80050b0:	f7fb fa48 	bl	8000544 <__aeabi_i2d>
 80050b4:	3730      	adds	r7, #48	; 0x30
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050be:	f7fb f8f3 	bl	80002a8 <__aeabi_dsub>
 80050c2:	f806 7b01 	strb.w	r7, [r6], #1
 80050c6:	42ae      	cmp	r6, r5
 80050c8:	e9cd 0100 	strd	r0, r1, [sp]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	d126      	bne.n	8005120 <_dtoa_r+0x5e8>
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <_dtoa_r+0x60c>)
 80050d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d8:	f7fb f8e8 	bl	80002ac <__adddf3>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e4:	f7fb fd28 	bl	8000b38 <__aeabi_dcmpgt>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d174      	bne.n	80051d6 <_dtoa_r+0x69e>
 80050ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050f0:	2000      	movs	r0, #0
 80050f2:	4914      	ldr	r1, [pc, #80]	; (8005144 <_dtoa_r+0x60c>)
 80050f4:	f7fb f8d8 	bl	80002a8 <__aeabi_dsub>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005100:	f7fb fcfc 	bl	8000afc <__aeabi_dcmplt>
 8005104:	2800      	cmp	r0, #0
 8005106:	f43f af30 	beq.w	8004f6a <_dtoa_r+0x432>
 800510a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800510e:	2b30      	cmp	r3, #48	; 0x30
 8005110:	f105 32ff 	add.w	r2, r5, #4294967295
 8005114:	d002      	beq.n	800511c <_dtoa_r+0x5e4>
 8005116:	f8dd a020 	ldr.w	sl, [sp, #32]
 800511a:	e04a      	b.n	80051b2 <_dtoa_r+0x67a>
 800511c:	4615      	mov	r5, r2
 800511e:	e7f4      	b.n	800510a <_dtoa_r+0x5d2>
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <_dtoa_r+0x600>)
 8005122:	f7fb fa79 	bl	8000618 <__aeabi_dmul>
 8005126:	e9cd 0100 	strd	r0, r1, [sp]
 800512a:	e7bc      	b.n	80050a6 <_dtoa_r+0x56e>
 800512c:	08006270 	.word	0x08006270
 8005130:	08006248 	.word	0x08006248
 8005134:	3ff00000 	.word	0x3ff00000
 8005138:	40240000 	.word	0x40240000
 800513c:	401c0000 	.word	0x401c0000
 8005140:	40140000 	.word	0x40140000
 8005144:	3fe00000 	.word	0x3fe00000
 8005148:	e9dd 6700 	ldrd	r6, r7, [sp]
 800514c:	465d      	mov	r5, fp
 800514e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005152:	4630      	mov	r0, r6
 8005154:	4639      	mov	r1, r7
 8005156:	f7fb fb89 	bl	800086c <__aeabi_ddiv>
 800515a:	f7fb fd0d 	bl	8000b78 <__aeabi_d2iz>
 800515e:	4680      	mov	r8, r0
 8005160:	f7fb f9f0 	bl	8000544 <__aeabi_i2d>
 8005164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005168:	f7fb fa56 	bl	8000618 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005178:	f7fb f896 	bl	80002a8 <__aeabi_dsub>
 800517c:	f805 6b01 	strb.w	r6, [r5], #1
 8005180:	eba5 060b 	sub.w	r6, r5, fp
 8005184:	45b1      	cmp	r9, r6
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	d139      	bne.n	8005200 <_dtoa_r+0x6c8>
 800518c:	f7fb f88e 	bl	80002ac <__adddf3>
 8005190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	f7fb fcce 	bl	8000b38 <__aeabi_dcmpgt>
 800519c:	b9c8      	cbnz	r0, 80051d2 <_dtoa_r+0x69a>
 800519e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051a2:	4630      	mov	r0, r6
 80051a4:	4639      	mov	r1, r7
 80051a6:	f7fb fc9f 	bl	8000ae8 <__aeabi_dcmpeq>
 80051aa:	b110      	cbz	r0, 80051b2 <_dtoa_r+0x67a>
 80051ac:	f018 0f01 	tst.w	r8, #1
 80051b0:	d10f      	bne.n	80051d2 <_dtoa_r+0x69a>
 80051b2:	9904      	ldr	r1, [sp, #16]
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 facc 	bl	8005752 <_Bfree>
 80051ba:	2300      	movs	r3, #0
 80051bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051be:	702b      	strb	r3, [r5, #0]
 80051c0:	f10a 0301 	add.w	r3, sl, #1
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8241 	beq.w	8005650 <_dtoa_r+0xb18>
 80051ce:	601d      	str	r5, [r3, #0]
 80051d0:	e23e      	b.n	8005650 <_dtoa_r+0xb18>
 80051d2:	f8cd a020 	str.w	sl, [sp, #32]
 80051d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051da:	2a39      	cmp	r2, #57	; 0x39
 80051dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80051e0:	d108      	bne.n	80051f4 <_dtoa_r+0x6bc>
 80051e2:	459b      	cmp	fp, r3
 80051e4:	d10a      	bne.n	80051fc <_dtoa_r+0x6c4>
 80051e6:	9b08      	ldr	r3, [sp, #32]
 80051e8:	3301      	adds	r3, #1
 80051ea:	9308      	str	r3, [sp, #32]
 80051ec:	2330      	movs	r3, #48	; 0x30
 80051ee:	f88b 3000 	strb.w	r3, [fp]
 80051f2:	465b      	mov	r3, fp
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	3201      	adds	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e78c      	b.n	8005116 <_dtoa_r+0x5de>
 80051fc:	461d      	mov	r5, r3
 80051fe:	e7ea      	b.n	80051d6 <_dtoa_r+0x69e>
 8005200:	2200      	movs	r2, #0
 8005202:	4b9b      	ldr	r3, [pc, #620]	; (8005470 <_dtoa_r+0x938>)
 8005204:	f7fb fa08 	bl	8000618 <__aeabi_dmul>
 8005208:	2200      	movs	r2, #0
 800520a:	2300      	movs	r3, #0
 800520c:	4606      	mov	r6, r0
 800520e:	460f      	mov	r7, r1
 8005210:	f7fb fc6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005214:	2800      	cmp	r0, #0
 8005216:	d09a      	beq.n	800514e <_dtoa_r+0x616>
 8005218:	e7cb      	b.n	80051b2 <_dtoa_r+0x67a>
 800521a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521c:	2a00      	cmp	r2, #0
 800521e:	f000 808b 	beq.w	8005338 <_dtoa_r+0x800>
 8005222:	9a06      	ldr	r2, [sp, #24]
 8005224:	2a01      	cmp	r2, #1
 8005226:	dc6e      	bgt.n	8005306 <_dtoa_r+0x7ce>
 8005228:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800522a:	2a00      	cmp	r2, #0
 800522c:	d067      	beq.n	80052fe <_dtoa_r+0x7c6>
 800522e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005232:	9f07      	ldr	r7, [sp, #28]
 8005234:	9d05      	ldr	r5, [sp, #20]
 8005236:	9a05      	ldr	r2, [sp, #20]
 8005238:	2101      	movs	r1, #1
 800523a:	441a      	add	r2, r3
 800523c:	4620      	mov	r0, r4
 800523e:	9205      	str	r2, [sp, #20]
 8005240:	4498      	add	r8, r3
 8005242:	f000 fb26 	bl	8005892 <__i2b>
 8005246:	4606      	mov	r6, r0
 8005248:	2d00      	cmp	r5, #0
 800524a:	dd0c      	ble.n	8005266 <_dtoa_r+0x72e>
 800524c:	f1b8 0f00 	cmp.w	r8, #0
 8005250:	dd09      	ble.n	8005266 <_dtoa_r+0x72e>
 8005252:	4545      	cmp	r5, r8
 8005254:	9a05      	ldr	r2, [sp, #20]
 8005256:	462b      	mov	r3, r5
 8005258:	bfa8      	it	ge
 800525a:	4643      	movge	r3, r8
 800525c:	1ad2      	subs	r2, r2, r3
 800525e:	9205      	str	r2, [sp, #20]
 8005260:	1aed      	subs	r5, r5, r3
 8005262:	eba8 0803 	sub.w	r8, r8, r3
 8005266:	9b07      	ldr	r3, [sp, #28]
 8005268:	b1eb      	cbz	r3, 80052a6 <_dtoa_r+0x76e>
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	d067      	beq.n	8005340 <_dtoa_r+0x808>
 8005270:	b18f      	cbz	r7, 8005296 <_dtoa_r+0x75e>
 8005272:	4631      	mov	r1, r6
 8005274:	463a      	mov	r2, r7
 8005276:	4620      	mov	r0, r4
 8005278:	f000 fbaa 	bl	80059d0 <__pow5mult>
 800527c:	9a04      	ldr	r2, [sp, #16]
 800527e:	4601      	mov	r1, r0
 8005280:	4606      	mov	r6, r0
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fb0e 	bl	80058a4 <__multiply>
 8005288:	9904      	ldr	r1, [sp, #16]
 800528a:	9008      	str	r0, [sp, #32]
 800528c:	4620      	mov	r0, r4
 800528e:	f000 fa60 	bl	8005752 <_Bfree>
 8005292:	9b08      	ldr	r3, [sp, #32]
 8005294:	9304      	str	r3, [sp, #16]
 8005296:	9b07      	ldr	r3, [sp, #28]
 8005298:	1bda      	subs	r2, r3, r7
 800529a:	d004      	beq.n	80052a6 <_dtoa_r+0x76e>
 800529c:	9904      	ldr	r1, [sp, #16]
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 fb96 	bl	80059d0 <__pow5mult>
 80052a4:	9004      	str	r0, [sp, #16]
 80052a6:	2101      	movs	r1, #1
 80052a8:	4620      	mov	r0, r4
 80052aa:	f000 faf2 	bl	8005892 <__i2b>
 80052ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052b0:	4607      	mov	r7, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 81d0 	beq.w	8005658 <_dtoa_r+0xb20>
 80052b8:	461a      	mov	r2, r3
 80052ba:	4601      	mov	r1, r0
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 fb87 	bl	80059d0 <__pow5mult>
 80052c2:	9b06      	ldr	r3, [sp, #24]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	4607      	mov	r7, r0
 80052c8:	dc40      	bgt.n	800534c <_dtoa_r+0x814>
 80052ca:	9b00      	ldr	r3, [sp, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d139      	bne.n	8005344 <_dtoa_r+0x80c>
 80052d0:	9b01      	ldr	r3, [sp, #4]
 80052d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d136      	bne.n	8005348 <_dtoa_r+0x810>
 80052da:	9b01      	ldr	r3, [sp, #4]
 80052dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	0d1b      	lsrs	r3, r3, #20
 80052e2:	051b      	lsls	r3, r3, #20
 80052e4:	b12b      	cbz	r3, 80052f2 <_dtoa_r+0x7ba>
 80052e6:	9b05      	ldr	r3, [sp, #20]
 80052e8:	3301      	adds	r3, #1
 80052ea:	9305      	str	r3, [sp, #20]
 80052ec:	f108 0801 	add.w	r8, r8, #1
 80052f0:	2301      	movs	r3, #1
 80052f2:	9307      	str	r3, [sp, #28]
 80052f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d12a      	bne.n	8005350 <_dtoa_r+0x818>
 80052fa:	2001      	movs	r0, #1
 80052fc:	e030      	b.n	8005360 <_dtoa_r+0x828>
 80052fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005300:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005304:	e795      	b.n	8005232 <_dtoa_r+0x6fa>
 8005306:	9b07      	ldr	r3, [sp, #28]
 8005308:	f109 37ff 	add.w	r7, r9, #4294967295
 800530c:	42bb      	cmp	r3, r7
 800530e:	bfbf      	itttt	lt
 8005310:	9b07      	ldrlt	r3, [sp, #28]
 8005312:	9707      	strlt	r7, [sp, #28]
 8005314:	1afa      	sublt	r2, r7, r3
 8005316:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005318:	bfbb      	ittet	lt
 800531a:	189b      	addlt	r3, r3, r2
 800531c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800531e:	1bdf      	subge	r7, r3, r7
 8005320:	2700      	movlt	r7, #0
 8005322:	f1b9 0f00 	cmp.w	r9, #0
 8005326:	bfb5      	itete	lt
 8005328:	9b05      	ldrlt	r3, [sp, #20]
 800532a:	9d05      	ldrge	r5, [sp, #20]
 800532c:	eba3 0509 	sublt.w	r5, r3, r9
 8005330:	464b      	movge	r3, r9
 8005332:	bfb8      	it	lt
 8005334:	2300      	movlt	r3, #0
 8005336:	e77e      	b.n	8005236 <_dtoa_r+0x6fe>
 8005338:	9f07      	ldr	r7, [sp, #28]
 800533a:	9d05      	ldr	r5, [sp, #20]
 800533c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800533e:	e783      	b.n	8005248 <_dtoa_r+0x710>
 8005340:	9a07      	ldr	r2, [sp, #28]
 8005342:	e7ab      	b.n	800529c <_dtoa_r+0x764>
 8005344:	2300      	movs	r3, #0
 8005346:	e7d4      	b.n	80052f2 <_dtoa_r+0x7ba>
 8005348:	9b00      	ldr	r3, [sp, #0]
 800534a:	e7d2      	b.n	80052f2 <_dtoa_r+0x7ba>
 800534c:	2300      	movs	r3, #0
 800534e:	9307      	str	r3, [sp, #28]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005356:	6918      	ldr	r0, [r3, #16]
 8005358:	f000 fa4d 	bl	80057f6 <__hi0bits>
 800535c:	f1c0 0020 	rsb	r0, r0, #32
 8005360:	4440      	add	r0, r8
 8005362:	f010 001f 	ands.w	r0, r0, #31
 8005366:	d047      	beq.n	80053f8 <_dtoa_r+0x8c0>
 8005368:	f1c0 0320 	rsb	r3, r0, #32
 800536c:	2b04      	cmp	r3, #4
 800536e:	dd3b      	ble.n	80053e8 <_dtoa_r+0x8b0>
 8005370:	9b05      	ldr	r3, [sp, #20]
 8005372:	f1c0 001c 	rsb	r0, r0, #28
 8005376:	4403      	add	r3, r0
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	4405      	add	r5, r0
 800537c:	4480      	add	r8, r0
 800537e:	9b05      	ldr	r3, [sp, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	dd05      	ble.n	8005390 <_dtoa_r+0x858>
 8005384:	461a      	mov	r2, r3
 8005386:	9904      	ldr	r1, [sp, #16]
 8005388:	4620      	mov	r0, r4
 800538a:	f000 fb6f 	bl	8005a6c <__lshift>
 800538e:	9004      	str	r0, [sp, #16]
 8005390:	f1b8 0f00 	cmp.w	r8, #0
 8005394:	dd05      	ble.n	80053a2 <_dtoa_r+0x86a>
 8005396:	4639      	mov	r1, r7
 8005398:	4642      	mov	r2, r8
 800539a:	4620      	mov	r0, r4
 800539c:	f000 fb66 	bl	8005a6c <__lshift>
 80053a0:	4607      	mov	r7, r0
 80053a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053a4:	b353      	cbz	r3, 80053fc <_dtoa_r+0x8c4>
 80053a6:	4639      	mov	r1, r7
 80053a8:	9804      	ldr	r0, [sp, #16]
 80053aa:	f000 fbb3 	bl	8005b14 <__mcmp>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	da24      	bge.n	80053fc <_dtoa_r+0x8c4>
 80053b2:	2300      	movs	r3, #0
 80053b4:	220a      	movs	r2, #10
 80053b6:	9904      	ldr	r1, [sp, #16]
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f9e1 	bl	8005780 <__multadd>
 80053be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c0:	9004      	str	r0, [sp, #16]
 80053c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 814d 	beq.w	8005666 <_dtoa_r+0xb2e>
 80053cc:	2300      	movs	r3, #0
 80053ce:	4631      	mov	r1, r6
 80053d0:	220a      	movs	r2, #10
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 f9d4 	bl	8005780 <__multadd>
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	4606      	mov	r6, r0
 80053de:	dc4f      	bgt.n	8005480 <_dtoa_r+0x948>
 80053e0:	9b06      	ldr	r3, [sp, #24]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	dd4c      	ble.n	8005480 <_dtoa_r+0x948>
 80053e6:	e011      	b.n	800540c <_dtoa_r+0x8d4>
 80053e8:	d0c9      	beq.n	800537e <_dtoa_r+0x846>
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	331c      	adds	r3, #28
 80053ee:	441a      	add	r2, r3
 80053f0:	9205      	str	r2, [sp, #20]
 80053f2:	441d      	add	r5, r3
 80053f4:	4498      	add	r8, r3
 80053f6:	e7c2      	b.n	800537e <_dtoa_r+0x846>
 80053f8:	4603      	mov	r3, r0
 80053fa:	e7f6      	b.n	80053ea <_dtoa_r+0x8b2>
 80053fc:	f1b9 0f00 	cmp.w	r9, #0
 8005400:	dc38      	bgt.n	8005474 <_dtoa_r+0x93c>
 8005402:	9b06      	ldr	r3, [sp, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	dd35      	ble.n	8005474 <_dtoa_r+0x93c>
 8005408:	f8cd 9008 	str.w	r9, [sp, #8]
 800540c:	9b02      	ldr	r3, [sp, #8]
 800540e:	b963      	cbnz	r3, 800542a <_dtoa_r+0x8f2>
 8005410:	4639      	mov	r1, r7
 8005412:	2205      	movs	r2, #5
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f9b3 	bl	8005780 <__multadd>
 800541a:	4601      	mov	r1, r0
 800541c:	4607      	mov	r7, r0
 800541e:	9804      	ldr	r0, [sp, #16]
 8005420:	f000 fb78 	bl	8005b14 <__mcmp>
 8005424:	2800      	cmp	r0, #0
 8005426:	f73f adcc 	bgt.w	8004fc2 <_dtoa_r+0x48a>
 800542a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542c:	465d      	mov	r5, fp
 800542e:	ea6f 0a03 	mvn.w	sl, r3
 8005432:	f04f 0900 	mov.w	r9, #0
 8005436:	4639      	mov	r1, r7
 8005438:	4620      	mov	r0, r4
 800543a:	f000 f98a 	bl	8005752 <_Bfree>
 800543e:	2e00      	cmp	r6, #0
 8005440:	f43f aeb7 	beq.w	80051b2 <_dtoa_r+0x67a>
 8005444:	f1b9 0f00 	cmp.w	r9, #0
 8005448:	d005      	beq.n	8005456 <_dtoa_r+0x91e>
 800544a:	45b1      	cmp	r9, r6
 800544c:	d003      	beq.n	8005456 <_dtoa_r+0x91e>
 800544e:	4649      	mov	r1, r9
 8005450:	4620      	mov	r0, r4
 8005452:	f000 f97e 	bl	8005752 <_Bfree>
 8005456:	4631      	mov	r1, r6
 8005458:	4620      	mov	r0, r4
 800545a:	f000 f97a 	bl	8005752 <_Bfree>
 800545e:	e6a8      	b.n	80051b2 <_dtoa_r+0x67a>
 8005460:	2700      	movs	r7, #0
 8005462:	463e      	mov	r6, r7
 8005464:	e7e1      	b.n	800542a <_dtoa_r+0x8f2>
 8005466:	f8dd a020 	ldr.w	sl, [sp, #32]
 800546a:	463e      	mov	r6, r7
 800546c:	e5a9      	b.n	8004fc2 <_dtoa_r+0x48a>
 800546e:	bf00      	nop
 8005470:	40240000 	.word	0x40240000
 8005474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005476:	f8cd 9008 	str.w	r9, [sp, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80fa 	beq.w	8005674 <_dtoa_r+0xb3c>
 8005480:	2d00      	cmp	r5, #0
 8005482:	dd05      	ble.n	8005490 <_dtoa_r+0x958>
 8005484:	4631      	mov	r1, r6
 8005486:	462a      	mov	r2, r5
 8005488:	4620      	mov	r0, r4
 800548a:	f000 faef 	bl	8005a6c <__lshift>
 800548e:	4606      	mov	r6, r0
 8005490:	9b07      	ldr	r3, [sp, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d04c      	beq.n	8005530 <_dtoa_r+0x9f8>
 8005496:	6871      	ldr	r1, [r6, #4]
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f926 	bl	80056ea <_Balloc>
 800549e:	6932      	ldr	r2, [r6, #16]
 80054a0:	3202      	adds	r2, #2
 80054a2:	4605      	mov	r5, r0
 80054a4:	0092      	lsls	r2, r2, #2
 80054a6:	f106 010c 	add.w	r1, r6, #12
 80054aa:	300c      	adds	r0, #12
 80054ac:	f000 f912 	bl	80056d4 <memcpy>
 80054b0:	2201      	movs	r2, #1
 80054b2:	4629      	mov	r1, r5
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fad9 	bl	8005a6c <__lshift>
 80054ba:	9b00      	ldr	r3, [sp, #0]
 80054bc:	f8cd b014 	str.w	fp, [sp, #20]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	46b1      	mov	r9, r6
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	4606      	mov	r6, r0
 80054ca:	4639      	mov	r1, r7
 80054cc:	9804      	ldr	r0, [sp, #16]
 80054ce:	f7ff faa7 	bl	8004a20 <quorem>
 80054d2:	4649      	mov	r1, r9
 80054d4:	4605      	mov	r5, r0
 80054d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054da:	9804      	ldr	r0, [sp, #16]
 80054dc:	f000 fb1a 	bl	8005b14 <__mcmp>
 80054e0:	4632      	mov	r2, r6
 80054e2:	9000      	str	r0, [sp, #0]
 80054e4:	4639      	mov	r1, r7
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 fb2e 	bl	8005b48 <__mdiff>
 80054ec:	68c3      	ldr	r3, [r0, #12]
 80054ee:	4602      	mov	r2, r0
 80054f0:	bb03      	cbnz	r3, 8005534 <_dtoa_r+0x9fc>
 80054f2:	4601      	mov	r1, r0
 80054f4:	9008      	str	r0, [sp, #32]
 80054f6:	9804      	ldr	r0, [sp, #16]
 80054f8:	f000 fb0c 	bl	8005b14 <__mcmp>
 80054fc:	9a08      	ldr	r2, [sp, #32]
 80054fe:	4603      	mov	r3, r0
 8005500:	4611      	mov	r1, r2
 8005502:	4620      	mov	r0, r4
 8005504:	9308      	str	r3, [sp, #32]
 8005506:	f000 f924 	bl	8005752 <_Bfree>
 800550a:	9b08      	ldr	r3, [sp, #32]
 800550c:	b9a3      	cbnz	r3, 8005538 <_dtoa_r+0xa00>
 800550e:	9a06      	ldr	r2, [sp, #24]
 8005510:	b992      	cbnz	r2, 8005538 <_dtoa_r+0xa00>
 8005512:	9a07      	ldr	r2, [sp, #28]
 8005514:	b982      	cbnz	r2, 8005538 <_dtoa_r+0xa00>
 8005516:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800551a:	d029      	beq.n	8005570 <_dtoa_r+0xa38>
 800551c:	9b00      	ldr	r3, [sp, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	dd01      	ble.n	8005526 <_dtoa_r+0x9ee>
 8005522:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005526:	9b05      	ldr	r3, [sp, #20]
 8005528:	1c5d      	adds	r5, r3, #1
 800552a:	f883 8000 	strb.w	r8, [r3]
 800552e:	e782      	b.n	8005436 <_dtoa_r+0x8fe>
 8005530:	4630      	mov	r0, r6
 8005532:	e7c2      	b.n	80054ba <_dtoa_r+0x982>
 8005534:	2301      	movs	r3, #1
 8005536:	e7e3      	b.n	8005500 <_dtoa_r+0x9c8>
 8005538:	9a00      	ldr	r2, [sp, #0]
 800553a:	2a00      	cmp	r2, #0
 800553c:	db04      	blt.n	8005548 <_dtoa_r+0xa10>
 800553e:	d125      	bne.n	800558c <_dtoa_r+0xa54>
 8005540:	9a06      	ldr	r2, [sp, #24]
 8005542:	bb1a      	cbnz	r2, 800558c <_dtoa_r+0xa54>
 8005544:	9a07      	ldr	r2, [sp, #28]
 8005546:	bb0a      	cbnz	r2, 800558c <_dtoa_r+0xa54>
 8005548:	2b00      	cmp	r3, #0
 800554a:	ddec      	ble.n	8005526 <_dtoa_r+0x9ee>
 800554c:	2201      	movs	r2, #1
 800554e:	9904      	ldr	r1, [sp, #16]
 8005550:	4620      	mov	r0, r4
 8005552:	f000 fa8b 	bl	8005a6c <__lshift>
 8005556:	4639      	mov	r1, r7
 8005558:	9004      	str	r0, [sp, #16]
 800555a:	f000 fadb 	bl	8005b14 <__mcmp>
 800555e:	2800      	cmp	r0, #0
 8005560:	dc03      	bgt.n	800556a <_dtoa_r+0xa32>
 8005562:	d1e0      	bne.n	8005526 <_dtoa_r+0x9ee>
 8005564:	f018 0f01 	tst.w	r8, #1
 8005568:	d0dd      	beq.n	8005526 <_dtoa_r+0x9ee>
 800556a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800556e:	d1d8      	bne.n	8005522 <_dtoa_r+0x9ea>
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	9a05      	ldr	r2, [sp, #20]
 8005574:	1c5d      	adds	r5, r3, #1
 8005576:	2339      	movs	r3, #57	; 0x39
 8005578:	7013      	strb	r3, [r2, #0]
 800557a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800557e:	2b39      	cmp	r3, #57	; 0x39
 8005580:	f105 32ff 	add.w	r2, r5, #4294967295
 8005584:	d04f      	beq.n	8005626 <_dtoa_r+0xaee>
 8005586:	3301      	adds	r3, #1
 8005588:	7013      	strb	r3, [r2, #0]
 800558a:	e754      	b.n	8005436 <_dtoa_r+0x8fe>
 800558c:	9a05      	ldr	r2, [sp, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f102 0501 	add.w	r5, r2, #1
 8005594:	dd06      	ble.n	80055a4 <_dtoa_r+0xa6c>
 8005596:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800559a:	d0e9      	beq.n	8005570 <_dtoa_r+0xa38>
 800559c:	f108 0801 	add.w	r8, r8, #1
 80055a0:	9b05      	ldr	r3, [sp, #20]
 80055a2:	e7c2      	b.n	800552a <_dtoa_r+0x9f2>
 80055a4:	9a02      	ldr	r2, [sp, #8]
 80055a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80055aa:	eba5 030b 	sub.w	r3, r5, fp
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d021      	beq.n	80055f6 <_dtoa_r+0xabe>
 80055b2:	2300      	movs	r3, #0
 80055b4:	220a      	movs	r2, #10
 80055b6:	9904      	ldr	r1, [sp, #16]
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 f8e1 	bl	8005780 <__multadd>
 80055be:	45b1      	cmp	r9, r6
 80055c0:	9004      	str	r0, [sp, #16]
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	f04f 020a 	mov.w	r2, #10
 80055ca:	4649      	mov	r1, r9
 80055cc:	4620      	mov	r0, r4
 80055ce:	d105      	bne.n	80055dc <_dtoa_r+0xaa4>
 80055d0:	f000 f8d6 	bl	8005780 <__multadd>
 80055d4:	4681      	mov	r9, r0
 80055d6:	4606      	mov	r6, r0
 80055d8:	9505      	str	r5, [sp, #20]
 80055da:	e776      	b.n	80054ca <_dtoa_r+0x992>
 80055dc:	f000 f8d0 	bl	8005780 <__multadd>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4681      	mov	r9, r0
 80055e4:	2300      	movs	r3, #0
 80055e6:	220a      	movs	r2, #10
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f8c9 	bl	8005780 <__multadd>
 80055ee:	4606      	mov	r6, r0
 80055f0:	e7f2      	b.n	80055d8 <_dtoa_r+0xaa0>
 80055f2:	f04f 0900 	mov.w	r9, #0
 80055f6:	2201      	movs	r2, #1
 80055f8:	9904      	ldr	r1, [sp, #16]
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 fa36 	bl	8005a6c <__lshift>
 8005600:	4639      	mov	r1, r7
 8005602:	9004      	str	r0, [sp, #16]
 8005604:	f000 fa86 	bl	8005b14 <__mcmp>
 8005608:	2800      	cmp	r0, #0
 800560a:	dcb6      	bgt.n	800557a <_dtoa_r+0xa42>
 800560c:	d102      	bne.n	8005614 <_dtoa_r+0xadc>
 800560e:	f018 0f01 	tst.w	r8, #1
 8005612:	d1b2      	bne.n	800557a <_dtoa_r+0xa42>
 8005614:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	f105 32ff 	add.w	r2, r5, #4294967295
 800561e:	f47f af0a 	bne.w	8005436 <_dtoa_r+0x8fe>
 8005622:	4615      	mov	r5, r2
 8005624:	e7f6      	b.n	8005614 <_dtoa_r+0xadc>
 8005626:	4593      	cmp	fp, r2
 8005628:	d105      	bne.n	8005636 <_dtoa_r+0xafe>
 800562a:	2331      	movs	r3, #49	; 0x31
 800562c:	f10a 0a01 	add.w	sl, sl, #1
 8005630:	f88b 3000 	strb.w	r3, [fp]
 8005634:	e6ff      	b.n	8005436 <_dtoa_r+0x8fe>
 8005636:	4615      	mov	r5, r2
 8005638:	e79f      	b.n	800557a <_dtoa_r+0xa42>
 800563a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80056a0 <_dtoa_r+0xb68>
 800563e:	e007      	b.n	8005650 <_dtoa_r+0xb18>
 8005640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005642:	f8df b060 	ldr.w	fp, [pc, #96]	; 80056a4 <_dtoa_r+0xb6c>
 8005646:	b11b      	cbz	r3, 8005650 <_dtoa_r+0xb18>
 8005648:	f10b 0308 	add.w	r3, fp, #8
 800564c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4658      	mov	r0, fp
 8005652:	b017      	add	sp, #92	; 0x5c
 8005654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005658:	9b06      	ldr	r3, [sp, #24]
 800565a:	2b01      	cmp	r3, #1
 800565c:	f77f ae35 	ble.w	80052ca <_dtoa_r+0x792>
 8005660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005662:	9307      	str	r3, [sp, #28]
 8005664:	e649      	b.n	80052fa <_dtoa_r+0x7c2>
 8005666:	9b02      	ldr	r3, [sp, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	dc03      	bgt.n	8005674 <_dtoa_r+0xb3c>
 800566c:	9b06      	ldr	r3, [sp, #24]
 800566e:	2b02      	cmp	r3, #2
 8005670:	f73f aecc 	bgt.w	800540c <_dtoa_r+0x8d4>
 8005674:	465d      	mov	r5, fp
 8005676:	4639      	mov	r1, r7
 8005678:	9804      	ldr	r0, [sp, #16]
 800567a:	f7ff f9d1 	bl	8004a20 <quorem>
 800567e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005682:	f805 8b01 	strb.w	r8, [r5], #1
 8005686:	9a02      	ldr	r2, [sp, #8]
 8005688:	eba5 030b 	sub.w	r3, r5, fp
 800568c:	429a      	cmp	r2, r3
 800568e:	ddb0      	ble.n	80055f2 <_dtoa_r+0xaba>
 8005690:	2300      	movs	r3, #0
 8005692:	220a      	movs	r2, #10
 8005694:	9904      	ldr	r1, [sp, #16]
 8005696:	4620      	mov	r0, r4
 8005698:	f000 f872 	bl	8005780 <__multadd>
 800569c:	9004      	str	r0, [sp, #16]
 800569e:	e7ea      	b.n	8005676 <_dtoa_r+0xb3e>
 80056a0:	08006210 	.word	0x08006210
 80056a4:	08006234 	.word	0x08006234

080056a8 <_localeconv_r>:
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <_localeconv_r+0x14>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a18      	ldr	r0, [r3, #32]
 80056ae:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <_localeconv_r+0x18>)
 80056b0:	2800      	cmp	r0, #0
 80056b2:	bf08      	it	eq
 80056b4:	4618      	moveq	r0, r3
 80056b6:	30f0      	adds	r0, #240	; 0xf0
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000001c 	.word	0x2000001c
 80056c0:	20000080 	.word	0x20000080

080056c4 <malloc>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <malloc+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 bb45 	b.w	8005d58 <_malloc_r>
 80056ce:	bf00      	nop
 80056d0:	2000001c 	.word	0x2000001c

080056d4 <memcpy>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	1e43      	subs	r3, r0, #1
 80056d8:	440a      	add	r2, r1
 80056da:	4291      	cmp	r1, r2
 80056dc:	d100      	bne.n	80056e0 <memcpy+0xc>
 80056de:	bd10      	pop	{r4, pc}
 80056e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e8:	e7f7      	b.n	80056da <memcpy+0x6>

080056ea <_Balloc>:
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056ee:	4604      	mov	r4, r0
 80056f0:	460e      	mov	r6, r1
 80056f2:	b93d      	cbnz	r5, 8005704 <_Balloc+0x1a>
 80056f4:	2010      	movs	r0, #16
 80056f6:	f7ff ffe5 	bl	80056c4 <malloc>
 80056fa:	6260      	str	r0, [r4, #36]	; 0x24
 80056fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005700:	6005      	str	r5, [r0, #0]
 8005702:	60c5      	str	r5, [r0, #12]
 8005704:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005706:	68eb      	ldr	r3, [r5, #12]
 8005708:	b183      	cbz	r3, 800572c <_Balloc+0x42>
 800570a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005712:	b9b8      	cbnz	r0, 8005744 <_Balloc+0x5a>
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f506 	lsl.w	r5, r1, r6
 800571a:	1d6a      	adds	r2, r5, #5
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	4620      	mov	r0, r4
 8005720:	f000 fabe 	bl	8005ca0 <_calloc_r>
 8005724:	b160      	cbz	r0, 8005740 <_Balloc+0x56>
 8005726:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800572a:	e00e      	b.n	800574a <_Balloc+0x60>
 800572c:	2221      	movs	r2, #33	; 0x21
 800572e:	2104      	movs	r1, #4
 8005730:	4620      	mov	r0, r4
 8005732:	f000 fab5 	bl	8005ca0 <_calloc_r>
 8005736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005738:	60e8      	str	r0, [r5, #12]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e4      	bne.n	800570a <_Balloc+0x20>
 8005740:	2000      	movs	r0, #0
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	6802      	ldr	r2, [r0, #0]
 8005746:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800574a:	2300      	movs	r3, #0
 800574c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005750:	e7f7      	b.n	8005742 <_Balloc+0x58>

08005752 <_Bfree>:
 8005752:	b570      	push	{r4, r5, r6, lr}
 8005754:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005756:	4606      	mov	r6, r0
 8005758:	460d      	mov	r5, r1
 800575a:	b93c      	cbnz	r4, 800576c <_Bfree+0x1a>
 800575c:	2010      	movs	r0, #16
 800575e:	f7ff ffb1 	bl	80056c4 <malloc>
 8005762:	6270      	str	r0, [r6, #36]	; 0x24
 8005764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005768:	6004      	str	r4, [r0, #0]
 800576a:	60c4      	str	r4, [r0, #12]
 800576c:	b13d      	cbz	r5, 800577e <_Bfree+0x2c>
 800576e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005770:	686a      	ldr	r2, [r5, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005778:	6029      	str	r1, [r5, #0]
 800577a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800577e:	bd70      	pop	{r4, r5, r6, pc}

08005780 <__multadd>:
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	690d      	ldr	r5, [r1, #16]
 8005786:	461f      	mov	r7, r3
 8005788:	4606      	mov	r6, r0
 800578a:	460c      	mov	r4, r1
 800578c:	f101 0c14 	add.w	ip, r1, #20
 8005790:	2300      	movs	r3, #0
 8005792:	f8dc 0000 	ldr.w	r0, [ip]
 8005796:	b281      	uxth	r1, r0
 8005798:	fb02 7101 	mla	r1, r2, r1, r7
 800579c:	0c0f      	lsrs	r7, r1, #16
 800579e:	0c00      	lsrs	r0, r0, #16
 80057a0:	fb02 7000 	mla	r0, r2, r0, r7
 80057a4:	b289      	uxth	r1, r1
 80057a6:	3301      	adds	r3, #1
 80057a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80057ac:	429d      	cmp	r5, r3
 80057ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80057b2:	f84c 1b04 	str.w	r1, [ip], #4
 80057b6:	dcec      	bgt.n	8005792 <__multadd+0x12>
 80057b8:	b1d7      	cbz	r7, 80057f0 <__multadd+0x70>
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dc12      	bgt.n	80057e6 <__multadd+0x66>
 80057c0:	6861      	ldr	r1, [r4, #4]
 80057c2:	4630      	mov	r0, r6
 80057c4:	3101      	adds	r1, #1
 80057c6:	f7ff ff90 	bl	80056ea <_Balloc>
 80057ca:	6922      	ldr	r2, [r4, #16]
 80057cc:	3202      	adds	r2, #2
 80057ce:	f104 010c 	add.w	r1, r4, #12
 80057d2:	4680      	mov	r8, r0
 80057d4:	0092      	lsls	r2, r2, #2
 80057d6:	300c      	adds	r0, #12
 80057d8:	f7ff ff7c 	bl	80056d4 <memcpy>
 80057dc:	4621      	mov	r1, r4
 80057de:	4630      	mov	r0, r6
 80057e0:	f7ff ffb7 	bl	8005752 <_Bfree>
 80057e4:	4644      	mov	r4, r8
 80057e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057ea:	3501      	adds	r5, #1
 80057ec:	615f      	str	r7, [r3, #20]
 80057ee:	6125      	str	r5, [r4, #16]
 80057f0:	4620      	mov	r0, r4
 80057f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057f6 <__hi0bits>:
 80057f6:	0c02      	lsrs	r2, r0, #16
 80057f8:	0412      	lsls	r2, r2, #16
 80057fa:	4603      	mov	r3, r0
 80057fc:	b9b2      	cbnz	r2, 800582c <__hi0bits+0x36>
 80057fe:	0403      	lsls	r3, r0, #16
 8005800:	2010      	movs	r0, #16
 8005802:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005806:	bf04      	itt	eq
 8005808:	021b      	lsleq	r3, r3, #8
 800580a:	3008      	addeq	r0, #8
 800580c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005810:	bf04      	itt	eq
 8005812:	011b      	lsleq	r3, r3, #4
 8005814:	3004      	addeq	r0, #4
 8005816:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800581a:	bf04      	itt	eq
 800581c:	009b      	lsleq	r3, r3, #2
 800581e:	3002      	addeq	r0, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	db06      	blt.n	8005832 <__hi0bits+0x3c>
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	d503      	bpl.n	8005830 <__hi0bits+0x3a>
 8005828:	3001      	adds	r0, #1
 800582a:	4770      	bx	lr
 800582c:	2000      	movs	r0, #0
 800582e:	e7e8      	b.n	8005802 <__hi0bits+0xc>
 8005830:	2020      	movs	r0, #32
 8005832:	4770      	bx	lr

08005834 <__lo0bits>:
 8005834:	6803      	ldr	r3, [r0, #0]
 8005836:	f013 0207 	ands.w	r2, r3, #7
 800583a:	4601      	mov	r1, r0
 800583c:	d00b      	beq.n	8005856 <__lo0bits+0x22>
 800583e:	07da      	lsls	r2, r3, #31
 8005840:	d423      	bmi.n	800588a <__lo0bits+0x56>
 8005842:	0798      	lsls	r0, r3, #30
 8005844:	bf49      	itett	mi
 8005846:	085b      	lsrmi	r3, r3, #1
 8005848:	089b      	lsrpl	r3, r3, #2
 800584a:	2001      	movmi	r0, #1
 800584c:	600b      	strmi	r3, [r1, #0]
 800584e:	bf5c      	itt	pl
 8005850:	600b      	strpl	r3, [r1, #0]
 8005852:	2002      	movpl	r0, #2
 8005854:	4770      	bx	lr
 8005856:	b298      	uxth	r0, r3
 8005858:	b9a8      	cbnz	r0, 8005886 <__lo0bits+0x52>
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	2010      	movs	r0, #16
 800585e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005862:	bf04      	itt	eq
 8005864:	0a1b      	lsreq	r3, r3, #8
 8005866:	3008      	addeq	r0, #8
 8005868:	071a      	lsls	r2, r3, #28
 800586a:	bf04      	itt	eq
 800586c:	091b      	lsreq	r3, r3, #4
 800586e:	3004      	addeq	r0, #4
 8005870:	079a      	lsls	r2, r3, #30
 8005872:	bf04      	itt	eq
 8005874:	089b      	lsreq	r3, r3, #2
 8005876:	3002      	addeq	r0, #2
 8005878:	07da      	lsls	r2, r3, #31
 800587a:	d402      	bmi.n	8005882 <__lo0bits+0x4e>
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	d006      	beq.n	800588e <__lo0bits+0x5a>
 8005880:	3001      	adds	r0, #1
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	4770      	bx	lr
 8005886:	4610      	mov	r0, r2
 8005888:	e7e9      	b.n	800585e <__lo0bits+0x2a>
 800588a:	2000      	movs	r0, #0
 800588c:	4770      	bx	lr
 800588e:	2020      	movs	r0, #32
 8005890:	4770      	bx	lr

08005892 <__i2b>:
 8005892:	b510      	push	{r4, lr}
 8005894:	460c      	mov	r4, r1
 8005896:	2101      	movs	r1, #1
 8005898:	f7ff ff27 	bl	80056ea <_Balloc>
 800589c:	2201      	movs	r2, #1
 800589e:	6144      	str	r4, [r0, #20]
 80058a0:	6102      	str	r2, [r0, #16]
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <__multiply>:
 80058a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	4614      	mov	r4, r2
 80058aa:	690a      	ldr	r2, [r1, #16]
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	bfb8      	it	lt
 80058b2:	460b      	movlt	r3, r1
 80058b4:	4688      	mov	r8, r1
 80058b6:	bfbc      	itt	lt
 80058b8:	46a0      	movlt	r8, r4
 80058ba:	461c      	movlt	r4, r3
 80058bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80058c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80058cc:	eb07 0609 	add.w	r6, r7, r9
 80058d0:	42b3      	cmp	r3, r6
 80058d2:	bfb8      	it	lt
 80058d4:	3101      	addlt	r1, #1
 80058d6:	f7ff ff08 	bl	80056ea <_Balloc>
 80058da:	f100 0514 	add.w	r5, r0, #20
 80058de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80058e2:	462b      	mov	r3, r5
 80058e4:	2200      	movs	r2, #0
 80058e6:	4573      	cmp	r3, lr
 80058e8:	d316      	bcc.n	8005918 <__multiply+0x74>
 80058ea:	f104 0214 	add.w	r2, r4, #20
 80058ee:	f108 0114 	add.w	r1, r8, #20
 80058f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80058f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	9b00      	ldr	r3, [sp, #0]
 80058fe:	9201      	str	r2, [sp, #4]
 8005900:	4293      	cmp	r3, r2
 8005902:	d80c      	bhi.n	800591e <__multiply+0x7a>
 8005904:	2e00      	cmp	r6, #0
 8005906:	dd03      	ble.n	8005910 <__multiply+0x6c>
 8005908:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800590c:	2b00      	cmp	r3, #0
 800590e:	d05d      	beq.n	80059cc <__multiply+0x128>
 8005910:	6106      	str	r6, [r0, #16]
 8005912:	b003      	add	sp, #12
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	f843 2b04 	str.w	r2, [r3], #4
 800591c:	e7e3      	b.n	80058e6 <__multiply+0x42>
 800591e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005922:	f1bb 0f00 	cmp.w	fp, #0
 8005926:	d023      	beq.n	8005970 <__multiply+0xcc>
 8005928:	4689      	mov	r9, r1
 800592a:	46ac      	mov	ip, r5
 800592c:	f04f 0800 	mov.w	r8, #0
 8005930:	f859 4b04 	ldr.w	r4, [r9], #4
 8005934:	f8dc a000 	ldr.w	sl, [ip]
 8005938:	b2a3      	uxth	r3, r4
 800593a:	fa1f fa8a 	uxth.w	sl, sl
 800593e:	fb0b a303 	mla	r3, fp, r3, sl
 8005942:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005946:	f8dc 4000 	ldr.w	r4, [ip]
 800594a:	4443      	add	r3, r8
 800594c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005950:	fb0b 840a 	mla	r4, fp, sl, r8
 8005954:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005958:	46e2      	mov	sl, ip
 800595a:	b29b      	uxth	r3, r3
 800595c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005960:	454f      	cmp	r7, r9
 8005962:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005966:	f84a 3b04 	str.w	r3, [sl], #4
 800596a:	d82b      	bhi.n	80059c4 <__multiply+0x120>
 800596c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005976:	3204      	adds	r2, #4
 8005978:	f1ba 0f00 	cmp.w	sl, #0
 800597c:	d020      	beq.n	80059c0 <__multiply+0x11c>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	4689      	mov	r9, r1
 8005982:	46a8      	mov	r8, r5
 8005984:	f04f 0b00 	mov.w	fp, #0
 8005988:	f8b9 c000 	ldrh.w	ip, [r9]
 800598c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005990:	fb0a 440c 	mla	r4, sl, ip, r4
 8005994:	445c      	add	r4, fp
 8005996:	46c4      	mov	ip, r8
 8005998:	b29b      	uxth	r3, r3
 800599a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800599e:	f84c 3b04 	str.w	r3, [ip], #4
 80059a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80059a6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	fb0a b303 	mla	r3, sl, r3, fp
 80059b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80059b4:	454f      	cmp	r7, r9
 80059b6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80059ba:	d805      	bhi.n	80059c8 <__multiply+0x124>
 80059bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80059c0:	3504      	adds	r5, #4
 80059c2:	e79b      	b.n	80058fc <__multiply+0x58>
 80059c4:	46d4      	mov	ip, sl
 80059c6:	e7b3      	b.n	8005930 <__multiply+0x8c>
 80059c8:	46e0      	mov	r8, ip
 80059ca:	e7dd      	b.n	8005988 <__multiply+0xe4>
 80059cc:	3e01      	subs	r6, #1
 80059ce:	e799      	b.n	8005904 <__multiply+0x60>

080059d0 <__pow5mult>:
 80059d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d4:	4615      	mov	r5, r2
 80059d6:	f012 0203 	ands.w	r2, r2, #3
 80059da:	4606      	mov	r6, r0
 80059dc:	460f      	mov	r7, r1
 80059de:	d007      	beq.n	80059f0 <__pow5mult+0x20>
 80059e0:	3a01      	subs	r2, #1
 80059e2:	4c21      	ldr	r4, [pc, #132]	; (8005a68 <__pow5mult+0x98>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059ea:	f7ff fec9 	bl	8005780 <__multadd>
 80059ee:	4607      	mov	r7, r0
 80059f0:	10ad      	asrs	r5, r5, #2
 80059f2:	d035      	beq.n	8005a60 <__pow5mult+0x90>
 80059f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059f6:	b93c      	cbnz	r4, 8005a08 <__pow5mult+0x38>
 80059f8:	2010      	movs	r0, #16
 80059fa:	f7ff fe63 	bl	80056c4 <malloc>
 80059fe:	6270      	str	r0, [r6, #36]	; 0x24
 8005a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a04:	6004      	str	r4, [r0, #0]
 8005a06:	60c4      	str	r4, [r0, #12]
 8005a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a10:	b94c      	cbnz	r4, 8005a26 <__pow5mult+0x56>
 8005a12:	f240 2171 	movw	r1, #625	; 0x271
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff ff3b 	bl	8005892 <__i2b>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a22:	4604      	mov	r4, r0
 8005a24:	6003      	str	r3, [r0, #0]
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	07eb      	lsls	r3, r5, #31
 8005a2c:	d50a      	bpl.n	8005a44 <__pow5mult+0x74>
 8005a2e:	4639      	mov	r1, r7
 8005a30:	4622      	mov	r2, r4
 8005a32:	4630      	mov	r0, r6
 8005a34:	f7ff ff36 	bl	80058a4 <__multiply>
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4681      	mov	r9, r0
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff fe88 	bl	8005752 <_Bfree>
 8005a42:	464f      	mov	r7, r9
 8005a44:	106d      	asrs	r5, r5, #1
 8005a46:	d00b      	beq.n	8005a60 <__pow5mult+0x90>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	b938      	cbnz	r0, 8005a5c <__pow5mult+0x8c>
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4630      	mov	r0, r6
 8005a52:	f7ff ff27 	bl	80058a4 <__multiply>
 8005a56:	6020      	str	r0, [r4, #0]
 8005a58:	f8c0 8000 	str.w	r8, [r0]
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	e7e4      	b.n	8005a2a <__pow5mult+0x5a>
 8005a60:	4638      	mov	r0, r7
 8005a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a66:	bf00      	nop
 8005a68:	08006338 	.word	0x08006338

08005a6c <__lshift>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	460c      	mov	r4, r1
 8005a72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6849      	ldr	r1, [r1, #4]
 8005a7a:	eb0a 0903 	add.w	r9, sl, r3
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	4607      	mov	r7, r0
 8005a82:	4616      	mov	r6, r2
 8005a84:	f109 0501 	add.w	r5, r9, #1
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	db32      	blt.n	8005af2 <__lshift+0x86>
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f7ff fe2c 	bl	80056ea <_Balloc>
 8005a92:	2300      	movs	r3, #0
 8005a94:	4680      	mov	r8, r0
 8005a96:	f100 0114 	add.w	r1, r0, #20
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4553      	cmp	r3, sl
 8005a9e:	db2b      	blt.n	8005af8 <__lshift+0x8c>
 8005aa0:	6920      	ldr	r0, [r4, #16]
 8005aa2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005aa6:	f104 0314 	add.w	r3, r4, #20
 8005aaa:	f016 021f 	ands.w	r2, r6, #31
 8005aae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ab2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ab6:	d025      	beq.n	8005b04 <__lshift+0x98>
 8005ab8:	f1c2 0e20 	rsb	lr, r2, #32
 8005abc:	2000      	movs	r0, #0
 8005abe:	681e      	ldr	r6, [r3, #0]
 8005ac0:	468a      	mov	sl, r1
 8005ac2:	4096      	lsls	r6, r2
 8005ac4:	4330      	orrs	r0, r6
 8005ac6:	f84a 0b04 	str.w	r0, [sl], #4
 8005aca:	f853 0b04 	ldr.w	r0, [r3], #4
 8005ace:	459c      	cmp	ip, r3
 8005ad0:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ad4:	d814      	bhi.n	8005b00 <__lshift+0x94>
 8005ad6:	6048      	str	r0, [r1, #4]
 8005ad8:	b108      	cbz	r0, 8005ade <__lshift+0x72>
 8005ada:	f109 0502 	add.w	r5, r9, #2
 8005ade:	3d01      	subs	r5, #1
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	f7ff fe33 	bl	8005752 <_Bfree>
 8005aec:	4640      	mov	r0, r8
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	3101      	adds	r1, #1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	e7c7      	b.n	8005a88 <__lshift+0x1c>
 8005af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e7cd      	b.n	8005a9c <__lshift+0x30>
 8005b00:	4651      	mov	r1, sl
 8005b02:	e7dc      	b.n	8005abe <__lshift+0x52>
 8005b04:	3904      	subs	r1, #4
 8005b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b0e:	459c      	cmp	ip, r3
 8005b10:	d8f9      	bhi.n	8005b06 <__lshift+0x9a>
 8005b12:	e7e4      	b.n	8005ade <__lshift+0x72>

08005b14 <__mcmp>:
 8005b14:	6903      	ldr	r3, [r0, #16]
 8005b16:	690a      	ldr	r2, [r1, #16]
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	b530      	push	{r4, r5, lr}
 8005b1c:	d10c      	bne.n	8005b38 <__mcmp+0x24>
 8005b1e:	0092      	lsls	r2, r2, #2
 8005b20:	3014      	adds	r0, #20
 8005b22:	3114      	adds	r1, #20
 8005b24:	1884      	adds	r4, r0, r2
 8005b26:	4411      	add	r1, r2
 8005b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b30:	4295      	cmp	r5, r2
 8005b32:	d003      	beq.n	8005b3c <__mcmp+0x28>
 8005b34:	d305      	bcc.n	8005b42 <__mcmp+0x2e>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd30      	pop	{r4, r5, pc}
 8005b3c:	42a0      	cmp	r0, r4
 8005b3e:	d3f3      	bcc.n	8005b28 <__mcmp+0x14>
 8005b40:	e7fa      	b.n	8005b38 <__mcmp+0x24>
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	e7f7      	b.n	8005b38 <__mcmp+0x24>

08005b48 <__mdiff>:
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	4607      	mov	r7, r0
 8005b50:	4611      	mov	r1, r2
 8005b52:	4628      	mov	r0, r5
 8005b54:	4614      	mov	r4, r2
 8005b56:	f7ff ffdd 	bl	8005b14 <__mcmp>
 8005b5a:	1e06      	subs	r6, r0, #0
 8005b5c:	d108      	bne.n	8005b70 <__mdiff+0x28>
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4638      	mov	r0, r7
 8005b62:	f7ff fdc2 	bl	80056ea <_Balloc>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b70:	bfa4      	itt	ge
 8005b72:	4623      	movge	r3, r4
 8005b74:	462c      	movge	r4, r5
 8005b76:	4638      	mov	r0, r7
 8005b78:	6861      	ldr	r1, [r4, #4]
 8005b7a:	bfa6      	itte	ge
 8005b7c:	461d      	movge	r5, r3
 8005b7e:	2600      	movge	r6, #0
 8005b80:	2601      	movlt	r6, #1
 8005b82:	f7ff fdb2 	bl	80056ea <_Balloc>
 8005b86:	692b      	ldr	r3, [r5, #16]
 8005b88:	60c6      	str	r6, [r0, #12]
 8005b8a:	6926      	ldr	r6, [r4, #16]
 8005b8c:	f105 0914 	add.w	r9, r5, #20
 8005b90:	f104 0214 	add.w	r2, r4, #20
 8005b94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b9c:	f100 0514 	add.w	r5, r0, #20
 8005ba0:	f04f 0e00 	mov.w	lr, #0
 8005ba4:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ba8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005bac:	fa1e f18a 	uxtah	r1, lr, sl
 8005bb0:	b2a3      	uxth	r3, r4
 8005bb2:	1ac9      	subs	r1, r1, r3
 8005bb4:	0c23      	lsrs	r3, r4, #16
 8005bb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005bba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005bbe:	b289      	uxth	r1, r1
 8005bc0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005bc4:	45c8      	cmp	r8, r9
 8005bc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005bca:	4694      	mov	ip, r2
 8005bcc:	f845 3b04 	str.w	r3, [r5], #4
 8005bd0:	d8e8      	bhi.n	8005ba4 <__mdiff+0x5c>
 8005bd2:	45bc      	cmp	ip, r7
 8005bd4:	d304      	bcc.n	8005be0 <__mdiff+0x98>
 8005bd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005bda:	b183      	cbz	r3, 8005bfe <__mdiff+0xb6>
 8005bdc:	6106      	str	r6, [r0, #16]
 8005bde:	e7c5      	b.n	8005b6c <__mdiff+0x24>
 8005be0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005be4:	fa1e f381 	uxtah	r3, lr, r1
 8005be8:	141a      	asrs	r2, r3, #16
 8005bea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bf4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005bf8:	f845 3b04 	str.w	r3, [r5], #4
 8005bfc:	e7e9      	b.n	8005bd2 <__mdiff+0x8a>
 8005bfe:	3e01      	subs	r6, #1
 8005c00:	e7e9      	b.n	8005bd6 <__mdiff+0x8e>

08005c02 <__d2b>:
 8005c02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c06:	460e      	mov	r6, r1
 8005c08:	2101      	movs	r1, #1
 8005c0a:	ec59 8b10 	vmov	r8, r9, d0
 8005c0e:	4615      	mov	r5, r2
 8005c10:	f7ff fd6b 	bl	80056ea <_Balloc>
 8005c14:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c18:	4607      	mov	r7, r0
 8005c1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c1e:	bb34      	cbnz	r4, 8005c6e <__d2b+0x6c>
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f1b8 0300 	subs.w	r3, r8, #0
 8005c26:	d027      	beq.n	8005c78 <__d2b+0x76>
 8005c28:	a802      	add	r0, sp, #8
 8005c2a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005c2e:	f7ff fe01 	bl	8005834 <__lo0bits>
 8005c32:	9900      	ldr	r1, [sp, #0]
 8005c34:	b1f0      	cbz	r0, 8005c74 <__d2b+0x72>
 8005c36:	9a01      	ldr	r2, [sp, #4]
 8005c38:	f1c0 0320 	rsb	r3, r0, #32
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	430b      	orrs	r3, r1
 8005c42:	40c2      	lsrs	r2, r0
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	9201      	str	r2, [sp, #4]
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2102      	movne	r1, #2
 8005c52:	2101      	moveq	r1, #1
 8005c54:	6139      	str	r1, [r7, #16]
 8005c56:	b1c4      	cbz	r4, 8005c8a <__d2b+0x88>
 8005c58:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c5c:	4404      	add	r4, r0
 8005c5e:	6034      	str	r4, [r6, #0]
 8005c60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c64:	6028      	str	r0, [r5, #0]
 8005c66:	4638      	mov	r0, r7
 8005c68:	b003      	add	sp, #12
 8005c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c72:	e7d5      	b.n	8005c20 <__d2b+0x1e>
 8005c74:	6179      	str	r1, [r7, #20]
 8005c76:	e7e7      	b.n	8005c48 <__d2b+0x46>
 8005c78:	a801      	add	r0, sp, #4
 8005c7a:	f7ff fddb 	bl	8005834 <__lo0bits>
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	2101      	movs	r1, #1
 8005c84:	6139      	str	r1, [r7, #16]
 8005c86:	3020      	adds	r0, #32
 8005c88:	e7e5      	b.n	8005c56 <__d2b+0x54>
 8005c8a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c92:	6030      	str	r0, [r6, #0]
 8005c94:	6918      	ldr	r0, [r3, #16]
 8005c96:	f7ff fdae 	bl	80057f6 <__hi0bits>
 8005c9a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c9e:	e7e1      	b.n	8005c64 <__d2b+0x62>

08005ca0 <_calloc_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	fb02 f401 	mul.w	r4, r2, r1
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	f000 f856 	bl	8005d58 <_malloc_r>
 8005cac:	4605      	mov	r5, r0
 8005cae:	b118      	cbz	r0, 8005cb8 <_calloc_r+0x18>
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f7fe fa30 	bl	8004118 <memset>
 8005cb8:	4628      	mov	r0, r5
 8005cba:	bd38      	pop	{r3, r4, r5, pc}

08005cbc <_free_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d045      	beq.n	8005d50 <_free_r+0x94>
 8005cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc8:	1f0c      	subs	r4, r1, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bfb8      	it	lt
 8005cce:	18e4      	addlt	r4, r4, r3
 8005cd0:	f000 fa29 	bl	8006126 <__malloc_lock>
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <_free_r+0x98>)
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	4610      	mov	r0, r2
 8005cda:	b933      	cbnz	r3, 8005cea <_free_r+0x2e>
 8005cdc:	6063      	str	r3, [r4, #4]
 8005cde:	6014      	str	r4, [r2, #0]
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ce6:	f000 ba1f 	b.w	8006128 <__malloc_unlock>
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	d90c      	bls.n	8005d08 <_free_r+0x4c>
 8005cee:	6821      	ldr	r1, [r4, #0]
 8005cf0:	1862      	adds	r2, r4, r1
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bf04      	itt	eq
 8005cf6:	681a      	ldreq	r2, [r3, #0]
 8005cf8:	685b      	ldreq	r3, [r3, #4]
 8005cfa:	6063      	str	r3, [r4, #4]
 8005cfc:	bf04      	itt	eq
 8005cfe:	1852      	addeq	r2, r2, r1
 8005d00:	6022      	streq	r2, [r4, #0]
 8005d02:	6004      	str	r4, [r0, #0]
 8005d04:	e7ec      	b.n	8005ce0 <_free_r+0x24>
 8005d06:	4613      	mov	r3, r2
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	b10a      	cbz	r2, 8005d10 <_free_r+0x54>
 8005d0c:	42a2      	cmp	r2, r4
 8005d0e:	d9fa      	bls.n	8005d06 <_free_r+0x4a>
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	1858      	adds	r0, r3, r1
 8005d14:	42a0      	cmp	r0, r4
 8005d16:	d10b      	bne.n	8005d30 <_free_r+0x74>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	4401      	add	r1, r0
 8005d1c:	1858      	adds	r0, r3, r1
 8005d1e:	4282      	cmp	r2, r0
 8005d20:	6019      	str	r1, [r3, #0]
 8005d22:	d1dd      	bne.n	8005ce0 <_free_r+0x24>
 8005d24:	6810      	ldr	r0, [r2, #0]
 8005d26:	6852      	ldr	r2, [r2, #4]
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	4401      	add	r1, r0
 8005d2c:	6019      	str	r1, [r3, #0]
 8005d2e:	e7d7      	b.n	8005ce0 <_free_r+0x24>
 8005d30:	d902      	bls.n	8005d38 <_free_r+0x7c>
 8005d32:	230c      	movs	r3, #12
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	e7d3      	b.n	8005ce0 <_free_r+0x24>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	1821      	adds	r1, r4, r0
 8005d3c:	428a      	cmp	r2, r1
 8005d3e:	bf04      	itt	eq
 8005d40:	6811      	ldreq	r1, [r2, #0]
 8005d42:	6852      	ldreq	r2, [r2, #4]
 8005d44:	6062      	str	r2, [r4, #4]
 8005d46:	bf04      	itt	eq
 8005d48:	1809      	addeq	r1, r1, r0
 8005d4a:	6021      	streq	r1, [r4, #0]
 8005d4c:	605c      	str	r4, [r3, #4]
 8005d4e:	e7c7      	b.n	8005ce0 <_free_r+0x24>
 8005d50:	bd38      	pop	{r3, r4, r5, pc}
 8005d52:	bf00      	nop
 8005d54:	20000218 	.word	0x20000218

08005d58 <_malloc_r>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	1ccd      	adds	r5, r1, #3
 8005d5c:	f025 0503 	bic.w	r5, r5, #3
 8005d60:	3508      	adds	r5, #8
 8005d62:	2d0c      	cmp	r5, #12
 8005d64:	bf38      	it	cc
 8005d66:	250c      	movcc	r5, #12
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	db01      	blt.n	8005d72 <_malloc_r+0x1a>
 8005d6e:	42a9      	cmp	r1, r5
 8005d70:	d903      	bls.n	8005d7a <_malloc_r+0x22>
 8005d72:	230c      	movs	r3, #12
 8005d74:	6033      	str	r3, [r6, #0]
 8005d76:	2000      	movs	r0, #0
 8005d78:	bd70      	pop	{r4, r5, r6, pc}
 8005d7a:	f000 f9d4 	bl	8006126 <__malloc_lock>
 8005d7e:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <_malloc_r+0xac>)
 8005d80:	6814      	ldr	r4, [r2, #0]
 8005d82:	4621      	mov	r1, r4
 8005d84:	b991      	cbnz	r1, 8005dac <_malloc_r+0x54>
 8005d86:	4c20      	ldr	r4, [pc, #128]	; (8005e08 <_malloc_r+0xb0>)
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	b91b      	cbnz	r3, 8005d94 <_malloc_r+0x3c>
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f000 f98f 	bl	80060b0 <_sbrk_r>
 8005d92:	6020      	str	r0, [r4, #0]
 8005d94:	4629      	mov	r1, r5
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 f98a 	bl	80060b0 <_sbrk_r>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d124      	bne.n	8005dea <_malloc_r+0x92>
 8005da0:	230c      	movs	r3, #12
 8005da2:	6033      	str	r3, [r6, #0]
 8005da4:	4630      	mov	r0, r6
 8005da6:	f000 f9bf 	bl	8006128 <__malloc_unlock>
 8005daa:	e7e4      	b.n	8005d76 <_malloc_r+0x1e>
 8005dac:	680b      	ldr	r3, [r1, #0]
 8005dae:	1b5b      	subs	r3, r3, r5
 8005db0:	d418      	bmi.n	8005de4 <_malloc_r+0x8c>
 8005db2:	2b0b      	cmp	r3, #11
 8005db4:	d90f      	bls.n	8005dd6 <_malloc_r+0x7e>
 8005db6:	600b      	str	r3, [r1, #0]
 8005db8:	50cd      	str	r5, [r1, r3]
 8005dba:	18cc      	adds	r4, r1, r3
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f000 f9b3 	bl	8006128 <__malloc_unlock>
 8005dc2:	f104 000b 	add.w	r0, r4, #11
 8005dc6:	1d23      	adds	r3, r4, #4
 8005dc8:	f020 0007 	bic.w	r0, r0, #7
 8005dcc:	1ac3      	subs	r3, r0, r3
 8005dce:	d0d3      	beq.n	8005d78 <_malloc_r+0x20>
 8005dd0:	425a      	negs	r2, r3
 8005dd2:	50e2      	str	r2, [r4, r3]
 8005dd4:	e7d0      	b.n	8005d78 <_malloc_r+0x20>
 8005dd6:	428c      	cmp	r4, r1
 8005dd8:	684b      	ldr	r3, [r1, #4]
 8005dda:	bf16      	itet	ne
 8005ddc:	6063      	strne	r3, [r4, #4]
 8005dde:	6013      	streq	r3, [r2, #0]
 8005de0:	460c      	movne	r4, r1
 8005de2:	e7eb      	b.n	8005dbc <_malloc_r+0x64>
 8005de4:	460c      	mov	r4, r1
 8005de6:	6849      	ldr	r1, [r1, #4]
 8005de8:	e7cc      	b.n	8005d84 <_malloc_r+0x2c>
 8005dea:	1cc4      	adds	r4, r0, #3
 8005dec:	f024 0403 	bic.w	r4, r4, #3
 8005df0:	42a0      	cmp	r0, r4
 8005df2:	d005      	beq.n	8005e00 <_malloc_r+0xa8>
 8005df4:	1a21      	subs	r1, r4, r0
 8005df6:	4630      	mov	r0, r6
 8005df8:	f000 f95a 	bl	80060b0 <_sbrk_r>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d0cf      	beq.n	8005da0 <_malloc_r+0x48>
 8005e00:	6025      	str	r5, [r4, #0]
 8005e02:	e7db      	b.n	8005dbc <_malloc_r+0x64>
 8005e04:	20000218 	.word	0x20000218
 8005e08:	2000021c 	.word	0x2000021c

08005e0c <__ssputs_r>:
 8005e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	688e      	ldr	r6, [r1, #8]
 8005e12:	429e      	cmp	r6, r3
 8005e14:	4682      	mov	sl, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	4690      	mov	r8, r2
 8005e1a:	4699      	mov	r9, r3
 8005e1c:	d837      	bhi.n	8005e8e <__ssputs_r+0x82>
 8005e1e:	898a      	ldrh	r2, [r1, #12]
 8005e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e24:	d031      	beq.n	8005e8a <__ssputs_r+0x7e>
 8005e26:	6825      	ldr	r5, [r4, #0]
 8005e28:	6909      	ldr	r1, [r1, #16]
 8005e2a:	1a6f      	subs	r7, r5, r1
 8005e2c:	6965      	ldr	r5, [r4, #20]
 8005e2e:	2302      	movs	r3, #2
 8005e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e38:	f109 0301 	add.w	r3, r9, #1
 8005e3c:	443b      	add	r3, r7
 8005e3e:	429d      	cmp	r5, r3
 8005e40:	bf38      	it	cc
 8005e42:	461d      	movcc	r5, r3
 8005e44:	0553      	lsls	r3, r2, #21
 8005e46:	d530      	bpl.n	8005eaa <__ssputs_r+0x9e>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7ff ff85 	bl	8005d58 <_malloc_r>
 8005e4e:	4606      	mov	r6, r0
 8005e50:	b950      	cbnz	r0, 8005e68 <__ssputs_r+0x5c>
 8005e52:	230c      	movs	r3, #12
 8005e54:	f8ca 3000 	str.w	r3, [sl]
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	463a      	mov	r2, r7
 8005e6a:	6921      	ldr	r1, [r4, #16]
 8005e6c:	f7ff fc32 	bl	80056d4 <memcpy>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	6126      	str	r6, [r4, #16]
 8005e7e:	6165      	str	r5, [r4, #20]
 8005e80:	443e      	add	r6, r7
 8005e82:	1bed      	subs	r5, r5, r7
 8005e84:	6026      	str	r6, [r4, #0]
 8005e86:	60a5      	str	r5, [r4, #8]
 8005e88:	464e      	mov	r6, r9
 8005e8a:	454e      	cmp	r6, r9
 8005e8c:	d900      	bls.n	8005e90 <__ssputs_r+0x84>
 8005e8e:	464e      	mov	r6, r9
 8005e90:	4632      	mov	r2, r6
 8005e92:	4641      	mov	r1, r8
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	f000 f92d 	bl	80060f4 <memmove>
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	1b9b      	subs	r3, r3, r6
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	441e      	add	r6, r3
 8005ea4:	6026      	str	r6, [r4, #0]
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e7dc      	b.n	8005e64 <__ssputs_r+0x58>
 8005eaa:	462a      	mov	r2, r5
 8005eac:	f000 f93d 	bl	800612a <_realloc_r>
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d1e2      	bne.n	8005e7c <__ssputs_r+0x70>
 8005eb6:	6921      	ldr	r1, [r4, #16]
 8005eb8:	4650      	mov	r0, sl
 8005eba:	f7ff feff 	bl	8005cbc <_free_r>
 8005ebe:	e7c8      	b.n	8005e52 <__ssputs_r+0x46>

08005ec0 <_svfiprintf_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	461d      	mov	r5, r3
 8005ec6:	898b      	ldrh	r3, [r1, #12]
 8005ec8:	061f      	lsls	r7, r3, #24
 8005eca:	b09d      	sub	sp, #116	; 0x74
 8005ecc:	4680      	mov	r8, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	d50f      	bpl.n	8005ef4 <_svfiprintf_r+0x34>
 8005ed4:	690b      	ldr	r3, [r1, #16]
 8005ed6:	b96b      	cbnz	r3, 8005ef4 <_svfiprintf_r+0x34>
 8005ed8:	2140      	movs	r1, #64	; 0x40
 8005eda:	f7ff ff3d 	bl	8005d58 <_malloc_r>
 8005ede:	6020      	str	r0, [r4, #0]
 8005ee0:	6120      	str	r0, [r4, #16]
 8005ee2:	b928      	cbnz	r0, 8005ef0 <_svfiprintf_r+0x30>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	f8c8 3000 	str.w	r3, [r8]
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295
 8005eee:	e0c8      	b.n	8006082 <_svfiprintf_r+0x1c2>
 8005ef0:	2340      	movs	r3, #64	; 0x40
 8005ef2:	6163      	str	r3, [r4, #20]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005efe:	2330      	movs	r3, #48	; 0x30
 8005f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f04:	9503      	str	r5, [sp, #12]
 8005f06:	f04f 0b01 	mov.w	fp, #1
 8005f0a:	4637      	mov	r7, r6
 8005f0c:	463d      	mov	r5, r7
 8005f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f12:	b10b      	cbz	r3, 8005f18 <_svfiprintf_r+0x58>
 8005f14:	2b25      	cmp	r3, #37	; 0x25
 8005f16:	d13e      	bne.n	8005f96 <_svfiprintf_r+0xd6>
 8005f18:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f1c:	d00b      	beq.n	8005f36 <_svfiprintf_r+0x76>
 8005f1e:	4653      	mov	r3, sl
 8005f20:	4632      	mov	r2, r6
 8005f22:	4621      	mov	r1, r4
 8005f24:	4640      	mov	r0, r8
 8005f26:	f7ff ff71 	bl	8005e0c <__ssputs_r>
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	f000 80a4 	beq.w	8006078 <_svfiprintf_r+0x1b8>
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	4453      	add	r3, sl
 8005f34:	9309      	str	r3, [sp, #36]	; 0x24
 8005f36:	783b      	ldrb	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 809d 	beq.w	8006078 <_svfiprintf_r+0x1b8>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f50:	931a      	str	r3, [sp, #104]	; 0x68
 8005f52:	462f      	mov	r7, r5
 8005f54:	2205      	movs	r2, #5
 8005f56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005f5a:	4850      	ldr	r0, [pc, #320]	; (800609c <_svfiprintf_r+0x1dc>)
 8005f5c:	f7fa f950 	bl	8000200 <memchr>
 8005f60:	9b04      	ldr	r3, [sp, #16]
 8005f62:	b9d0      	cbnz	r0, 8005f9a <_svfiprintf_r+0xda>
 8005f64:	06d9      	lsls	r1, r3, #27
 8005f66:	bf44      	itt	mi
 8005f68:	2220      	movmi	r2, #32
 8005f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f6e:	071a      	lsls	r2, r3, #28
 8005f70:	bf44      	itt	mi
 8005f72:	222b      	movmi	r2, #43	; 0x2b
 8005f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f78:	782a      	ldrb	r2, [r5, #0]
 8005f7a:	2a2a      	cmp	r2, #42	; 0x2a
 8005f7c:	d015      	beq.n	8005faa <_svfiprintf_r+0xea>
 8005f7e:	9a07      	ldr	r2, [sp, #28]
 8005f80:	462f      	mov	r7, r5
 8005f82:	2000      	movs	r0, #0
 8005f84:	250a      	movs	r5, #10
 8005f86:	4639      	mov	r1, r7
 8005f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f8c:	3b30      	subs	r3, #48	; 0x30
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	d94d      	bls.n	800602e <_svfiprintf_r+0x16e>
 8005f92:	b1b8      	cbz	r0, 8005fc4 <_svfiprintf_r+0x104>
 8005f94:	e00f      	b.n	8005fb6 <_svfiprintf_r+0xf6>
 8005f96:	462f      	mov	r7, r5
 8005f98:	e7b8      	b.n	8005f0c <_svfiprintf_r+0x4c>
 8005f9a:	4a40      	ldr	r2, [pc, #256]	; (800609c <_svfiprintf_r+0x1dc>)
 8005f9c:	1a80      	subs	r0, r0, r2
 8005f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8005fa2:	4318      	orrs	r0, r3
 8005fa4:	9004      	str	r0, [sp, #16]
 8005fa6:	463d      	mov	r5, r7
 8005fa8:	e7d3      	b.n	8005f52 <_svfiprintf_r+0x92>
 8005faa:	9a03      	ldr	r2, [sp, #12]
 8005fac:	1d11      	adds	r1, r2, #4
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	9103      	str	r1, [sp, #12]
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	db01      	blt.n	8005fba <_svfiprintf_r+0xfa>
 8005fb6:	9207      	str	r2, [sp, #28]
 8005fb8:	e004      	b.n	8005fc4 <_svfiprintf_r+0x104>
 8005fba:	4252      	negs	r2, r2
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	9207      	str	r2, [sp, #28]
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	783b      	ldrb	r3, [r7, #0]
 8005fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc8:	d10c      	bne.n	8005fe4 <_svfiprintf_r+0x124>
 8005fca:	787b      	ldrb	r3, [r7, #1]
 8005fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005fce:	d133      	bne.n	8006038 <_svfiprintf_r+0x178>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9203      	str	r2, [sp, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfb8      	it	lt
 8005fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fe0:	3702      	adds	r7, #2
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	4d2e      	ldr	r5, [pc, #184]	; (80060a0 <_svfiprintf_r+0x1e0>)
 8005fe6:	7839      	ldrb	r1, [r7, #0]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7fa f908 	bl	8000200 <memchr>
 8005ff0:	b138      	cbz	r0, 8006002 <_svfiprintf_r+0x142>
 8005ff2:	2340      	movs	r3, #64	; 0x40
 8005ff4:	1b40      	subs	r0, r0, r5
 8005ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	4303      	orrs	r3, r0
 8005ffe:	3701      	adds	r7, #1
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	7839      	ldrb	r1, [r7, #0]
 8006004:	4827      	ldr	r0, [pc, #156]	; (80060a4 <_svfiprintf_r+0x1e4>)
 8006006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800600a:	2206      	movs	r2, #6
 800600c:	1c7e      	adds	r6, r7, #1
 800600e:	f7fa f8f7 	bl	8000200 <memchr>
 8006012:	2800      	cmp	r0, #0
 8006014:	d038      	beq.n	8006088 <_svfiprintf_r+0x1c8>
 8006016:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <_svfiprintf_r+0x1e8>)
 8006018:	bb13      	cbnz	r3, 8006060 <_svfiprintf_r+0x1a0>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	3307      	adds	r3, #7
 800601e:	f023 0307 	bic.w	r3, r3, #7
 8006022:	3308      	adds	r3, #8
 8006024:	9303      	str	r3, [sp, #12]
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	444b      	add	r3, r9
 800602a:	9309      	str	r3, [sp, #36]	; 0x24
 800602c:	e76d      	b.n	8005f0a <_svfiprintf_r+0x4a>
 800602e:	fb05 3202 	mla	r2, r5, r2, r3
 8006032:	2001      	movs	r0, #1
 8006034:	460f      	mov	r7, r1
 8006036:	e7a6      	b.n	8005f86 <_svfiprintf_r+0xc6>
 8006038:	2300      	movs	r3, #0
 800603a:	3701      	adds	r7, #1
 800603c:	9305      	str	r3, [sp, #20]
 800603e:	4619      	mov	r1, r3
 8006040:	250a      	movs	r5, #10
 8006042:	4638      	mov	r0, r7
 8006044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006048:	3a30      	subs	r2, #48	; 0x30
 800604a:	2a09      	cmp	r2, #9
 800604c:	d903      	bls.n	8006056 <_svfiprintf_r+0x196>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0c8      	beq.n	8005fe4 <_svfiprintf_r+0x124>
 8006052:	9105      	str	r1, [sp, #20]
 8006054:	e7c6      	b.n	8005fe4 <_svfiprintf_r+0x124>
 8006056:	fb05 2101 	mla	r1, r5, r1, r2
 800605a:	2301      	movs	r3, #1
 800605c:	4607      	mov	r7, r0
 800605e:	e7f0      	b.n	8006042 <_svfiprintf_r+0x182>
 8006060:	ab03      	add	r3, sp, #12
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4622      	mov	r2, r4
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <_svfiprintf_r+0x1ec>)
 8006068:	a904      	add	r1, sp, #16
 800606a:	4640      	mov	r0, r8
 800606c:	f7fe f8f0 	bl	8004250 <_printf_float>
 8006070:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006074:	4681      	mov	r9, r0
 8006076:	d1d6      	bne.n	8006026 <_svfiprintf_r+0x166>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	065b      	lsls	r3, r3, #25
 800607c:	f53f af35 	bmi.w	8005eea <_svfiprintf_r+0x2a>
 8006080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006082:	b01d      	add	sp, #116	; 0x74
 8006084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006088:	ab03      	add	r3, sp, #12
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	4622      	mov	r2, r4
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <_svfiprintf_r+0x1ec>)
 8006090:	a904      	add	r1, sp, #16
 8006092:	4640      	mov	r0, r8
 8006094:	f7fe fb92 	bl	80047bc <_printf_i>
 8006098:	e7ea      	b.n	8006070 <_svfiprintf_r+0x1b0>
 800609a:	bf00      	nop
 800609c:	08006344 	.word	0x08006344
 80060a0:	0800634a 	.word	0x0800634a
 80060a4:	0800634e 	.word	0x0800634e
 80060a8:	08004251 	.word	0x08004251
 80060ac:	08005e0d 	.word	0x08005e0d

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4c06      	ldr	r4, [pc, #24]	; (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4605      	mov	r5, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	f7fb fde4 	bl	8001c88 <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	200002d0 	.word	0x200002d0

080060d0 <__ascii_mbtowc>:
 80060d0:	b082      	sub	sp, #8
 80060d2:	b901      	cbnz	r1, 80060d6 <__ascii_mbtowc+0x6>
 80060d4:	a901      	add	r1, sp, #4
 80060d6:	b142      	cbz	r2, 80060ea <__ascii_mbtowc+0x1a>
 80060d8:	b14b      	cbz	r3, 80060ee <__ascii_mbtowc+0x1e>
 80060da:	7813      	ldrb	r3, [r2, #0]
 80060dc:	600b      	str	r3, [r1, #0]
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	1c10      	adds	r0, r2, #0
 80060e2:	bf18      	it	ne
 80060e4:	2001      	movne	r0, #1
 80060e6:	b002      	add	sp, #8
 80060e8:	4770      	bx	lr
 80060ea:	4610      	mov	r0, r2
 80060ec:	e7fb      	b.n	80060e6 <__ascii_mbtowc+0x16>
 80060ee:	f06f 0001 	mvn.w	r0, #1
 80060f2:	e7f8      	b.n	80060e6 <__ascii_mbtowc+0x16>

080060f4 <memmove>:
 80060f4:	4288      	cmp	r0, r1
 80060f6:	b510      	push	{r4, lr}
 80060f8:	eb01 0302 	add.w	r3, r1, r2
 80060fc:	d807      	bhi.n	800610e <memmove+0x1a>
 80060fe:	1e42      	subs	r2, r0, #1
 8006100:	4299      	cmp	r1, r3
 8006102:	d00a      	beq.n	800611a <memmove+0x26>
 8006104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006108:	f802 4f01 	strb.w	r4, [r2, #1]!
 800610c:	e7f8      	b.n	8006100 <memmove+0xc>
 800610e:	4283      	cmp	r3, r0
 8006110:	d9f5      	bls.n	80060fe <memmove+0xa>
 8006112:	1881      	adds	r1, r0, r2
 8006114:	1ad2      	subs	r2, r2, r3
 8006116:	42d3      	cmn	r3, r2
 8006118:	d100      	bne.n	800611c <memmove+0x28>
 800611a:	bd10      	pop	{r4, pc}
 800611c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006120:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006124:	e7f7      	b.n	8006116 <memmove+0x22>

08006126 <__malloc_lock>:
 8006126:	4770      	bx	lr

08006128 <__malloc_unlock>:
 8006128:	4770      	bx	lr

0800612a <_realloc_r>:
 800612a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612c:	4607      	mov	r7, r0
 800612e:	4614      	mov	r4, r2
 8006130:	460e      	mov	r6, r1
 8006132:	b921      	cbnz	r1, 800613e <_realloc_r+0x14>
 8006134:	4611      	mov	r1, r2
 8006136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800613a:	f7ff be0d 	b.w	8005d58 <_malloc_r>
 800613e:	b922      	cbnz	r2, 800614a <_realloc_r+0x20>
 8006140:	f7ff fdbc 	bl	8005cbc <_free_r>
 8006144:	4625      	mov	r5, r4
 8006146:	4628      	mov	r0, r5
 8006148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800614a:	f000 f821 	bl	8006190 <_malloc_usable_size_r>
 800614e:	42a0      	cmp	r0, r4
 8006150:	d20f      	bcs.n	8006172 <_realloc_r+0x48>
 8006152:	4621      	mov	r1, r4
 8006154:	4638      	mov	r0, r7
 8006156:	f7ff fdff 	bl	8005d58 <_malloc_r>
 800615a:	4605      	mov	r5, r0
 800615c:	2800      	cmp	r0, #0
 800615e:	d0f2      	beq.n	8006146 <_realloc_r+0x1c>
 8006160:	4631      	mov	r1, r6
 8006162:	4622      	mov	r2, r4
 8006164:	f7ff fab6 	bl	80056d4 <memcpy>
 8006168:	4631      	mov	r1, r6
 800616a:	4638      	mov	r0, r7
 800616c:	f7ff fda6 	bl	8005cbc <_free_r>
 8006170:	e7e9      	b.n	8006146 <_realloc_r+0x1c>
 8006172:	4635      	mov	r5, r6
 8006174:	e7e7      	b.n	8006146 <_realloc_r+0x1c>

08006176 <__ascii_wctomb>:
 8006176:	b149      	cbz	r1, 800618c <__ascii_wctomb+0x16>
 8006178:	2aff      	cmp	r2, #255	; 0xff
 800617a:	bf85      	ittet	hi
 800617c:	238a      	movhi	r3, #138	; 0x8a
 800617e:	6003      	strhi	r3, [r0, #0]
 8006180:	700a      	strbls	r2, [r1, #0]
 8006182:	f04f 30ff 	movhi.w	r0, #4294967295
 8006186:	bf98      	it	ls
 8006188:	2001      	movls	r0, #1
 800618a:	4770      	bx	lr
 800618c:	4608      	mov	r0, r1
 800618e:	4770      	bx	lr

08006190 <_malloc_usable_size_r>:
 8006190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006194:	1f18      	subs	r0, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfbc      	itt	lt
 800619a:	580b      	ldrlt	r3, [r1, r0]
 800619c:	18c0      	addlt	r0, r0, r3
 800619e:	4770      	bx	lr

080061a0 <_init>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr

080061ac <_fini>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr
